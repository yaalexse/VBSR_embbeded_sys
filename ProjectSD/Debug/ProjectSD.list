
ProjectSD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08007cbc  08007cbc  00017cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fb4  08007fb4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007fb4  08007fb4  00017fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fbc  08007fbc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fbc  08007fbc  00017fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fc0  08007fc0  00017fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000074  08008038  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  08008038  00020414  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000101f2  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000265f  00000000  00000000  000302d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  00032938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aef  00000000  00000000  00033778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027c4a  00000000  00000000  00034267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b45  00000000  00000000  0005beb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eba17  00000000  00000000  0006e9f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003eec  00000000  00000000  0015a410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0015e2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ca4 	.word	0x08007ca4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007ca4 	.word	0x08007ca4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 800057c:	b40f      	push	{r0, r1, r2, r3}
 800057e:	b580      	push	{r7, lr}
 8000580:	b082      	sub	sp, #8
 8000582:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	693a      	ldr	r2, [r7, #16]
 800058e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000592:	480b      	ldr	r0, [pc, #44]	; (80005c0 <myprintf+0x44>)
 8000594:	f006 fef4 	bl	8007380 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000598:	4809      	ldr	r0, [pc, #36]	; (80005c0 <myprintf+0x44>)
 800059a:	f7ff fe19 	bl	80001d0 <strlen>
 800059e:	4603      	mov	r3, r0
 80005a0:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 40);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	2328      	movs	r3, #40	; 0x28
 80005a8:	4905      	ldr	r1, [pc, #20]	; (80005c0 <myprintf+0x44>)
 80005aa:	4806      	ldr	r0, [pc, #24]	; (80005c4 <myprintf+0x48>)
 80005ac:	f003 f832 	bl	8003614 <HAL_UART_Transmit>

}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005ba:	b004      	add	sp, #16
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	2000017c 	.word	0x2000017c
 80005c4:	200000f4 	.word	0x200000f4

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	f5ad 6d94 	sub.w	sp, sp, #1184	; 0x4a0
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 fbb2 	bl	8000d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f90e 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 f9cc 	bl	8000974 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005dc:	f000 f99a 	bl	8000914 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80005e0:	f000 f95a 	bl	8000898 <MX_SPI2_Init>
  MX_FATFS_Init();
 80005e4:	f003 fd6e 	bl	80040c4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 80005e8:	4873      	ldr	r0, [pc, #460]	; (80007b8 <main+0x1f0>)
 80005ea:	f7ff ffc7 	bl	800057c <myprintf>

    HAL_Delay(1000); //a short delay is important to let the SD card settle
 80005ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f2:	f000 fc1d 	bl	8000e30 <HAL_Delay>
    FATFS FatFs; 	//Fatfs handle
    FIL fil; 		//File handle
    FRESULT fres; //Result after operations

    //Open the file system
    fres = f_mount(&FatFs, "", 1); //1=mount now
 80005f6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80005fa:	2201      	movs	r2, #1
 80005fc:	496f      	ldr	r1, [pc, #444]	; (80007bc <main+0x1f4>)
 80005fe:	4618      	mov	r0, r3
 8000600:	f005 ffe6 	bl	80065d0 <f_mount>
 8000604:	4603      	mov	r3, r0
 8000606:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if (fres != FR_OK) {
 800060a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800060e:	2b00      	cmp	r3, #0
 8000610:	d006      	beq.n	8000620 <main+0x58>
  	myprintf("f_mount error (%i)\r\n", fres);
 8000612:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000616:	4619      	mov	r1, r3
 8000618:	4869      	ldr	r0, [pc, #420]	; (80007c0 <main+0x1f8>)
 800061a:	f7ff ffaf 	bl	800057c <myprintf>
  	while(1);
 800061e:	e7fe      	b.n	800061e <main+0x56>
    //Let's get some statistics from the SD card
    DWORD free_clusters, free_sectors, total_sectors;

    FATFS* getFreeFs;

    fres = f_getfree("", &free_clusters, &getFreeFs);
 8000620:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000624:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000628:	4619      	mov	r1, r3
 800062a:	4864      	ldr	r0, [pc, #400]	; (80007bc <main+0x1f4>)
 800062c:	f006 fd30 	bl	8007090 <f_getfree>
 8000630:	4603      	mov	r3, r0
 8000632:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if (fres != FR_OK) {
 8000636:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800063a:	2b00      	cmp	r3, #0
 800063c:	d006      	beq.n	800064c <main+0x84>
  	myprintf("f_getfree error (%i)\r\n", fres);
 800063e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000642:	4619      	mov	r1, r3
 8000644:	485f      	ldr	r0, [pc, #380]	; (80007c4 <main+0x1fc>)
 8000646:	f7ff ff99 	bl	800057c <myprintf>
  	while(1);
 800064a:	e7fe      	b.n	800064a <main+0x82>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800064c:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000650:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	3b02      	subs	r3, #2
 800065a:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 800065e:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 8000662:	6812      	ldr	r2, [r2, #0]
 8000664:	8952      	ldrh	r2, [r2, #10]
 8000666:	fb02 f303 	mul.w	r3, r2, r3
 800066a:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
    free_sectors = free_clusters * getFreeFs->csize;
 800066e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000672:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	895b      	ldrh	r3, [r3, #10]
 800067a:	461a      	mov	r2, r3
 800067c:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000680:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	fb02 f303 	mul.w	r3, r2, r3
 800068a:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494

    myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 800068e:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8000692:	0859      	lsrs	r1, r3, #1
 8000694:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8000698:	085b      	lsrs	r3, r3, #1
 800069a:	461a      	mov	r2, r3
 800069c:	484a      	ldr	r0, [pc, #296]	; (80007c8 <main+0x200>)
 800069e:	f7ff ff6d 	bl	800057c <myprintf>

    //Now let's try to open file "test.txt"
    fres = f_open(&fil, "test.txt", FA_READ);
 80006a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006a6:	2201      	movs	r2, #1
 80006a8:	4948      	ldr	r1, [pc, #288]	; (80007cc <main+0x204>)
 80006aa:	4618      	mov	r0, r3
 80006ac:	f005 ffd6 	bl	800665c <f_open>
 80006b0:	4603      	mov	r3, r0
 80006b2:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if (fres != FR_OK) {
 80006b6:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d003      	beq.n	80006c6 <main+0xfe>
  	myprintf("f_open error (%i)\r\n");
 80006be:	4844      	ldr	r0, [pc, #272]	; (80007d0 <main+0x208>)
 80006c0:	f7ff ff5c 	bl	800057c <myprintf>
  	while(1);
 80006c4:	e7fe      	b.n	80006c4 <main+0xfc>
    }
    myprintf("I was able to open 'test.txt' for reading!\r\n");
 80006c6:	4843      	ldr	r0, [pc, #268]	; (80007d4 <main+0x20c>)
 80006c8:	f7ff ff58 	bl	800057c <myprintf>
    //Read 30 bytes from "test.txt" on the SD card
    BYTE readBuf[30];

    //We can either use f_read OR f_gets to get data out of files
    //f_gets is a wrapper on f_read that does some string formatting for us
    TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 80006cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	211e      	movs	r1, #30
 80006d6:	4618      	mov	r0, r3
 80006d8:	f006 fd8f 	bl	80071fa <f_gets>
 80006dc:	f8c7 0490 	str.w	r0, [r7, #1168]	; 0x490
    if(rres != 0) {
 80006e0:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d006      	beq.n	80006f6 <main+0x12e>
  	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	4619      	mov	r1, r3
 80006ee:	483a      	ldr	r0, [pc, #232]	; (80007d8 <main+0x210>)
 80006f0:	f7ff ff44 	bl	800057c <myprintf>
 80006f4:	e005      	b.n	8000702 <main+0x13a>
    } else {
  	myprintf("f_gets error (%i)\r\n", fres);
 80006f6:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80006fa:	4619      	mov	r1, r3
 80006fc:	4837      	ldr	r0, [pc, #220]	; (80007dc <main+0x214>)
 80006fe:	f7ff ff3d 	bl	800057c <myprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 8000702:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000706:	4618      	mov	r0, r3
 8000708:	f006 fc98 	bl	800703c <f_close>

    //Now let's try and write a file "write.txt"
    fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800070c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000710:	221a      	movs	r2, #26
 8000712:	4933      	ldr	r1, [pc, #204]	; (80007e0 <main+0x218>)
 8000714:	4618      	mov	r0, r3
 8000716:	f005 ffa1 	bl	800665c <f_open>
 800071a:	4603      	mov	r3, r0
 800071c:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if(fres == FR_OK) {
 8000720:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000724:	2b00      	cmp	r3, #0
 8000726:	d103      	bne.n	8000730 <main+0x168>
  	myprintf("I was able to open 'write.txt' for writing\r\n");
 8000728:	482e      	ldr	r0, [pc, #184]	; (80007e4 <main+0x21c>)
 800072a:	f7ff ff27 	bl	800057c <myprintf>
 800072e:	e005      	b.n	800073c <main+0x174>
    } else {
  	myprintf("f_open error (%i)\r\n", fres);
 8000730:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000734:	4619      	mov	r1, r3
 8000736:	4826      	ldr	r0, [pc, #152]	; (80007d0 <main+0x208>)
 8000738:	f7ff ff20 	bl	800057c <myprintf>
    }

    //Copy in a string
    strncpy((char*)readBuf, "a new file is made!", 19);
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	4a29      	ldr	r2, [pc, #164]	; (80007e8 <main+0x220>)
 8000742:	461c      	mov	r4, r3
 8000744:	4615      	mov	r5, r2
 8000746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800074a:	682b      	ldr	r3, [r5, #0]
 800074c:	461a      	mov	r2, r3
 800074e:	8022      	strh	r2, [r4, #0]
 8000750:	3402      	adds	r4, #2
 8000752:	0c1b      	lsrs	r3, r3, #16
 8000754:	7023      	strb	r3, [r4, #0]
    UINT bytesWrote;
    fres = f_write(&fil, readBuf, 19, &bytesWrote);
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	f107 0108 	add.w	r1, r7, #8
 800075c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000760:	2213      	movs	r2, #19
 8000762:	f006 fa78 	bl	8006c56 <f_write>
 8000766:	4603      	mov	r3, r0
 8000768:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if(fres == FR_OK) {
 800076c:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000770:	2b00      	cmp	r3, #0
 8000772:	d109      	bne.n	8000788 <main+0x1c0>
  	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8000774:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000778:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4619      	mov	r1, r3
 8000780:	481a      	ldr	r0, [pc, #104]	; (80007ec <main+0x224>)
 8000782:	f7ff fefb 	bl	800057c <myprintf>
 8000786:	e002      	b.n	800078e <main+0x1c6>
    } else {
  	myprintf("f_write error (%i)\r\n");
 8000788:	4819      	ldr	r0, [pc, #100]	; (80007f0 <main+0x228>)
 800078a:	f7ff fef7 	bl	800057c <myprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 800078e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000792:	4618      	mov	r0, r3
 8000794:	f006 fc52 	bl	800703c <f_close>

    //We're done, so de-mount the drive
    f_mount(NULL, "", 0);
 8000798:	2200      	movs	r2, #0
 800079a:	4908      	ldr	r1, [pc, #32]	; (80007bc <main+0x1f4>)
 800079c:	2000      	movs	r0, #0
 800079e:	f005 ff17 	bl	80065d0 <f_mount>
    {
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
        //Blink the LED every second
  	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007a2:	2120      	movs	r1, #32
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a8:	f000 fe0e 	bl	80013c8 <HAL_GPIO_TogglePin>
  	  HAL_Delay(1000);
 80007ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b0:	f000 fb3e 	bl	8000e30 <HAL_Delay>
  	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007b4:	e7f5      	b.n	80007a2 <main+0x1da>
 80007b6:	bf00      	nop
 80007b8:	08007cbc 	.word	0x08007cbc
 80007bc:	08007cdc 	.word	0x08007cdc
 80007c0:	08007ce0 	.word	0x08007ce0
 80007c4:	08007cf8 	.word	0x08007cf8
 80007c8:	08007d10 	.word	0x08007d10
 80007cc:	08007d58 	.word	0x08007d58
 80007d0:	08007d64 	.word	0x08007d64
 80007d4:	08007d78 	.word	0x08007d78
 80007d8:	08007da8 	.word	0x08007da8
 80007dc:	08007dd4 	.word	0x08007dd4
 80007e0:	08007de8 	.word	0x08007de8
 80007e4:	08007df4 	.word	0x08007df4
 80007e8:	08007e24 	.word	0x08007e24
 80007ec:	08007e38 	.word	0x08007e38
 80007f0:	08007e5c 	.word	0x08007e5c

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b096      	sub	sp, #88	; 0x58
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2244      	movs	r2, #68	; 0x44
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f006 fdca 	bl	800739c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	463b      	mov	r3, r7
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000816:	f44f 7000 	mov.w	r0, #512	; 0x200
 800081a:	f000 fdfd 	bl	8001418 <HAL_PWREx_ControlVoltageScaling>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000824:	f000 f922 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000828:	2302      	movs	r3, #2
 800082a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000830:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000832:	2310      	movs	r3, #16
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800083a:	2302      	movs	r3, #2
 800083c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800083e:	2301      	movs	r3, #1
 8000840:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000842:	230a      	movs	r3, #10
 8000844:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000846:	2307      	movs	r3, #7
 8000848:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800084a:	2302      	movs	r3, #2
 800084c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800084e:	2302      	movs	r3, #2
 8000850:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4618      	mov	r0, r3
 8000858:	f000 fe34 	bl	80014c4 <HAL_RCC_OscConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000862:	f000 f903 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000866:	230f      	movs	r3, #15
 8000868:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086a:	2303      	movs	r3, #3
 800086c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800087a:	463b      	mov	r3, r7
 800087c:	2104      	movs	r1, #4
 800087e:	4618      	mov	r0, r3
 8000880:	f001 f9fc 	bl	8001c7c <HAL_RCC_ClockConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800088a:	f000 f8ef 	bl	8000a6c <Error_Handler>
  }
}
 800088e:	bf00      	nop
 8000890:	3758      	adds	r7, #88	; 0x58
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <MX_SPI2_Init+0x74>)
 800089e:	4a1c      	ldr	r2, [pc, #112]	; (8000910 <MX_SPI2_Init+0x78>)
 80008a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_SPI2_Init+0x74>)
 80008a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_SPI2_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_SPI2_Init+0x74>)
 80008b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008b6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_SPI2_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_SPI2_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_SPI2_Init+0x74>)
 80008c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_SPI2_Init+0x74>)
 80008ce:	2230      	movs	r2, #48	; 0x30
 80008d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_SPI2_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_SPI2_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_SPI2_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_SPI2_Init+0x74>)
 80008e6:	2207      	movs	r2, #7
 80008e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_SPI2_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_SPI2_Init+0x74>)
 80008f2:	2208      	movs	r2, #8
 80008f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_SPI2_Init+0x74>)
 80008f8:	f002 f8a0 	bl	8002a3c <HAL_SPI_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000902:	f000 f8b3 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000090 	.word	0x20000090
 8000910:	40003800 	.word	0x40003800

08000914 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_USART2_UART_Init+0x58>)
 800091a:	4a15      	ldr	r2, [pc, #84]	; (8000970 <MX_USART2_UART_Init+0x5c>)
 800091c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000924:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_USART2_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USART2_UART_Init+0x58>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USART2_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000958:	f002 fe0e 	bl	8003578 <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000962:	f000 f883 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000f4 	.word	0x200000f4
 8000970:	40004400 	.word	0x40004400

08000974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	4b35      	ldr	r3, [pc, #212]	; (8000a60 <MX_GPIO_Init+0xec>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	4a34      	ldr	r2, [pc, #208]	; (8000a60 <MX_GPIO_Init+0xec>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000996:	4b32      	ldr	r3, [pc, #200]	; (8000a60 <MX_GPIO_Init+0xec>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a2:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <MX_GPIO_Init+0xec>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	4a2e      	ldr	r2, [pc, #184]	; (8000a60 <MX_GPIO_Init+0xec>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ae:	4b2c      	ldr	r3, [pc, #176]	; (8000a60 <MX_GPIO_Init+0xec>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b29      	ldr	r3, [pc, #164]	; (8000a60 <MX_GPIO_Init+0xec>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4a28      	ldr	r2, [pc, #160]	; (8000a60 <MX_GPIO_Init+0xec>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <MX_GPIO_Init+0xec>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <MX_GPIO_Init+0xec>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a22      	ldr	r2, [pc, #136]	; (8000a60 <MX_GPIO_Init+0xec>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <MX_GPIO_Init+0xec>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2120      	movs	r1, #32
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f2:	f000 fcd1 	bl	8001398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2102      	movs	r1, #2
 80009fa:	481a      	ldr	r0, [pc, #104]	; (8000a64 <MX_GPIO_Init+0xf0>)
 80009fc:	f000 fccc 	bl	8001398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a06:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4814      	ldr	r0, [pc, #80]	; (8000a68 <MX_GPIO_Init+0xf4>)
 8000a18:	f000 fb14 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a1c:	2320      	movs	r3, #32
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a36:	f000 fb05 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_GPIO_Init+0xf0>)
 8000a52:	f000 faf7 	bl	8001044 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a56:	bf00      	nop
 8000a58:	3728      	adds	r7, #40	; 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000
 8000a64:	48000400 	.word	0x48000400
 8000a68:	48000800 	.word	0x48000800

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>
	...

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <HAL_MspInit+0x44>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a82:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <HAL_MspInit+0x44>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6613      	str	r3, [r2, #96]	; 0x60
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_MspInit+0x44>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <HAL_MspInit+0x44>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <HAL_MspInit+0x44>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_MspInit+0x44>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000

08000ac0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <HAL_SPI_MspInit+0x7c>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d128      	bne.n	8000b34 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <HAL_SPI_MspInit+0x80>)
 8000ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae6:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <HAL_SPI_MspInit+0x80>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aec:	6593      	str	r3, [r2, #88]	; 0x58
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_SPI_MspInit+0x80>)
 8000af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <HAL_SPI_MspInit+0x80>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <HAL_SPI_MspInit+0x80>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_SPI_MspInit+0x80>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b12:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b24:	2305      	movs	r3, #5
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <HAL_SPI_MspInit+0x84>)
 8000b30:	f000 fa88 	bl	8001044 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40003800 	.word	0x40003800
 8000b40:	40021000 	.word	0x40021000
 8000b44:	48000400 	.word	0x48000400

08000b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b0ac      	sub	sp, #176	; 0xb0
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2288      	movs	r2, #136	; 0x88
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f006 fc17 	bl	800739c <memset>
  if(huart->Instance==USART2)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a21      	ldr	r2, [pc, #132]	; (8000bf8 <HAL_UART_MspInit+0xb0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d13b      	bne.n	8000bf0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4618      	mov	r0, r3
 8000b86:	f001 fa9d 	bl	80020c4 <HAL_RCCEx_PeriphCLKConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b90:	f7ff ff6c 	bl	8000a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b94:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <HAL_UART_MspInit+0xb4>)
 8000b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b98:	4a18      	ldr	r2, [pc, #96]	; (8000bfc <HAL_UART_MspInit+0xb4>)
 8000b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba0:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <HAL_UART_MspInit+0xb4>)
 8000ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <HAL_UART_MspInit+0xb4>)
 8000bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb0:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <HAL_UART_MspInit+0xb4>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_UART_MspInit+0xb4>)
 8000bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bc4:	230c      	movs	r3, #12
 8000bc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bdc:	2307      	movs	r3, #7
 8000bde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000be6:	4619      	mov	r1, r3
 8000be8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bec:	f000 fa2a 	bl	8001044 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bf0:	bf00      	nop
 8000bf2:	37b0      	adds	r7, #176	; 0xb0
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40004400 	.word	0x40004400
 8000bfc:	40021000 	.word	0x40021000

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <NMI_Handler+0x4>

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <MemManage_Handler+0x4>

08000c12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4c:	f000 f8d0 	bl	8000df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f006 fb92 	bl	80073ac <__errno>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20018000 	.word	0x20018000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	2000027c 	.word	0x2000027c
 8000cbc:	20000418 	.word	0x20000418

08000cc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ce8:	f7ff ffea 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cec:	480c      	ldr	r0, [pc, #48]	; (8000d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cee:	490d      	ldr	r1, [pc, #52]	; (8000d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <LoopForever+0xe>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d04:	4c0a      	ldr	r4, [pc, #40]	; (8000d30 <LoopForever+0x16>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d12:	f006 fb51 	bl	80073b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d16:	f7ff fc57 	bl	80005c8 <main>

08000d1a <LoopForever>:

LoopForever:
    b LoopForever
 8000d1a:	e7fe      	b.n	8000d1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d28:	08007fc4 	.word	0x08007fc4
  ldr r2, =_sbss
 8000d2c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d30:	20000414 	.word	0x20000414

08000d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC1_2_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <HAL_Init+0x3c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <HAL_Init+0x3c>)
 8000d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4e:	2003      	movs	r0, #3
 8000d50:	f000 f944 	bl	8000fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d54:	2000      	movs	r0, #0
 8000d56:	f000 f80f 	bl	8000d78 <HAL_InitTick>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d002      	beq.n	8000d66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	e001      	b.n	8000d6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d66:	f7ff fe87 	bl	8000a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40022000 	.word	0x40022000

08000d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <HAL_InitTick+0x6c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d023      	beq.n	8000dd4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d8c:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <HAL_InitTick+0x70>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <HAL_InitTick+0x6c>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f941 	bl	800102a <HAL_SYSTICK_Config>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10f      	bne.n	8000dce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b0f      	cmp	r3, #15
 8000db2:	d809      	bhi.n	8000dc8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db4:	2200      	movs	r2, #0
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dbc:	f000 f919 	bl	8000ff2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_InitTick+0x74>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	e007      	b.n	8000dd8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	73fb      	strb	r3, [r7, #15]
 8000dcc:	e004      	b.n	8000dd8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	73fb      	strb	r3, [r7, #15]
 8000dd2:	e001      	b.n	8000dd8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000000 	.word	0x20000000
 8000dec:	20000004 	.word	0x20000004

08000df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x20>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x24>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_IncTick+0x24>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000280 	.word	0x20000280

08000e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000280 	.word	0x20000280

08000e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e38:	f7ff ffee 	bl	8000e18 <HAL_GetTick>
 8000e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e48:	d005      	beq.n	8000e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_Delay+0x44>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e56:	bf00      	nop
 8000e58:	f7ff ffde 	bl	8000e18 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d8f7      	bhi.n	8000e58 <HAL_Delay+0x28>
  {
  }
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db0a      	blt.n	8000f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	490c      	ldr	r1, [pc, #48]	; (8000f28 <__NVIC_SetPriority+0x4c>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	440b      	add	r3, r1
 8000f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f04:	e00a      	b.n	8000f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4908      	ldr	r1, [pc, #32]	; (8000f2c <__NVIC_SetPriority+0x50>)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	3b04      	subs	r3, #4
 8000f14:	0112      	lsls	r2, r2, #4
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	440b      	add	r3, r1
 8000f1a:	761a      	strb	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f1c3 0307 	rsb	r3, r3, #7
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	bf28      	it	cs
 8000f4e:	2304      	movcs	r3, #4
 8000f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3304      	adds	r3, #4
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d902      	bls.n	8000f60 <NVIC_EncodePriority+0x30>
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	e000      	b.n	8000f62 <NVIC_EncodePriority+0x32>
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	43d9      	mvns	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	4313      	orrs	r3, r2
         );
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3724      	adds	r7, #36	; 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa8:	d301      	bcc.n	8000fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00f      	b.n	8000fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <SysTick_Config+0x40>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb6:	210f      	movs	r1, #15
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fbc:	f7ff ff8e 	bl	8000edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc8:	2207      	movs	r2, #7
 8000fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	e000e010 	.word	0xe000e010

08000fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ff47 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001004:	f7ff ff5c 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 8001008:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68b9      	ldr	r1, [r7, #8]
 800100e:	6978      	ldr	r0, [r7, #20]
 8001010:	f7ff ff8e 	bl	8000f30 <NVIC_EncodePriority>
 8001014:	4602      	mov	r2, r0
 8001016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff5d 	bl	8000edc <__NVIC_SetPriority>
}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffb0 	bl	8000f98 <SysTick_Config>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001052:	e17f      	b.n	8001354 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	2101      	movs	r1, #1
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	fa01 f303 	lsl.w	r3, r1, r3
 8001060:	4013      	ands	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 8171 	beq.w	800134e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b01      	cmp	r3, #1
 8001076:	d005      	beq.n	8001084 <HAL_GPIO_Init+0x40>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d130      	bne.n	80010e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ba:	2201      	movs	r2, #1
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	091b      	lsrs	r3, r3, #4
 80010d0:	f003 0201 	and.w	r2, r3, #1
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d118      	bne.n	8001124 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010f8:	2201      	movs	r2, #1
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	08db      	lsrs	r3, r3, #3
 800110e:	f003 0201 	and.w	r2, r3, #1
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	2b03      	cmp	r3, #3
 800112e:	d017      	beq.n	8001160 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d123      	bne.n	80011b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	08da      	lsrs	r2, r3, #3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3208      	adds	r2, #8
 8001174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	08da      	lsrs	r2, r3, #3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3208      	adds	r2, #8
 80011ae:	6939      	ldr	r1, [r7, #16]
 80011b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0203 	and.w	r2, r3, #3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 80ac 	beq.w	800134e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	4b5f      	ldr	r3, [pc, #380]	; (8001374 <HAL_GPIO_Init+0x330>)
 80011f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fa:	4a5e      	ldr	r2, [pc, #376]	; (8001374 <HAL_GPIO_Init+0x330>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6613      	str	r3, [r2, #96]	; 0x60
 8001202:	4b5c      	ldr	r3, [pc, #368]	; (8001374 <HAL_GPIO_Init+0x330>)
 8001204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800120e:	4a5a      	ldr	r2, [pc, #360]	; (8001378 <HAL_GPIO_Init+0x334>)
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	3302      	adds	r3, #2
 8001216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	220f      	movs	r2, #15
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001238:	d025      	beq.n	8001286 <HAL_GPIO_Init+0x242>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4f      	ldr	r2, [pc, #316]	; (800137c <HAL_GPIO_Init+0x338>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d01f      	beq.n	8001282 <HAL_GPIO_Init+0x23e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4e      	ldr	r2, [pc, #312]	; (8001380 <HAL_GPIO_Init+0x33c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d019      	beq.n	800127e <HAL_GPIO_Init+0x23a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4d      	ldr	r2, [pc, #308]	; (8001384 <HAL_GPIO_Init+0x340>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0x236>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4c      	ldr	r2, [pc, #304]	; (8001388 <HAL_GPIO_Init+0x344>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d00d      	beq.n	8001276 <HAL_GPIO_Init+0x232>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4b      	ldr	r2, [pc, #300]	; (800138c <HAL_GPIO_Init+0x348>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d007      	beq.n	8001272 <HAL_GPIO_Init+0x22e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4a      	ldr	r2, [pc, #296]	; (8001390 <HAL_GPIO_Init+0x34c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_GPIO_Init+0x22a>
 800126a:	2306      	movs	r3, #6
 800126c:	e00c      	b.n	8001288 <HAL_GPIO_Init+0x244>
 800126e:	2307      	movs	r3, #7
 8001270:	e00a      	b.n	8001288 <HAL_GPIO_Init+0x244>
 8001272:	2305      	movs	r3, #5
 8001274:	e008      	b.n	8001288 <HAL_GPIO_Init+0x244>
 8001276:	2304      	movs	r3, #4
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x244>
 800127a:	2303      	movs	r3, #3
 800127c:	e004      	b.n	8001288 <HAL_GPIO_Init+0x244>
 800127e:	2302      	movs	r3, #2
 8001280:	e002      	b.n	8001288 <HAL_GPIO_Init+0x244>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x244>
 8001286:	2300      	movs	r3, #0
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	f002 0203 	and.w	r2, r2, #3
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	4093      	lsls	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001298:	4937      	ldr	r1, [pc, #220]	; (8001378 <HAL_GPIO_Init+0x334>)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012a6:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <HAL_GPIO_Init+0x350>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ca:	4a32      	ldr	r2, [pc, #200]	; (8001394 <HAL_GPIO_Init+0x350>)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012d0:	4b30      	ldr	r3, [pc, #192]	; (8001394 <HAL_GPIO_Init+0x350>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012f4:	4a27      	ldr	r2, [pc, #156]	; (8001394 <HAL_GPIO_Init+0x350>)
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <HAL_GPIO_Init+0x350>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800131e:	4a1d      	ldr	r2, [pc, #116]	; (8001394 <HAL_GPIO_Init+0x350>)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <HAL_GPIO_Init+0x350>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001348:	4a12      	ldr	r2, [pc, #72]	; (8001394 <HAL_GPIO_Init+0x350>)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3301      	adds	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa22 f303 	lsr.w	r3, r2, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	f47f ae78 	bne.w	8001054 <HAL_GPIO_Init+0x10>
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	371c      	adds	r7, #28
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000
 8001378:	40010000 	.word	0x40010000
 800137c:	48000400 	.word	0x48000400
 8001380:	48000800 	.word	0x48000800
 8001384:	48000c00 	.word	0x48000c00
 8001388:	48001000 	.word	0x48001000
 800138c:	48001400 	.word	0x48001400
 8001390:	48001800 	.word	0x48001800
 8001394:	40010400 	.word	0x40010400

08001398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
 80013a4:	4613      	mov	r3, r2
 80013a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a8:	787b      	ldrb	r3, [r7, #1]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013b4:	e002      	b.n	80013bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4013      	ands	r3, r2
 80013e0:	041a      	lsls	r2, r3, #16
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43d9      	mvns	r1, r3
 80013e6:	887b      	ldrh	r3, [r7, #2]
 80013e8:	400b      	ands	r3, r1
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	619a      	str	r2, [r3, #24]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <HAL_PWREx_GetVoltageRange+0x18>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40007000 	.word	0x40007000

08001418 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001426:	d130      	bne.n	800148a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001434:	d038      	beq.n	80014a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800143e:	4a1e      	ldr	r2, [pc, #120]	; (80014b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001440:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001444:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2232      	movs	r2, #50	; 0x32
 800144c:	fb02 f303 	mul.w	r3, r2, r3
 8001450:	4a1b      	ldr	r2, [pc, #108]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	0c9b      	lsrs	r3, r3, #18
 8001458:	3301      	adds	r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800145c:	e002      	b.n	8001464 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3b01      	subs	r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800146c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001470:	d102      	bne.n	8001478 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f2      	bne.n	800145e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001484:	d110      	bne.n	80014a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e00f      	b.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001496:	d007      	beq.n	80014a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014a0:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40007000 	.word	0x40007000
 80014bc:	20000000 	.word	0x20000000
 80014c0:	431bde83 	.word	0x431bde83

080014c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e3ca      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014d6:	4b97      	ldr	r3, [pc, #604]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
 80014de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014e0:	4b94      	ldr	r3, [pc, #592]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0310 	and.w	r3, r3, #16
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 80e4 	beq.w	80016c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d007      	beq.n	800150e <HAL_RCC_OscConfig+0x4a>
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	2b0c      	cmp	r3, #12
 8001502:	f040 808b 	bne.w	800161c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2b01      	cmp	r3, #1
 800150a:	f040 8087 	bne.w	800161c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800150e:	4b89      	ldr	r3, [pc, #548]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <HAL_RCC_OscConfig+0x62>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e3a2      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1a      	ldr	r2, [r3, #32]
 800152a:	4b82      	ldr	r3, [pc, #520]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d004      	beq.n	8001540 <HAL_RCC_OscConfig+0x7c>
 8001536:	4b7f      	ldr	r3, [pc, #508]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800153e:	e005      	b.n	800154c <HAL_RCC_OscConfig+0x88>
 8001540:	4b7c      	ldr	r3, [pc, #496]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 8001542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800154c:	4293      	cmp	r3, r2
 800154e:	d223      	bcs.n	8001598 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	4618      	mov	r0, r3
 8001556:	f000 fd55 	bl	8002004 <RCC_SetFlashLatencyFromMSIRange>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e383      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001564:	4b73      	ldr	r3, [pc, #460]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a72      	ldr	r2, [pc, #456]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 800156a:	f043 0308 	orr.w	r3, r3, #8
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b70      	ldr	r3, [pc, #448]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	496d      	ldr	r1, [pc, #436]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001582:	4b6c      	ldr	r3, [pc, #432]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	4968      	ldr	r1, [pc, #416]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 8001592:	4313      	orrs	r3, r2
 8001594:	604b      	str	r3, [r1, #4]
 8001596:	e025      	b.n	80015e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001598:	4b66      	ldr	r3, [pc, #408]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a65      	ldr	r2, [pc, #404]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b63      	ldr	r3, [pc, #396]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	4960      	ldr	r1, [pc, #384]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b6:	4b5f      	ldr	r3, [pc, #380]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	495b      	ldr	r1, [pc, #364]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d109      	bne.n	80015e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 fd15 	bl	8002004 <RCC_SetFlashLatencyFromMSIRange>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e343      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015e4:	f000 fc4a 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 80015e8:	4602      	mov	r2, r0
 80015ea:	4b52      	ldr	r3, [pc, #328]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	091b      	lsrs	r3, r3, #4
 80015f0:	f003 030f 	and.w	r3, r3, #15
 80015f4:	4950      	ldr	r1, [pc, #320]	; (8001738 <HAL_RCC_OscConfig+0x274>)
 80015f6:	5ccb      	ldrb	r3, [r1, r3]
 80015f8:	f003 031f 	and.w	r3, r3, #31
 80015fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001600:	4a4e      	ldr	r2, [pc, #312]	; (800173c <HAL_RCC_OscConfig+0x278>)
 8001602:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001604:	4b4e      	ldr	r3, [pc, #312]	; (8001740 <HAL_RCC_OscConfig+0x27c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fbb5 	bl	8000d78 <HAL_InitTick>
 800160e:	4603      	mov	r3, r0
 8001610:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d052      	beq.n	80016be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	e327      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d032      	beq.n	800168a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001624:	4b43      	ldr	r3, [pc, #268]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a42      	ldr	r2, [pc, #264]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001630:	f7ff fbf2 	bl	8000e18 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001638:	f7ff fbee 	bl	8000e18 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e310      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800164a:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001656:	4b37      	ldr	r3, [pc, #220]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a36      	ldr	r2, [pc, #216]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 800165c:	f043 0308 	orr.w	r3, r3, #8
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	4b34      	ldr	r3, [pc, #208]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	4931      	ldr	r1, [pc, #196]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 8001670:	4313      	orrs	r3, r2
 8001672:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001674:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	021b      	lsls	r3, r3, #8
 8001682:	492c      	ldr	r1, [pc, #176]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 8001684:	4313      	orrs	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
 8001688:	e01a      	b.n	80016c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800168a:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a29      	ldr	r2, [pc, #164]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001696:	f7ff fbbf 	bl	8000e18 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800169e:	f7ff fbbb 	bl	8000e18 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e2dd      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016b0:	4b20      	ldr	r3, [pc, #128]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f0      	bne.n	800169e <HAL_RCC_OscConfig+0x1da>
 80016bc:	e000      	b.n	80016c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d074      	beq.n	80017b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	d005      	beq.n	80016de <HAL_RCC_OscConfig+0x21a>
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2b0c      	cmp	r3, #12
 80016d6:	d10e      	bne.n	80016f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d10b      	bne.n	80016f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d064      	beq.n	80017b4 <HAL_RCC_OscConfig+0x2f0>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d160      	bne.n	80017b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e2ba      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x24a>
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 8001706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	e026      	b.n	800175c <HAL_RCC_OscConfig+0x298>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001716:	d115      	bne.n	8001744 <HAL_RCC_OscConfig+0x280>
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a05      	ldr	r2, [pc, #20]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 800171e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a02      	ldr	r2, [pc, #8]	; (8001734 <HAL_RCC_OscConfig+0x270>)
 800172a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	e014      	b.n	800175c <HAL_RCC_OscConfig+0x298>
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000
 8001738:	08007eb8 	.word	0x08007eb8
 800173c:	20000000 	.word	0x20000000
 8001740:	20000004 	.word	0x20000004
 8001744:	4ba0      	ldr	r3, [pc, #640]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a9f      	ldr	r2, [pc, #636]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 800174a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b9d      	ldr	r3, [pc, #628]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a9c      	ldr	r2, [pc, #624]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800175a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d013      	beq.n	800178c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff fb58 	bl	8000e18 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff fb54 	bl	8000e18 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	; 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e276      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800177e:	4b92      	ldr	r3, [pc, #584]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x2a8>
 800178a:	e014      	b.n	80017b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff fb44 	bl	8000e18 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001794:	f7ff fb40 	bl	8000e18 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b64      	cmp	r3, #100	; 0x64
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e262      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017a6:	4b88      	ldr	r3, [pc, #544]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x2d0>
 80017b2:	e000      	b.n	80017b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d060      	beq.n	8001884 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_OscConfig+0x310>
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	d119      	bne.n	8001802 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d116      	bne.n	8001802 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d4:	4b7c      	ldr	r3, [pc, #496]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_OscConfig+0x328>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e23f      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ec:	4b76      	ldr	r3, [pc, #472]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	061b      	lsls	r3, r3, #24
 80017fa:	4973      	ldr	r1, [pc, #460]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001800:	e040      	b.n	8001884 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d023      	beq.n	8001852 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800180a:	4b6f      	ldr	r3, [pc, #444]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a6e      	ldr	r2, [pc, #440]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001816:	f7ff faff 	bl	8000e18 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800181e:	f7ff fafb 	bl	8000e18 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e21d      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001830:	4b65      	ldr	r3, [pc, #404]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183c:	4b62      	ldr	r3, [pc, #392]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	061b      	lsls	r3, r3, #24
 800184a:	495f      	ldr	r1, [pc, #380]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]
 8001850:	e018      	b.n	8001884 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001852:	4b5d      	ldr	r3, [pc, #372]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a5c      	ldr	r2, [pc, #368]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800185c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185e:	f7ff fadb 	bl	8000e18 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001866:	f7ff fad7 	bl	8000e18 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e1f9      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001878:	4b53      	ldr	r3, [pc, #332]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1f0      	bne.n	8001866 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	2b00      	cmp	r3, #0
 800188e:	d03c      	beq.n	800190a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d01c      	beq.n	80018d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001898:	4b4b      	ldr	r3, [pc, #300]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 800189a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800189e:	4a4a      	ldr	r2, [pc, #296]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a8:	f7ff fab6 	bl	8000e18 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b0:	f7ff fab2 	bl	8000e18 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e1d4      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018c2:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 80018c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0ef      	beq.n	80018b0 <HAL_RCC_OscConfig+0x3ec>
 80018d0:	e01b      	b.n	800190a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018d2:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 80018d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d8:	4a3b      	ldr	r2, [pc, #236]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 80018da:	f023 0301 	bic.w	r3, r3, #1
 80018de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e2:	f7ff fa99 	bl	8000e18 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ea:	f7ff fa95 	bl	8000e18 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e1b7      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018fc:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 80018fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1ef      	bne.n	80018ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80a6 	beq.w	8001a64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800191c:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 800191e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10d      	bne.n	8001944 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001928:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 800192a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192c:	4a26      	ldr	r2, [pc, #152]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 800192e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001932:	6593      	str	r3, [r2, #88]	; 0x58
 8001934:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001940:	2301      	movs	r3, #1
 8001942:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001944:	4b21      	ldr	r3, [pc, #132]	; (80019cc <HAL_RCC_OscConfig+0x508>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194c:	2b00      	cmp	r3, #0
 800194e:	d118      	bne.n	8001982 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001950:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <HAL_RCC_OscConfig+0x508>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a1d      	ldr	r2, [pc, #116]	; (80019cc <HAL_RCC_OscConfig+0x508>)
 8001956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195c:	f7ff fa5c 	bl	8000e18 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001964:	f7ff fa58 	bl	8000e18 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e17a      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <HAL_RCC_OscConfig+0x508>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d108      	bne.n	800199c <HAL_RCC_OscConfig+0x4d8>
 800198a:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 800198c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001990:	4a0d      	ldr	r2, [pc, #52]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800199a:	e029      	b.n	80019f0 <HAL_RCC_OscConfig+0x52c>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d115      	bne.n	80019d0 <HAL_RCC_OscConfig+0x50c>
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 80019a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019aa:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ba:	4a03      	ldr	r2, [pc, #12]	; (80019c8 <HAL_RCC_OscConfig+0x504>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019c4:	e014      	b.n	80019f0 <HAL_RCC_OscConfig+0x52c>
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40007000 	.word	0x40007000
 80019d0:	4b9c      	ldr	r3, [pc, #624]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d6:	4a9b      	ldr	r2, [pc, #620]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019e0:	4b98      	ldr	r3, [pc, #608]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 80019e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e6:	4a97      	ldr	r2, [pc, #604]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 80019e8:	f023 0304 	bic.w	r3, r3, #4
 80019ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d016      	beq.n	8001a26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f8:	f7ff fa0e 	bl	8000e18 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a00:	f7ff fa0a 	bl	8000e18 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e12a      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a16:	4b8b      	ldr	r3, [pc, #556]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0ed      	beq.n	8001a00 <HAL_RCC_OscConfig+0x53c>
 8001a24:	e015      	b.n	8001a52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a26:	f7ff f9f7 	bl	8000e18 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7ff f9f3 	bl	8000e18 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e113      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a44:	4b7f      	ldr	r3, [pc, #508]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1ed      	bne.n	8001a2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a52:	7ffb      	ldrb	r3, [r7, #31]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d105      	bne.n	8001a64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a58:	4b7a      	ldr	r3, [pc, #488]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5c:	4a79      	ldr	r2, [pc, #484]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a62:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80fe 	beq.w	8001c6a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	f040 80d0 	bne.w	8001c18 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a78:	4b72      	ldr	r3, [pc, #456]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f003 0203 	and.w	r2, r3, #3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d130      	bne.n	8001aee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	3b01      	subs	r3, #1
 8001a98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d127      	bne.n	8001aee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d11f      	bne.n	8001aee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ab8:	2a07      	cmp	r2, #7
 8001aba:	bf14      	ite	ne
 8001abc:	2201      	movne	r2, #1
 8001abe:	2200      	moveq	r2, #0
 8001ac0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d113      	bne.n	8001aee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad0:	085b      	lsrs	r3, r3, #1
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d109      	bne.n	8001aee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	085b      	lsrs	r3, r3, #1
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d06e      	beq.n	8001bcc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	2b0c      	cmp	r3, #12
 8001af2:	d069      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001af4:	4b53      	ldr	r3, [pc, #332]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d105      	bne.n	8001b0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b00:	4b50      	ldr	r3, [pc, #320]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0ad      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b10:	4b4c      	ldr	r3, [pc, #304]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a4b      	ldr	r2, [pc, #300]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001b16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b1c:	f7ff f97c 	bl	8000e18 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff f978 	bl	8000e18 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e09a      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b36:	4b43      	ldr	r3, [pc, #268]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b42:	4b40      	ldr	r3, [pc, #256]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	4b40      	ldr	r3, [pc, #256]	; (8001c48 <HAL_RCC_OscConfig+0x784>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b52:	3a01      	subs	r2, #1
 8001b54:	0112      	lsls	r2, r2, #4
 8001b56:	4311      	orrs	r1, r2
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b5c:	0212      	lsls	r2, r2, #8
 8001b5e:	4311      	orrs	r1, r2
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b64:	0852      	lsrs	r2, r2, #1
 8001b66:	3a01      	subs	r2, #1
 8001b68:	0552      	lsls	r2, r2, #21
 8001b6a:	4311      	orrs	r1, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b70:	0852      	lsrs	r2, r2, #1
 8001b72:	3a01      	subs	r2, #1
 8001b74:	0652      	lsls	r2, r2, #25
 8001b76:	4311      	orrs	r1, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b7c:	0912      	lsrs	r2, r2, #4
 8001b7e:	0452      	lsls	r2, r2, #17
 8001b80:	430a      	orrs	r2, r1
 8001b82:	4930      	ldr	r1, [pc, #192]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b88:	4b2e      	ldr	r3, [pc, #184]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a2d      	ldr	r2, [pc, #180]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b94:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4a2a      	ldr	r2, [pc, #168]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ba0:	f7ff f93a 	bl	8000e18 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7ff f936 	bl	8000e18 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e058      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bc6:	e050      	b.n	8001c6a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e04f      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d148      	bne.n	8001c6a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a19      	ldr	r2, [pc, #100]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001be2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	4a16      	ldr	r2, [pc, #88]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bf0:	f7ff f912 	bl	8000e18 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf8:	f7ff f90e 	bl	8000e18 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e030      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x734>
 8001c16:	e028      	b.n	8001c6a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2b0c      	cmp	r3, #12
 8001c1c:	d023      	beq.n	8001c66 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a08      	ldr	r2, [pc, #32]	; (8001c44 <HAL_RCC_OscConfig+0x780>)
 8001c24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2a:	f7ff f8f5 	bl	8000e18 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c30:	e00c      	b.n	8001c4c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c32:	f7ff f8f1 	bl	8000e18 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d905      	bls.n	8001c4c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e013      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
 8001c44:	40021000 	.word	0x40021000
 8001c48:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_RCC_OscConfig+0x7b0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1ec      	bne.n	8001c32 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_RCC_OscConfig+0x7b0>)
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	4905      	ldr	r1, [pc, #20]	; (8001c74 <HAL_RCC_OscConfig+0x7b0>)
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_RCC_OscConfig+0x7b4>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	60cb      	str	r3, [r1, #12]
 8001c64:	e001      	b.n	8001c6a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3720      	adds	r7, #32
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40021000 	.word	0x40021000
 8001c78:	feeefffc 	.word	0xfeeefffc

08001c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0e7      	b.n	8001e60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c90:	4b75      	ldr	r3, [pc, #468]	; (8001e68 <HAL_RCC_ClockConfig+0x1ec>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d910      	bls.n	8001cc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9e:	4b72      	ldr	r3, [pc, #456]	; (8001e68 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f023 0207 	bic.w	r2, r3, #7
 8001ca6:	4970      	ldr	r1, [pc, #448]	; (8001e68 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cae:	4b6e      	ldr	r3, [pc, #440]	; (8001e68 <HAL_RCC_ClockConfig+0x1ec>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0cf      	b.n	8001e60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d010      	beq.n	8001cee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	4b66      	ldr	r3, [pc, #408]	; (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d908      	bls.n	8001cee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cdc:	4b63      	ldr	r3, [pc, #396]	; (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4960      	ldr	r1, [pc, #384]	; (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d04c      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d107      	bne.n	8001d12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d02:	4b5a      	ldr	r3, [pc, #360]	; (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d121      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e0a6      	b.n	8001e60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d107      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1a:	4b54      	ldr	r3, [pc, #336]	; (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d115      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e09a      	b.n	8001e60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d107      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d32:	4b4e      	ldr	r3, [pc, #312]	; (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e08e      	b.n	8001e60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d42:	4b4a      	ldr	r3, [pc, #296]	; (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e086      	b.n	8001e60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d52:	4b46      	ldr	r3, [pc, #280]	; (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f023 0203 	bic.w	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	4943      	ldr	r1, [pc, #268]	; (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d64:	f7ff f858 	bl	8000e18 <HAL_GetTick>
 8001d68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6c:	f7ff f854 	bl	8000e18 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e06e      	b.n	8001e60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d82:	4b3a      	ldr	r3, [pc, #232]	; (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 020c 	and.w	r2, r3, #12
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d1eb      	bne.n	8001d6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d010      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	4b31      	ldr	r3, [pc, #196]	; (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d208      	bcs.n	8001dc2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db0:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	492b      	ldr	r1, [pc, #172]	; (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc2:	4b29      	ldr	r3, [pc, #164]	; (8001e68 <HAL_RCC_ClockConfig+0x1ec>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d210      	bcs.n	8001df2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd0:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <HAL_RCC_ClockConfig+0x1ec>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f023 0207 	bic.w	r2, r3, #7
 8001dd8:	4923      	ldr	r1, [pc, #140]	; (8001e68 <HAL_RCC_ClockConfig+0x1ec>)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de0:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <HAL_RCC_ClockConfig+0x1ec>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d001      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e036      	b.n	8001e60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d008      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dfe:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4918      	ldr	r1, [pc, #96]	; (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d009      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e1c:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4910      	ldr	r1, [pc, #64]	; (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e30:	f000 f824 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <HAL_RCC_ClockConfig+0x1f0>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	091b      	lsrs	r3, r3, #4
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	490b      	ldr	r1, [pc, #44]	; (8001e70 <HAL_RCC_ClockConfig+0x1f4>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4c:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <HAL_RCC_ClockConfig+0x1f8>)
 8001e4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_RCC_ClockConfig+0x1fc>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe ff8f 	bl	8000d78 <HAL_InitTick>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e5e:	7afb      	ldrb	r3, [r7, #11]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40022000 	.word	0x40022000
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	08007eb8 	.word	0x08007eb8
 8001e74:	20000000 	.word	0x20000000
 8001e78:	20000004 	.word	0x20000004

08001e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e8a:	4b3e      	ldr	r3, [pc, #248]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e94:	4b3b      	ldr	r3, [pc, #236]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	2b0c      	cmp	r3, #12
 8001ea8:	d121      	bne.n	8001eee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d11e      	bne.n	8001eee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001eb0:	4b34      	ldr	r3, [pc, #208]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d107      	bne.n	8001ecc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ebc:	4b31      	ldr	r3, [pc, #196]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	e005      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ecc:	4b2d      	ldr	r3, [pc, #180]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ed8:	4a2b      	ldr	r2, [pc, #172]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10d      	bne.n	8001f04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eec:	e00a      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d102      	bne.n	8001efa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ef4:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ef6:	61bb      	str	r3, [r7, #24]
 8001ef8:	e004      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f00:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	2b0c      	cmp	r3, #12
 8001f08:	d134      	bne.n	8001f74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f0a:	4b1e      	ldr	r3, [pc, #120]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d003      	beq.n	8001f22 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d003      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0xac>
 8001f20:	e005      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f22:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x110>)
 8001f24:	617b      	str	r3, [r7, #20]
      break;
 8001f26:	e005      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f28:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f2a:	617b      	str	r3, [r7, #20]
      break;
 8001f2c:	e002      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	617b      	str	r3, [r7, #20]
      break;
 8001f32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f34:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	3301      	adds	r3, #1
 8001f40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	fb03 f202 	mul.w	r2, r3, r2
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	0e5b      	lsrs	r3, r3, #25
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	3301      	adds	r3, #1
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f74:	69bb      	ldr	r3, [r7, #24]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3724      	adds	r7, #36	; 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000
 8001f88:	08007ed0 	.word	0x08007ed0
 8001f8c:	00f42400 	.word	0x00f42400
 8001f90:	007a1200 	.word	0x007a1200

08001f94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f98:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20000000 	.word	0x20000000

08001fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fb0:	f7ff fff0 	bl	8001f94 <HAL_RCC_GetHCLKFreq>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	4904      	ldr	r1, [pc, #16]	; (8001fd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fc2:	5ccb      	ldrb	r3, [r1, r3]
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	08007ec8 	.word	0x08007ec8

08001fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fdc:	f7ff ffda 	bl	8001f94 <HAL_RCC_GetHCLKFreq>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	0adb      	lsrs	r3, r3, #11
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	4904      	ldr	r1, [pc, #16]	; (8002000 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fee:	5ccb      	ldrb	r3, [r1, r3]
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	08007ec8 	.word	0x08007ec8

08002004 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800200c:	2300      	movs	r3, #0
 800200e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002010:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800201c:	f7ff f9ee 	bl	80013fc <HAL_PWREx_GetVoltageRange>
 8002020:	6178      	str	r0, [r7, #20]
 8002022:	e014      	b.n	800204e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002024:	4b25      	ldr	r3, [pc, #148]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	4a24      	ldr	r2, [pc, #144]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800202a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202e:	6593      	str	r3, [r2, #88]	; 0x58
 8002030:	4b22      	ldr	r3, [pc, #136]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800203c:	f7ff f9de 	bl	80013fc <HAL_PWREx_GetVoltageRange>
 8002040:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002042:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002046:	4a1d      	ldr	r2, [pc, #116]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800204c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002054:	d10b      	bne.n	800206e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b80      	cmp	r3, #128	; 0x80
 800205a:	d919      	bls.n	8002090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2ba0      	cmp	r3, #160	; 0xa0
 8002060:	d902      	bls.n	8002068 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002062:	2302      	movs	r3, #2
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	e013      	b.n	8002090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002068:	2301      	movs	r3, #1
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	e010      	b.n	8002090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b80      	cmp	r3, #128	; 0x80
 8002072:	d902      	bls.n	800207a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002074:	2303      	movs	r3, #3
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	e00a      	b.n	8002090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b80      	cmp	r3, #128	; 0x80
 800207e:	d102      	bne.n	8002086 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002080:	2302      	movs	r3, #2
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	e004      	b.n	8002090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b70      	cmp	r3, #112	; 0x70
 800208a:	d101      	bne.n	8002090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800208c:	2301      	movs	r3, #1
 800208e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f023 0207 	bic.w	r2, r3, #7
 8002098:	4909      	ldr	r1, [pc, #36]	; (80020c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d001      	beq.n	80020b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40022000 	.word	0x40022000

080020c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020cc:	2300      	movs	r3, #0
 80020ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020d0:	2300      	movs	r3, #0
 80020d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d041      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020e8:	d02a      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80020ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020ee:	d824      	bhi.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020f4:	d008      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020fa:	d81e      	bhi.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002100:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002104:	d010      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002106:	e018      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002108:	4b86      	ldr	r3, [pc, #536]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4a85      	ldr	r2, [pc, #532]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002112:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002114:	e015      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3304      	adds	r3, #4
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f000 fabb 	bl	8002698 <RCCEx_PLLSAI1_Config>
 8002122:	4603      	mov	r3, r0
 8002124:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002126:	e00c      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3320      	adds	r3, #32
 800212c:	2100      	movs	r1, #0
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fba6 	bl	8002880 <RCCEx_PLLSAI2_Config>
 8002134:	4603      	mov	r3, r0
 8002136:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002138:	e003      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	74fb      	strb	r3, [r7, #19]
      break;
 800213e:	e000      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002140:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002142:	7cfb      	ldrb	r3, [r7, #19]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10b      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002148:	4b76      	ldr	r3, [pc, #472]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002156:	4973      	ldr	r1, [pc, #460]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800215e:	e001      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002160:	7cfb      	ldrb	r3, [r7, #19]
 8002162:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d041      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002174:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002178:	d02a      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800217a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800217e:	d824      	bhi.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002180:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002184:	d008      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002186:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800218a:	d81e      	bhi.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00a      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002194:	d010      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002196:	e018      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002198:	4b62      	ldr	r3, [pc, #392]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4a61      	ldr	r2, [pc, #388]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021a4:	e015      	b.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 fa73 	bl	8002698 <RCCEx_PLLSAI1_Config>
 80021b2:	4603      	mov	r3, r0
 80021b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021b6:	e00c      	b.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3320      	adds	r3, #32
 80021bc:	2100      	movs	r1, #0
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 fb5e 	bl	8002880 <RCCEx_PLLSAI2_Config>
 80021c4:	4603      	mov	r3, r0
 80021c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021c8:	e003      	b.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	74fb      	strb	r3, [r7, #19]
      break;
 80021ce:	e000      	b.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80021d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021d2:	7cfb      	ldrb	r3, [r7, #19]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10b      	bne.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021d8:	4b52      	ldr	r3, [pc, #328]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021e6:	494f      	ldr	r1, [pc, #316]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021ee:	e001      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021f0:	7cfb      	ldrb	r3, [r7, #19]
 80021f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80a0 	beq.w	8002342 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002206:	4b47      	ldr	r3, [pc, #284]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002216:	2300      	movs	r3, #0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00d      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800221c:	4b41      	ldr	r3, [pc, #260]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	4a40      	ldr	r2, [pc, #256]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002226:	6593      	str	r3, [r2, #88]	; 0x58
 8002228:	4b3e      	ldr	r3, [pc, #248]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002234:	2301      	movs	r3, #1
 8002236:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002238:	4b3b      	ldr	r3, [pc, #236]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a3a      	ldr	r2, [pc, #232]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800223e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002242:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002244:	f7fe fde8 	bl	8000e18 <HAL_GetTick>
 8002248:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800224a:	e009      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224c:	f7fe fde4 	bl	8000e18 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d902      	bls.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	74fb      	strb	r3, [r7, #19]
        break;
 800225e:	e005      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002260:	4b31      	ldr	r3, [pc, #196]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0ef      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800226c:	7cfb      	ldrb	r3, [r7, #19]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d15c      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002272:	4b2c      	ldr	r3, [pc, #176]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01f      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	429a      	cmp	r2, r3
 800228e:	d019      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002290:	4b24      	ldr	r3, [pc, #144]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800229a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800229c:	4b21      	ldr	r3, [pc, #132]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a2:	4a20      	ldr	r2, [pc, #128]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022ac:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b2:	4a1c      	ldr	r2, [pc, #112]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022bc:	4a19      	ldr	r2, [pc, #100]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d016      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ce:	f7fe fda3 	bl	8000e18 <HAL_GetTick>
 80022d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d4:	e00b      	b.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d6:	f7fe fd9f 	bl	8000e18 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d902      	bls.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	74fb      	strb	r3, [r7, #19]
            break;
 80022ec:	e006      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0ec      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80022fc:	7cfb      	ldrb	r3, [r7, #19]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10c      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002308:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002312:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800231a:	e009      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800231c:	7cfb      	ldrb	r3, [r7, #19]
 800231e:	74bb      	strb	r3, [r7, #18]
 8002320:	e006      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
 8002328:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800232c:	7cfb      	ldrb	r3, [r7, #19]
 800232e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002330:	7c7b      	ldrb	r3, [r7, #17]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d105      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002336:	4b9e      	ldr	r3, [pc, #632]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	4a9d      	ldr	r2, [pc, #628]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002340:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800234e:	4b98      	ldr	r3, [pc, #608]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002354:	f023 0203 	bic.w	r2, r3, #3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235c:	4994      	ldr	r1, [pc, #592]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00a      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002370:	4b8f      	ldr	r3, [pc, #572]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002376:	f023 020c 	bic.w	r2, r3, #12
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237e:	498c      	ldr	r1, [pc, #560]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002392:	4b87      	ldr	r3, [pc, #540]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002398:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	4983      	ldr	r1, [pc, #524]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00a      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023b4:	4b7e      	ldr	r3, [pc, #504]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	497b      	ldr	r1, [pc, #492]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00a      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023d6:	4b76      	ldr	r3, [pc, #472]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e4:	4972      	ldr	r1, [pc, #456]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0320 	and.w	r3, r3, #32
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00a      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023f8:	4b6d      	ldr	r3, [pc, #436]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	496a      	ldr	r1, [pc, #424]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00a      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800241a:	4b65      	ldr	r3, [pc, #404]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002420:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002428:	4961      	ldr	r1, [pc, #388]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00a      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800243c:	4b5c      	ldr	r3, [pc, #368]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002442:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244a:	4959      	ldr	r1, [pc, #356]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00a      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800245e:	4b54      	ldr	r3, [pc, #336]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002464:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800246c:	4950      	ldr	r1, [pc, #320]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00a      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002480:	4b4b      	ldr	r3, [pc, #300]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002486:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248e:	4948      	ldr	r1, [pc, #288]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00a      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024a2:	4b43      	ldr	r3, [pc, #268]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b0:	493f      	ldr	r1, [pc, #252]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d028      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024c4:	4b3a      	ldr	r3, [pc, #232]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024d2:	4937      	ldr	r1, [pc, #220]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024e2:	d106      	bne.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024e4:	4b32      	ldr	r3, [pc, #200]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4a31      	ldr	r2, [pc, #196]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024ee:	60d3      	str	r3, [r2, #12]
 80024f0:	e011      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024fa:	d10c      	bne.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3304      	adds	r3, #4
 8002500:	2101      	movs	r1, #1
 8002502:	4618      	mov	r0, r3
 8002504:	f000 f8c8 	bl	8002698 <RCCEx_PLLSAI1_Config>
 8002508:	4603      	mov	r3, r0
 800250a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800250c:	7cfb      	ldrb	r3, [r7, #19]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002512:	7cfb      	ldrb	r3, [r7, #19]
 8002514:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d028      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002522:	4b23      	ldr	r3, [pc, #140]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002528:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	491f      	ldr	r1, [pc, #124]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002540:	d106      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002542:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	4a1a      	ldr	r2, [pc, #104]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800254c:	60d3      	str	r3, [r2, #12]
 800254e:	e011      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002558:	d10c      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3304      	adds	r3, #4
 800255e:	2101      	movs	r1, #1
 8002560:	4618      	mov	r0, r3
 8002562:	f000 f899 	bl	8002698 <RCCEx_PLLSAI1_Config>
 8002566:	4603      	mov	r3, r0
 8002568:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800256a:	7cfb      	ldrb	r3, [r7, #19]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d02b      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002586:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258e:	4908      	ldr	r1, [pc, #32]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800259a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800259e:	d109      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025a0:	4b03      	ldr	r3, [pc, #12]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4a02      	ldr	r2, [pc, #8]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025aa:	60d3      	str	r3, [r2, #12]
 80025ac:	e014      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80025ae:	bf00      	nop
 80025b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025bc:	d10c      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3304      	adds	r3, #4
 80025c2:	2101      	movs	r1, #1
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 f867 	bl	8002698 <RCCEx_PLLSAI1_Config>
 80025ca:	4603      	mov	r3, r0
 80025cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025ce:	7cfb      	ldrb	r3, [r7, #19]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80025d4:	7cfb      	ldrb	r3, [r7, #19]
 80025d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d02f      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025e4:	4b2b      	ldr	r3, [pc, #172]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025f2:	4928      	ldr	r1, [pc, #160]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002602:	d10d      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3304      	adds	r3, #4
 8002608:	2102      	movs	r1, #2
 800260a:	4618      	mov	r0, r3
 800260c:	f000 f844 	bl	8002698 <RCCEx_PLLSAI1_Config>
 8002610:	4603      	mov	r3, r0
 8002612:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002614:	7cfb      	ldrb	r3, [r7, #19]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d014      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800261a:	7cfb      	ldrb	r3, [r7, #19]
 800261c:	74bb      	strb	r3, [r7, #18]
 800261e:	e011      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002628:	d10c      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3320      	adds	r3, #32
 800262e:	2102      	movs	r1, #2
 8002630:	4618      	mov	r0, r3
 8002632:	f000 f925 	bl	8002880 <RCCEx_PLLSAI2_Config>
 8002636:	4603      	mov	r3, r0
 8002638:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800263a:	7cfb      	ldrb	r3, [r7, #19]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002640:	7cfb      	ldrb	r3, [r7, #19]
 8002642:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002650:	4b10      	ldr	r3, [pc, #64]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800265e:	490d      	ldr	r1, [pc, #52]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00b      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002678:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002682:	4904      	ldr	r1, [pc, #16]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800268a:	7cbb      	ldrb	r3, [r7, #18]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000

08002698 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026a6:	4b75      	ldr	r3, [pc, #468]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d018      	beq.n	80026e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026b2:	4b72      	ldr	r3, [pc, #456]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f003 0203 	and.w	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d10d      	bne.n	80026de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
       ||
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026ca:	4b6c      	ldr	r3, [pc, #432]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
       ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d047      	beq.n	800276e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	e044      	b.n	800276e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d018      	beq.n	800271e <RCCEx_PLLSAI1_Config+0x86>
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d825      	bhi.n	800273c <RCCEx_PLLSAI1_Config+0xa4>
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d002      	beq.n	80026fa <RCCEx_PLLSAI1_Config+0x62>
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d009      	beq.n	800270c <RCCEx_PLLSAI1_Config+0x74>
 80026f8:	e020      	b.n	800273c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026fa:	4b60      	ldr	r3, [pc, #384]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d11d      	bne.n	8002742 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270a:	e01a      	b.n	8002742 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800270c:	4b5b      	ldr	r3, [pc, #364]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d116      	bne.n	8002746 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800271c:	e013      	b.n	8002746 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800271e:	4b57      	ldr	r3, [pc, #348]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10f      	bne.n	800274a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800272a:	4b54      	ldr	r3, [pc, #336]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800273a:	e006      	b.n	800274a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
      break;
 8002740:	e004      	b.n	800274c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002742:	bf00      	nop
 8002744:	e002      	b.n	800274c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002746:	bf00      	nop
 8002748:	e000      	b.n	800274c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800274a:	bf00      	nop
    }

    if(status == HAL_OK)
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10d      	bne.n	800276e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002752:	4b4a      	ldr	r3, [pc, #296]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6819      	ldr	r1, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	430b      	orrs	r3, r1
 8002768:	4944      	ldr	r1, [pc, #272]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d17d      	bne.n	8002870 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002774:	4b41      	ldr	r3, [pc, #260]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a40      	ldr	r2, [pc, #256]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 800277a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800277e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002780:	f7fe fb4a 	bl	8000e18 <HAL_GetTick>
 8002784:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002786:	e009      	b.n	800279c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002788:	f7fe fb46 	bl	8000e18 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d902      	bls.n	800279c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	73fb      	strb	r3, [r7, #15]
        break;
 800279a:	e005      	b.n	80027a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800279c:	4b37      	ldr	r3, [pc, #220]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1ef      	bne.n	8002788 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d160      	bne.n	8002870 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d111      	bne.n	80027d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027b4:	4b31      	ldr	r3, [pc, #196]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6892      	ldr	r2, [r2, #8]
 80027c4:	0211      	lsls	r1, r2, #8
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68d2      	ldr	r2, [r2, #12]
 80027ca:	0912      	lsrs	r2, r2, #4
 80027cc:	0452      	lsls	r2, r2, #17
 80027ce:	430a      	orrs	r2, r1
 80027d0:	492a      	ldr	r1, [pc, #168]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	610b      	str	r3, [r1, #16]
 80027d6:	e027      	b.n	8002828 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d112      	bne.n	8002804 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027de:	4b27      	ldr	r3, [pc, #156]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6892      	ldr	r2, [r2, #8]
 80027ee:	0211      	lsls	r1, r2, #8
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6912      	ldr	r2, [r2, #16]
 80027f4:	0852      	lsrs	r2, r2, #1
 80027f6:	3a01      	subs	r2, #1
 80027f8:	0552      	lsls	r2, r2, #21
 80027fa:	430a      	orrs	r2, r1
 80027fc:	491f      	ldr	r1, [pc, #124]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	610b      	str	r3, [r1, #16]
 8002802:	e011      	b.n	8002828 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002804:	4b1d      	ldr	r3, [pc, #116]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800280c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6892      	ldr	r2, [r2, #8]
 8002814:	0211      	lsls	r1, r2, #8
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6952      	ldr	r2, [r2, #20]
 800281a:	0852      	lsrs	r2, r2, #1
 800281c:	3a01      	subs	r2, #1
 800281e:	0652      	lsls	r2, r2, #25
 8002820:	430a      	orrs	r2, r1
 8002822:	4916      	ldr	r1, [pc, #88]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002824:	4313      	orrs	r3, r2
 8002826:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002828:	4b14      	ldr	r3, [pc, #80]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a13      	ldr	r2, [pc, #76]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 800282e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002832:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7fe faf0 	bl	8000e18 <HAL_GetTick>
 8002838:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800283a:	e009      	b.n	8002850 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800283c:	f7fe faec 	bl	8000e18 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d902      	bls.n	8002850 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	73fb      	strb	r3, [r7, #15]
          break;
 800284e:	e005      	b.n	800285c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ef      	beq.n	800283c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	4904      	ldr	r1, [pc, #16]	; (800287c <RCCEx_PLLSAI1_Config+0x1e4>)
 800286c:	4313      	orrs	r3, r2
 800286e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002870:	7bfb      	ldrb	r3, [r7, #15]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40021000 	.word	0x40021000

08002880 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800288e:	4b6a      	ldr	r3, [pc, #424]	; (8002a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d018      	beq.n	80028cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800289a:	4b67      	ldr	r3, [pc, #412]	; (8002a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 0203 	and.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d10d      	bne.n	80028c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
       ||
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d009      	beq.n	80028c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80028b2:	4b61      	ldr	r3, [pc, #388]	; (8002a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	091b      	lsrs	r3, r3, #4
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
       ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d047      	beq.n	8002956 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
 80028ca:	e044      	b.n	8002956 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d018      	beq.n	8002906 <RCCEx_PLLSAI2_Config+0x86>
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d825      	bhi.n	8002924 <RCCEx_PLLSAI2_Config+0xa4>
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d002      	beq.n	80028e2 <RCCEx_PLLSAI2_Config+0x62>
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d009      	beq.n	80028f4 <RCCEx_PLLSAI2_Config+0x74>
 80028e0:	e020      	b.n	8002924 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028e2:	4b55      	ldr	r3, [pc, #340]	; (8002a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d11d      	bne.n	800292a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f2:	e01a      	b.n	800292a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028f4:	4b50      	ldr	r3, [pc, #320]	; (8002a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d116      	bne.n	800292e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002904:	e013      	b.n	800292e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002906:	4b4c      	ldr	r3, [pc, #304]	; (8002a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10f      	bne.n	8002932 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002912:	4b49      	ldr	r3, [pc, #292]	; (8002a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002922:	e006      	b.n	8002932 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
      break;
 8002928:	e004      	b.n	8002934 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800292a:	bf00      	nop
 800292c:	e002      	b.n	8002934 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800292e:	bf00      	nop
 8002930:	e000      	b.n	8002934 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002932:	bf00      	nop
    }

    if(status == HAL_OK)
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10d      	bne.n	8002956 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800293a:	4b3f      	ldr	r3, [pc, #252]	; (8002a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6819      	ldr	r1, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	3b01      	subs	r3, #1
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	430b      	orrs	r3, r1
 8002950:	4939      	ldr	r1, [pc, #228]	; (8002a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002952:	4313      	orrs	r3, r2
 8002954:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d167      	bne.n	8002a2c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800295c:	4b36      	ldr	r3, [pc, #216]	; (8002a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a35      	ldr	r2, [pc, #212]	; (8002a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002966:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002968:	f7fe fa56 	bl	8000e18 <HAL_GetTick>
 800296c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800296e:	e009      	b.n	8002984 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002970:	f7fe fa52 	bl	8000e18 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d902      	bls.n	8002984 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	73fb      	strb	r3, [r7, #15]
        break;
 8002982:	e005      	b.n	8002990 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002984:	4b2c      	ldr	r3, [pc, #176]	; (8002a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1ef      	bne.n	8002970 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d14a      	bne.n	8002a2c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d111      	bne.n	80029c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800299c:	4b26      	ldr	r3, [pc, #152]	; (8002a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6892      	ldr	r2, [r2, #8]
 80029ac:	0211      	lsls	r1, r2, #8
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68d2      	ldr	r2, [r2, #12]
 80029b2:	0912      	lsrs	r2, r2, #4
 80029b4:	0452      	lsls	r2, r2, #17
 80029b6:	430a      	orrs	r2, r1
 80029b8:	491f      	ldr	r1, [pc, #124]	; (8002a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	614b      	str	r3, [r1, #20]
 80029be:	e011      	b.n	80029e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029c0:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6892      	ldr	r2, [r2, #8]
 80029d0:	0211      	lsls	r1, r2, #8
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6912      	ldr	r2, [r2, #16]
 80029d6:	0852      	lsrs	r2, r2, #1
 80029d8:	3a01      	subs	r2, #1
 80029da:	0652      	lsls	r2, r2, #25
 80029dc:	430a      	orrs	r2, r1
 80029de:	4916      	ldr	r1, [pc, #88]	; (8002a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029e4:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a13      	ldr	r2, [pc, #76]	; (8002a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f0:	f7fe fa12 	bl	8000e18 <HAL_GetTick>
 80029f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029f6:	e009      	b.n	8002a0c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029f8:	f7fe fa0e 	bl	8000e18 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d902      	bls.n	8002a0c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	73fb      	strb	r3, [r7, #15]
          break;
 8002a0a:	e005      	b.n	8002a18 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0ef      	beq.n	80029f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a20:	695a      	ldr	r2, [r3, #20]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	4904      	ldr	r1, [pc, #16]	; (8002a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000

08002a3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e095      	b.n	8002b7a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d108      	bne.n	8002a68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a5e:	d009      	beq.n	8002a74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	61da      	str	r2, [r3, #28]
 8002a66:	e005      	b.n	8002a74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fe f816 	bl	8000ac0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aaa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ab4:	d902      	bls.n	8002abc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	e002      	b.n	8002ac2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ac0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002aca:	d007      	beq.n	8002adc <HAL_SPI_Init+0xa0>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ad4:	d002      	beq.n	8002adc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1e:	ea42 0103 	orr.w	r1, r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	0c1b      	lsrs	r3, r3, #16
 8002b38:	f003 0204 	and.w	r2, r3, #4
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b58:	ea42 0103 	orr.w	r1, r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b088      	sub	sp, #32
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	603b      	str	r3, [r7, #0]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_SPI_Transmit+0x22>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e15f      	b.n	8002e64 <HAL_SPI_Transmit+0x2e2>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bac:	f7fe f934 	bl	8000e18 <HAL_GetTick>
 8002bb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d002      	beq.n	8002bc8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bc6:	e148      	b.n	8002e5a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <HAL_SPI_Transmit+0x52>
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d102      	bne.n	8002bda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bd8:	e13f      	b.n	8002e5a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2203      	movs	r2, #3
 8002bde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	88fa      	ldrh	r2, [r7, #6]
 8002bf2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	88fa      	ldrh	r2, [r7, #6]
 8002bf8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c24:	d10f      	bne.n	8002c46 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c50:	2b40      	cmp	r3, #64	; 0x40
 8002c52:	d007      	beq.n	8002c64 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c6c:	d94f      	bls.n	8002d0e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <HAL_SPI_Transmit+0xfa>
 8002c76:	8afb      	ldrh	r3, [r7, #22]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d142      	bne.n	8002d02 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c80:	881a      	ldrh	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8c:	1c9a      	adds	r2, r3, #2
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ca0:	e02f      	b.n	8002d02 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d112      	bne.n	8002cd6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb4:	881a      	ldrh	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc0:	1c9a      	adds	r2, r3, #2
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cd4:	e015      	b.n	8002d02 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cd6:	f7fe f89f 	bl	8000e18 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d803      	bhi.n	8002cee <HAL_SPI_Transmit+0x16c>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cec:	d102      	bne.n	8002cf4 <HAL_SPI_Transmit+0x172>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d106      	bne.n	8002d02 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002d00:	e0ab      	b.n	8002e5a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1ca      	bne.n	8002ca2 <HAL_SPI_Transmit+0x120>
 8002d0c:	e080      	b.n	8002e10 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <HAL_SPI_Transmit+0x19a>
 8002d16:	8afb      	ldrh	r3, [r7, #22]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d174      	bne.n	8002e06 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d912      	bls.n	8002d4c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2a:	881a      	ldrh	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d36:	1c9a      	adds	r2, r3, #2
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b02      	subs	r3, #2
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d4a:	e05c      	b.n	8002e06 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	330c      	adds	r3, #12
 8002d56:	7812      	ldrb	r2, [r2, #0]
 8002d58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002d72:	e048      	b.n	8002e06 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d12b      	bne.n	8002dda <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d912      	bls.n	8002db2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d90:	881a      	ldrh	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9c:	1c9a      	adds	r2, r3, #2
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b02      	subs	r3, #2
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002db0:	e029      	b.n	8002e06 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	330c      	adds	r3, #12
 8002dbc:	7812      	ldrb	r2, [r2, #0]
 8002dbe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dd8:	e015      	b.n	8002e06 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dda:	f7fe f81d 	bl	8000e18 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d803      	bhi.n	8002df2 <HAL_SPI_Transmit+0x270>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df0:	d102      	bne.n	8002df8 <HAL_SPI_Transmit+0x276>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d106      	bne.n	8002e06 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002e04:	e029      	b.n	8002e5a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1b1      	bne.n	8002d74 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	6839      	ldr	r1, [r7, #0]
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 fb69 	bl	80034ec <SPI_EndRxTxTransaction>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10a      	bne.n	8002e44 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	77fb      	strb	r3, [r7, #31]
 8002e50:	e003      	b.n	8002e5a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e62:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3720      	adds	r7, #32
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	; 0x28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_SPI_TransmitReceive+0x26>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e20a      	b.n	80032a8 <HAL_SPI_TransmitReceive+0x43c>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e9a:	f7fd ffbd 	bl	8000e18 <HAL_GetTick>
 8002e9e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ea6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002eae:	887b      	ldrh	r3, [r7, #2]
 8002eb0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002eb2:	887b      	ldrh	r3, [r7, #2]
 8002eb4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002eb6:	7efb      	ldrb	r3, [r7, #27]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d00e      	beq.n	8002eda <HAL_SPI_TransmitReceive+0x6e>
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ec2:	d106      	bne.n	8002ed2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d102      	bne.n	8002ed2 <HAL_SPI_TransmitReceive+0x66>
 8002ecc:	7efb      	ldrb	r3, [r7, #27]
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d003      	beq.n	8002eda <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002ed8:	e1e0      	b.n	800329c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_SPI_TransmitReceive+0x80>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_SPI_TransmitReceive+0x80>
 8002ee6:	887b      	ldrh	r3, [r7, #2]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d103      	bne.n	8002ef4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002ef2:	e1d3      	b.n	800329c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d003      	beq.n	8002f08 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2205      	movs	r2, #5
 8002f04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	887a      	ldrh	r2, [r7, #2]
 8002f18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	887a      	ldrh	r2, [r7, #2]
 8002f20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	887a      	ldrh	r2, [r7, #2]
 8002f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	887a      	ldrh	r2, [r7, #2]
 8002f34:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f4a:	d802      	bhi.n	8002f52 <HAL_SPI_TransmitReceive+0xe6>
 8002f4c:	8a3b      	ldrh	r3, [r7, #16]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d908      	bls.n	8002f64 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	e007      	b.n	8002f74 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f72:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b40      	cmp	r3, #64	; 0x40
 8002f80:	d007      	beq.n	8002f92 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f9a:	f240 8081 	bls.w	80030a0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_SPI_TransmitReceive+0x140>
 8002fa6:	8a7b      	ldrh	r3, [r7, #18]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d16d      	bne.n	8003088 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	881a      	ldrh	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbc:	1c9a      	adds	r2, r3, #2
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fd0:	e05a      	b.n	8003088 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d11b      	bne.n	8003018 <HAL_SPI_TransmitReceive+0x1ac>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d016      	beq.n	8003018 <HAL_SPI_TransmitReceive+0x1ac>
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d113      	bne.n	8003018 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff4:	881a      	ldrh	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	1c9a      	adds	r2, r3, #2
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800300a:	b29b      	uxth	r3, r3
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d11c      	bne.n	8003060 <HAL_SPI_TransmitReceive+0x1f4>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d016      	beq.n	8003060 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	b292      	uxth	r2, r2
 800303e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	1c9a      	adds	r2, r3, #2
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800305c:	2301      	movs	r3, #1
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003060:	f7fd feda 	bl	8000e18 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800306c:	429a      	cmp	r2, r3
 800306e:	d80b      	bhi.n	8003088 <HAL_SPI_TransmitReceive+0x21c>
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003076:	d007      	beq.n	8003088 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003086:	e109      	b.n	800329c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d19f      	bne.n	8002fd2 <HAL_SPI_TransmitReceive+0x166>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d199      	bne.n	8002fd2 <HAL_SPI_TransmitReceive+0x166>
 800309e:	e0e3      	b.n	8003268 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_SPI_TransmitReceive+0x244>
 80030a8:	8a7b      	ldrh	r3, [r7, #18]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	f040 80cf 	bne.w	800324e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d912      	bls.n	80030e0 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030be:	881a      	ldrh	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ca:	1c9a      	adds	r2, r3, #2
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b02      	subs	r3, #2
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030de:	e0b6      	b.n	800324e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	7812      	ldrb	r2, [r2, #0]
 80030ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003106:	e0a2      	b.n	800324e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	d134      	bne.n	8003180 <HAL_SPI_TransmitReceive+0x314>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d02f      	beq.n	8003180 <HAL_SPI_TransmitReceive+0x314>
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	2b01      	cmp	r3, #1
 8003124:	d12c      	bne.n	8003180 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d912      	bls.n	8003156 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003134:	881a      	ldrh	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	1c9a      	adds	r2, r3, #2
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b02      	subs	r3, #2
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003154:	e012      	b.n	800317c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	330c      	adds	r3, #12
 8003160:	7812      	ldrb	r2, [r2, #0]
 8003162:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b01      	cmp	r3, #1
 800318c:	d148      	bne.n	8003220 <HAL_SPI_TransmitReceive+0x3b4>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d042      	beq.n	8003220 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d923      	bls.n	80031ee <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	b292      	uxth	r2, r2
 80031b2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	1c9a      	adds	r2, r3, #2
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b02      	subs	r3, #2
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d81f      	bhi.n	800321c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	e016      	b.n	800321c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f103 020c 	add.w	r2, r3, #12
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	7812      	ldrb	r2, [r2, #0]
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800321c:	2301      	movs	r3, #1
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003220:	f7fd fdfa 	bl	8000e18 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800322c:	429a      	cmp	r2, r3
 800322e:	d803      	bhi.n	8003238 <HAL_SPI_TransmitReceive+0x3cc>
 8003230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003236:	d102      	bne.n	800323e <HAL_SPI_TransmitReceive+0x3d2>
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	2b00      	cmp	r3, #0
 800323c:	d107      	bne.n	800324e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800324c:	e026      	b.n	800329c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	f47f af57 	bne.w	8003108 <HAL_SPI_TransmitReceive+0x29c>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	f47f af50 	bne.w	8003108 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f93d 	bl	80034ec <SPI_EndRxTxTransaction>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2220      	movs	r2, #32
 8003282:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003292:	e003      	b.n	800329c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80032a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3728      	adds	r7, #40	; 0x28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032c0:	f7fd fdaa 	bl	8000e18 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	4413      	add	r3, r2
 80032ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032d0:	f7fd fda2 	bl	8000e18 <HAL_GetTick>
 80032d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032d6:	4b39      	ldr	r3, [pc, #228]	; (80033bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	015b      	lsls	r3, r3, #5
 80032dc:	0d1b      	lsrs	r3, r3, #20
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	fb02 f303 	mul.w	r3, r2, r3
 80032e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032e6:	e054      	b.n	8003392 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032ee:	d050      	beq.n	8003392 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032f0:	f7fd fd92 	bl	8000e18 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d902      	bls.n	8003306 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d13d      	bne.n	8003382 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003314:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800331e:	d111      	bne.n	8003344 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003328:	d004      	beq.n	8003334 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003332:	d107      	bne.n	8003344 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003342:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800334c:	d10f      	bne.n	800336e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800336c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e017      	b.n	80033b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	3b01      	subs	r3, #1
 8003390:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4013      	ands	r3, r2
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	429a      	cmp	r2, r3
 80033a0:	bf0c      	ite	eq
 80033a2:	2301      	moveq	r3, #1
 80033a4:	2300      	movne	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	461a      	mov	r2, r3
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d19b      	bne.n	80032e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3720      	adds	r7, #32
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20000000 	.word	0x20000000

080033c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	; 0x28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80033d2:	f7fd fd21 	bl	8000e18 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	4413      	add	r3, r2
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80033e2:	f7fd fd19 	bl	8000e18 <HAL_GetTick>
 80033e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	330c      	adds	r3, #12
 80033ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80033f0:	4b3d      	ldr	r3, [pc, #244]	; (80034e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	00da      	lsls	r2, r3, #3
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	0d1b      	lsrs	r3, r3, #20
 8003400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003402:	fb02 f303 	mul.w	r3, r2, r3
 8003406:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003408:	e060      	b.n	80034cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003410:	d107      	bne.n	8003422 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d104      	bne.n	8003422 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003420:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003428:	d050      	beq.n	80034cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800342a:	f7fd fcf5 	bl	8000e18 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003436:	429a      	cmp	r2, r3
 8003438:	d902      	bls.n	8003440 <SPI_WaitFifoStateUntilTimeout+0x80>
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	2b00      	cmp	r3, #0
 800343e:	d13d      	bne.n	80034bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800344e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003458:	d111      	bne.n	800347e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003462:	d004      	beq.n	800346e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800346c:	d107      	bne.n	800347e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800347c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003486:	d10f      	bne.n	80034a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e010      	b.n	80034de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	3b01      	subs	r3, #1
 80034ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4013      	ands	r3, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d196      	bne.n	800340a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3728      	adds	r7, #40	; 0x28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000000 	.word	0x20000000

080034ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2200      	movs	r2, #0
 8003500:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f7ff ff5b 	bl	80033c0 <SPI_WaitFifoStateUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d007      	beq.n	8003520 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e027      	b.n	8003570 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2200      	movs	r2, #0
 8003528:	2180      	movs	r1, #128	; 0x80
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f7ff fec0 	bl	80032b0 <SPI_WaitFlagStateUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d007      	beq.n	8003546 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800353a:	f043 0220 	orr.w	r2, r3, #32
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e014      	b.n	8003570 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2200      	movs	r2, #0
 800354e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f7ff ff34 	bl	80033c0 <SPI_WaitFifoStateUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003562:	f043 0220 	orr.w	r2, r3, #32
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e000      	b.n	8003570 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e040      	b.n	800360c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fd fad4 	bl	8000b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2224      	movs	r2, #36	; 0x24
 80035a4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fb6a 	bl	8003c98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f8af 	bl	8003728 <UART_SetConfig>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e01b      	b.n	800360c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 fbe9 	bl	8003ddc <UART_CheckIdleState>
 800360a:	4603      	mov	r3, r0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	4613      	mov	r3, r2
 8003622:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003628:	2b20      	cmp	r3, #32
 800362a:	d178      	bne.n	800371e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <HAL_UART_Transmit+0x24>
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e071      	b.n	8003720 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2221      	movs	r2, #33	; 0x21
 8003648:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800364a:	f7fd fbe5 	bl	8000e18 <HAL_GetTick>
 800364e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	88fa      	ldrh	r2, [r7, #6]
 8003654:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	88fa      	ldrh	r2, [r7, #6]
 800365c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003668:	d108      	bne.n	800367c <HAL_UART_Transmit+0x68>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d104      	bne.n	800367c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	e003      	b.n	8003684 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003680:	2300      	movs	r3, #0
 8003682:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003684:	e030      	b.n	80036e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2200      	movs	r2, #0
 800368e:	2180      	movs	r1, #128	; 0x80
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 fc4b 	bl	8003f2c <UART_WaitOnFlagUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d004      	beq.n	80036a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e03c      	b.n	8003720 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10b      	bne.n	80036c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	881a      	ldrh	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036b8:	b292      	uxth	r2, r2
 80036ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	3302      	adds	r3, #2
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	e008      	b.n	80036d6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	781a      	ldrb	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	b292      	uxth	r2, r2
 80036ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	3301      	adds	r3, #1
 80036d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1c8      	bne.n	8003686 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2200      	movs	r2, #0
 80036fc:	2140      	movs	r1, #64	; 0x40
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 fc14 	bl	8003f2c <UART_WaitOnFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d004      	beq.n	8003714 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2220      	movs	r2, #32
 800370e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e005      	b.n	8003720 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	e000      	b.n	8003720 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800371e:	2302      	movs	r3, #2
  }
}
 8003720:	4618      	mov	r0, r3
 8003722:	3720      	adds	r7, #32
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800372c:	b08a      	sub	sp, #40	; 0x28
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	431a      	orrs	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	431a      	orrs	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	4313      	orrs	r3, r2
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4ba4      	ldr	r3, [pc, #656]	; (80039e8 <UART_SetConfig+0x2c0>)
 8003758:	4013      	ands	r3, r2
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003760:	430b      	orrs	r3, r1
 8003762:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a99      	ldr	r2, [pc, #612]	; (80039ec <UART_SetConfig+0x2c4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d004      	beq.n	8003794 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003790:	4313      	orrs	r3, r2
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a4:	430a      	orrs	r2, r1
 80037a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a90      	ldr	r2, [pc, #576]	; (80039f0 <UART_SetConfig+0x2c8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d126      	bne.n	8003800 <UART_SetConfig+0xd8>
 80037b2:	4b90      	ldr	r3, [pc, #576]	; (80039f4 <UART_SetConfig+0x2cc>)
 80037b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d81b      	bhi.n	80037f8 <UART_SetConfig+0xd0>
 80037c0:	a201      	add	r2, pc, #4	; (adr r2, 80037c8 <UART_SetConfig+0xa0>)
 80037c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c6:	bf00      	nop
 80037c8:	080037d9 	.word	0x080037d9
 80037cc:	080037e9 	.word	0x080037e9
 80037d0:	080037e1 	.word	0x080037e1
 80037d4:	080037f1 	.word	0x080037f1
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037de:	e116      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80037e0:	2302      	movs	r3, #2
 80037e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e6:	e112      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80037e8:	2304      	movs	r3, #4
 80037ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ee:	e10e      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80037f0:	2308      	movs	r3, #8
 80037f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f6:	e10a      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80037f8:	2310      	movs	r3, #16
 80037fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037fe:	e106      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a7c      	ldr	r2, [pc, #496]	; (80039f8 <UART_SetConfig+0x2d0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d138      	bne.n	800387c <UART_SetConfig+0x154>
 800380a:	4b7a      	ldr	r3, [pc, #488]	; (80039f4 <UART_SetConfig+0x2cc>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003810:	f003 030c 	and.w	r3, r3, #12
 8003814:	2b0c      	cmp	r3, #12
 8003816:	d82d      	bhi.n	8003874 <UART_SetConfig+0x14c>
 8003818:	a201      	add	r2, pc, #4	; (adr r2, 8003820 <UART_SetConfig+0xf8>)
 800381a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381e:	bf00      	nop
 8003820:	08003855 	.word	0x08003855
 8003824:	08003875 	.word	0x08003875
 8003828:	08003875 	.word	0x08003875
 800382c:	08003875 	.word	0x08003875
 8003830:	08003865 	.word	0x08003865
 8003834:	08003875 	.word	0x08003875
 8003838:	08003875 	.word	0x08003875
 800383c:	08003875 	.word	0x08003875
 8003840:	0800385d 	.word	0x0800385d
 8003844:	08003875 	.word	0x08003875
 8003848:	08003875 	.word	0x08003875
 800384c:	08003875 	.word	0x08003875
 8003850:	0800386d 	.word	0x0800386d
 8003854:	2300      	movs	r3, #0
 8003856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800385a:	e0d8      	b.n	8003a0e <UART_SetConfig+0x2e6>
 800385c:	2302      	movs	r3, #2
 800385e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003862:	e0d4      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003864:	2304      	movs	r3, #4
 8003866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386a:	e0d0      	b.n	8003a0e <UART_SetConfig+0x2e6>
 800386c:	2308      	movs	r3, #8
 800386e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003872:	e0cc      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003874:	2310      	movs	r3, #16
 8003876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800387a:	e0c8      	b.n	8003a0e <UART_SetConfig+0x2e6>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a5e      	ldr	r2, [pc, #376]	; (80039fc <UART_SetConfig+0x2d4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d125      	bne.n	80038d2 <UART_SetConfig+0x1aa>
 8003886:	4b5b      	ldr	r3, [pc, #364]	; (80039f4 <UART_SetConfig+0x2cc>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003890:	2b30      	cmp	r3, #48	; 0x30
 8003892:	d016      	beq.n	80038c2 <UART_SetConfig+0x19a>
 8003894:	2b30      	cmp	r3, #48	; 0x30
 8003896:	d818      	bhi.n	80038ca <UART_SetConfig+0x1a2>
 8003898:	2b20      	cmp	r3, #32
 800389a:	d00a      	beq.n	80038b2 <UART_SetConfig+0x18a>
 800389c:	2b20      	cmp	r3, #32
 800389e:	d814      	bhi.n	80038ca <UART_SetConfig+0x1a2>
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <UART_SetConfig+0x182>
 80038a4:	2b10      	cmp	r3, #16
 80038a6:	d008      	beq.n	80038ba <UART_SetConfig+0x192>
 80038a8:	e00f      	b.n	80038ca <UART_SetConfig+0x1a2>
 80038aa:	2300      	movs	r3, #0
 80038ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038b0:	e0ad      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80038b2:	2302      	movs	r3, #2
 80038b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038b8:	e0a9      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80038ba:	2304      	movs	r3, #4
 80038bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038c0:	e0a5      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80038c2:	2308      	movs	r3, #8
 80038c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038c8:	e0a1      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80038ca:	2310      	movs	r3, #16
 80038cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038d0:	e09d      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a4a      	ldr	r2, [pc, #296]	; (8003a00 <UART_SetConfig+0x2d8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d125      	bne.n	8003928 <UART_SetConfig+0x200>
 80038dc:	4b45      	ldr	r3, [pc, #276]	; (80039f4 <UART_SetConfig+0x2cc>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038e6:	2bc0      	cmp	r3, #192	; 0xc0
 80038e8:	d016      	beq.n	8003918 <UART_SetConfig+0x1f0>
 80038ea:	2bc0      	cmp	r3, #192	; 0xc0
 80038ec:	d818      	bhi.n	8003920 <UART_SetConfig+0x1f8>
 80038ee:	2b80      	cmp	r3, #128	; 0x80
 80038f0:	d00a      	beq.n	8003908 <UART_SetConfig+0x1e0>
 80038f2:	2b80      	cmp	r3, #128	; 0x80
 80038f4:	d814      	bhi.n	8003920 <UART_SetConfig+0x1f8>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <UART_SetConfig+0x1d8>
 80038fa:	2b40      	cmp	r3, #64	; 0x40
 80038fc:	d008      	beq.n	8003910 <UART_SetConfig+0x1e8>
 80038fe:	e00f      	b.n	8003920 <UART_SetConfig+0x1f8>
 8003900:	2300      	movs	r3, #0
 8003902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003906:	e082      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003908:	2302      	movs	r3, #2
 800390a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800390e:	e07e      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003910:	2304      	movs	r3, #4
 8003912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003916:	e07a      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003918:	2308      	movs	r3, #8
 800391a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800391e:	e076      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003920:	2310      	movs	r3, #16
 8003922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003926:	e072      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a35      	ldr	r2, [pc, #212]	; (8003a04 <UART_SetConfig+0x2dc>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d12a      	bne.n	8003988 <UART_SetConfig+0x260>
 8003932:	4b30      	ldr	r3, [pc, #192]	; (80039f4 <UART_SetConfig+0x2cc>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003938:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003940:	d01a      	beq.n	8003978 <UART_SetConfig+0x250>
 8003942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003946:	d81b      	bhi.n	8003980 <UART_SetConfig+0x258>
 8003948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800394c:	d00c      	beq.n	8003968 <UART_SetConfig+0x240>
 800394e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003952:	d815      	bhi.n	8003980 <UART_SetConfig+0x258>
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <UART_SetConfig+0x238>
 8003958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800395c:	d008      	beq.n	8003970 <UART_SetConfig+0x248>
 800395e:	e00f      	b.n	8003980 <UART_SetConfig+0x258>
 8003960:	2300      	movs	r3, #0
 8003962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003966:	e052      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003968:	2302      	movs	r3, #2
 800396a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800396e:	e04e      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003970:	2304      	movs	r3, #4
 8003972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003976:	e04a      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003978:	2308      	movs	r3, #8
 800397a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800397e:	e046      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003980:	2310      	movs	r3, #16
 8003982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003986:	e042      	b.n	8003a0e <UART_SetConfig+0x2e6>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a17      	ldr	r2, [pc, #92]	; (80039ec <UART_SetConfig+0x2c4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d13a      	bne.n	8003a08 <UART_SetConfig+0x2e0>
 8003992:	4b18      	ldr	r3, [pc, #96]	; (80039f4 <UART_SetConfig+0x2cc>)
 8003994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003998:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800399c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039a0:	d01a      	beq.n	80039d8 <UART_SetConfig+0x2b0>
 80039a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039a6:	d81b      	bhi.n	80039e0 <UART_SetConfig+0x2b8>
 80039a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ac:	d00c      	beq.n	80039c8 <UART_SetConfig+0x2a0>
 80039ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039b2:	d815      	bhi.n	80039e0 <UART_SetConfig+0x2b8>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <UART_SetConfig+0x298>
 80039b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039bc:	d008      	beq.n	80039d0 <UART_SetConfig+0x2a8>
 80039be:	e00f      	b.n	80039e0 <UART_SetConfig+0x2b8>
 80039c0:	2300      	movs	r3, #0
 80039c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039c6:	e022      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80039c8:	2302      	movs	r3, #2
 80039ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ce:	e01e      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80039d0:	2304      	movs	r3, #4
 80039d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d6:	e01a      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80039d8:	2308      	movs	r3, #8
 80039da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039de:	e016      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80039e0:	2310      	movs	r3, #16
 80039e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e6:	e012      	b.n	8003a0e <UART_SetConfig+0x2e6>
 80039e8:	efff69f3 	.word	0xefff69f3
 80039ec:	40008000 	.word	0x40008000
 80039f0:	40013800 	.word	0x40013800
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40004400 	.word	0x40004400
 80039fc:	40004800 	.word	0x40004800
 8003a00:	40004c00 	.word	0x40004c00
 8003a04:	40005000 	.word	0x40005000
 8003a08:	2310      	movs	r3, #16
 8003a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a9f      	ldr	r2, [pc, #636]	; (8003c90 <UART_SetConfig+0x568>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d17a      	bne.n	8003b0e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d824      	bhi.n	8003a6a <UART_SetConfig+0x342>
 8003a20:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <UART_SetConfig+0x300>)
 8003a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a26:	bf00      	nop
 8003a28:	08003a4d 	.word	0x08003a4d
 8003a2c:	08003a6b 	.word	0x08003a6b
 8003a30:	08003a55 	.word	0x08003a55
 8003a34:	08003a6b 	.word	0x08003a6b
 8003a38:	08003a5b 	.word	0x08003a5b
 8003a3c:	08003a6b 	.word	0x08003a6b
 8003a40:	08003a6b 	.word	0x08003a6b
 8003a44:	08003a6b 	.word	0x08003a6b
 8003a48:	08003a63 	.word	0x08003a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a4c:	f7fe faae 	bl	8001fac <HAL_RCC_GetPCLK1Freq>
 8003a50:	61f8      	str	r0, [r7, #28]
        break;
 8003a52:	e010      	b.n	8003a76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a54:	4b8f      	ldr	r3, [pc, #572]	; (8003c94 <UART_SetConfig+0x56c>)
 8003a56:	61fb      	str	r3, [r7, #28]
        break;
 8003a58:	e00d      	b.n	8003a76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a5a:	f7fe fa0f 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8003a5e:	61f8      	str	r0, [r7, #28]
        break;
 8003a60:	e009      	b.n	8003a76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a66:	61fb      	str	r3, [r7, #28]
        break;
 8003a68:	e005      	b.n	8003a76 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 80fb 	beq.w	8003c74 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	4413      	add	r3, r2
 8003a88:	69fa      	ldr	r2, [r7, #28]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d305      	bcc.n	8003a9a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d903      	bls.n	8003aa2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003aa0:	e0e8      	b.n	8003c74 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	461c      	mov	r4, r3
 8003aa8:	4615      	mov	r5, r2
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	022b      	lsls	r3, r5, #8
 8003ab4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ab8:	0222      	lsls	r2, r4, #8
 8003aba:	68f9      	ldr	r1, [r7, #12]
 8003abc:	6849      	ldr	r1, [r1, #4]
 8003abe:	0849      	lsrs	r1, r1, #1
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	4688      	mov	r8, r1
 8003ac4:	4681      	mov	r9, r0
 8003ac6:	eb12 0a08 	adds.w	sl, r2, r8
 8003aca:	eb43 0b09 	adc.w	fp, r3, r9
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	603b      	str	r3, [r7, #0]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003adc:	4650      	mov	r0, sl
 8003ade:	4659      	mov	r1, fp
 8003ae0:	f7fc fbce 	bl	8000280 <__aeabi_uldivmod>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4613      	mov	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003af2:	d308      	bcc.n	8003b06 <UART_SetConfig+0x3de>
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003afa:	d204      	bcs.n	8003b06 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	60da      	str	r2, [r3, #12]
 8003b04:	e0b6      	b.n	8003c74 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b0c:	e0b2      	b.n	8003c74 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b16:	d15e      	bne.n	8003bd6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003b18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d828      	bhi.n	8003b72 <UART_SetConfig+0x44a>
 8003b20:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <UART_SetConfig+0x400>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b4d 	.word	0x08003b4d
 8003b2c:	08003b55 	.word	0x08003b55
 8003b30:	08003b5d 	.word	0x08003b5d
 8003b34:	08003b73 	.word	0x08003b73
 8003b38:	08003b63 	.word	0x08003b63
 8003b3c:	08003b73 	.word	0x08003b73
 8003b40:	08003b73 	.word	0x08003b73
 8003b44:	08003b73 	.word	0x08003b73
 8003b48:	08003b6b 	.word	0x08003b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b4c:	f7fe fa2e 	bl	8001fac <HAL_RCC_GetPCLK1Freq>
 8003b50:	61f8      	str	r0, [r7, #28]
        break;
 8003b52:	e014      	b.n	8003b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b54:	f7fe fa40 	bl	8001fd8 <HAL_RCC_GetPCLK2Freq>
 8003b58:	61f8      	str	r0, [r7, #28]
        break;
 8003b5a:	e010      	b.n	8003b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b5c:	4b4d      	ldr	r3, [pc, #308]	; (8003c94 <UART_SetConfig+0x56c>)
 8003b5e:	61fb      	str	r3, [r7, #28]
        break;
 8003b60:	e00d      	b.n	8003b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b62:	f7fe f98b 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8003b66:	61f8      	str	r0, [r7, #28]
        break;
 8003b68:	e009      	b.n	8003b7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b6e:	61fb      	str	r3, [r7, #28]
        break;
 8003b70:	e005      	b.n	8003b7e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d077      	beq.n	8003c74 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	005a      	lsls	r2, r3, #1
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	085b      	lsrs	r3, r3, #1
 8003b8e:	441a      	add	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b0f      	cmp	r3, #15
 8003b9e:	d916      	bls.n	8003bce <UART_SetConfig+0x4a6>
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba6:	d212      	bcs.n	8003bce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	f023 030f 	bic.w	r3, r3, #15
 8003bb0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	085b      	lsrs	r3, r3, #1
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	8afb      	ldrh	r3, [r7, #22]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	8afa      	ldrh	r2, [r7, #22]
 8003bca:	60da      	str	r2, [r3, #12]
 8003bcc:	e052      	b.n	8003c74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bd4:	e04e      	b.n	8003c74 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d827      	bhi.n	8003c2e <UART_SetConfig+0x506>
 8003bde:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <UART_SetConfig+0x4bc>)
 8003be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be4:	08003c09 	.word	0x08003c09
 8003be8:	08003c11 	.word	0x08003c11
 8003bec:	08003c19 	.word	0x08003c19
 8003bf0:	08003c2f 	.word	0x08003c2f
 8003bf4:	08003c1f 	.word	0x08003c1f
 8003bf8:	08003c2f 	.word	0x08003c2f
 8003bfc:	08003c2f 	.word	0x08003c2f
 8003c00:	08003c2f 	.word	0x08003c2f
 8003c04:	08003c27 	.word	0x08003c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c08:	f7fe f9d0 	bl	8001fac <HAL_RCC_GetPCLK1Freq>
 8003c0c:	61f8      	str	r0, [r7, #28]
        break;
 8003c0e:	e014      	b.n	8003c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c10:	f7fe f9e2 	bl	8001fd8 <HAL_RCC_GetPCLK2Freq>
 8003c14:	61f8      	str	r0, [r7, #28]
        break;
 8003c16:	e010      	b.n	8003c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c18:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <UART_SetConfig+0x56c>)
 8003c1a:	61fb      	str	r3, [r7, #28]
        break;
 8003c1c:	e00d      	b.n	8003c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c1e:	f7fe f92d 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8003c22:	61f8      	str	r0, [r7, #28]
        break;
 8003c24:	e009      	b.n	8003c3a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2a:	61fb      	str	r3, [r7, #28]
        break;
 8003c2c:	e005      	b.n	8003c3a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c38:	bf00      	nop
    }

    if (pclk != 0U)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d019      	beq.n	8003c74 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	085a      	lsrs	r2, r3, #1
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	441a      	add	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c52:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	2b0f      	cmp	r3, #15
 8003c58:	d909      	bls.n	8003c6e <UART_SetConfig+0x546>
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c60:	d205      	bcs.n	8003c6e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	60da      	str	r2, [r3, #12]
 8003c6c:	e002      	b.n	8003c74 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3728      	adds	r7, #40	; 0x28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c8e:	bf00      	nop
 8003c90:	40008000 	.word	0x40008000
 8003c94:	00f42400 	.word	0x00f42400

08003c98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01a      	beq.n	8003dae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d96:	d10a      	bne.n	8003dae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	605a      	str	r2, [r3, #4]
  }
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b098      	sub	sp, #96	; 0x60
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dec:	f7fd f814 	bl	8000e18 <HAL_GetTick>
 8003df0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d12e      	bne.n	8003e5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f88c 	bl	8003f2c <UART_WaitOnFlagUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d021      	beq.n	8003e5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e2e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e38:	647b      	str	r3, [r7, #68]	; 0x44
 8003e3a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e40:	e841 2300 	strex	r3, r2, [r1]
 8003e44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e6      	bne.n	8003e1a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e062      	b.n	8003f24 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d149      	bne.n	8003f00 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e74:	2200      	movs	r2, #0
 8003e76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f856 	bl	8003f2c <UART_WaitOnFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d03c      	beq.n	8003f00 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	e853 3f00 	ldrex	r3, [r3]
 8003e92:	623b      	str	r3, [r7, #32]
   return(result);
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ea6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eac:	e841 2300 	strex	r3, r2, [r1]
 8003eb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e6      	bne.n	8003e86 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3308      	adds	r3, #8
 8003ebe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	e853 3f00 	ldrex	r3, [r3]
 8003ec6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0301 	bic.w	r3, r3, #1
 8003ece:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ed8:	61fa      	str	r2, [r7, #28]
 8003eda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	69b9      	ldr	r1, [r7, #24]
 8003ede:	69fa      	ldr	r2, [r7, #28]
 8003ee0:	e841 2300 	strex	r3, r2, [r1]
 8003ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e5      	bne.n	8003eb8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e011      	b.n	8003f24 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3758      	adds	r7, #88	; 0x58
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f3c:	e049      	b.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f44:	d045      	beq.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f46:	f7fc ff67 	bl	8000e18 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d302      	bcc.n	8003f5c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e048      	b.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d031      	beq.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d110      	bne.n	8003f9e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2208      	movs	r2, #8
 8003f82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f838 	bl	8003ffa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2208      	movs	r2, #8
 8003f8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e029      	b.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fac:	d111      	bne.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 f81e 	bl	8003ffa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e00f      	b.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	bf0c      	ite	eq
 8003fe2:	2301      	moveq	r3, #1
 8003fe4:	2300      	movne	r3, #0
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	461a      	mov	r2, r3
 8003fea:	79fb      	ldrb	r3, [r7, #7]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d0a6      	beq.n	8003f3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b095      	sub	sp, #84	; 0x54
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004012:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004020:	643b      	str	r3, [r7, #64]	; 0x40
 8004022:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004026:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800402e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e6      	bne.n	8004002 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3308      	adds	r3, #8
 800403a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	61fb      	str	r3, [r7, #28]
   return(result);
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f023 0301 	bic.w	r3, r3, #1
 800404a:	64bb      	str	r3, [r7, #72]	; 0x48
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3308      	adds	r3, #8
 8004052:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004054:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004056:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800405a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e5      	bne.n	8004034 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800406c:	2b01      	cmp	r3, #1
 800406e:	d118      	bne.n	80040a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	e853 3f00 	ldrex	r3, [r3]
 800407c:	60bb      	str	r3, [r7, #8]
   return(result);
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f023 0310 	bic.w	r3, r3, #16
 8004084:	647b      	str	r3, [r7, #68]	; 0x44
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800408e:	61bb      	str	r3, [r7, #24]
 8004090:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004092:	6979      	ldr	r1, [r7, #20]
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	e841 2300 	strex	r3, r2, [r1]
 800409a:	613b      	str	r3, [r7, #16]
   return(result);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e6      	bne.n	8004070 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80040b6:	bf00      	nop
 80040b8:	3754      	adds	r7, #84	; 0x54
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
	...

080040c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80040c8:	4904      	ldr	r1, [pc, #16]	; (80040dc <MX_FATFS_Init+0x18>)
 80040ca:	4805      	ldr	r0, [pc, #20]	; (80040e0 <MX_FATFS_Init+0x1c>)
 80040cc:	f003 f91e 	bl	800730c <FATFS_LinkDriver>
 80040d0:	4603      	mov	r3, r0
 80040d2:	461a      	mov	r2, r3
 80040d4:	4b03      	ldr	r3, [pc, #12]	; (80040e4 <MX_FATFS_Init+0x20>)
 80040d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80040d8:	bf00      	nop
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20000288 	.word	0x20000288
 80040e0:	2000000c 	.word	0x2000000c
 80040e4:	20000284 	.word	0x20000284

080040e8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80040ec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	4603      	mov	r3, r0
 8004100:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return USER_SPI_initialize(pdrv);
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	4618      	mov	r0, r3
 8004106:	f000 f9d3 	bl	80044b0 <USER_SPI_initialize>
 800410a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	return USER_SPI_status(pdrv);
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fab1 	bl	8004688 <USER_SPI_status>
 8004126:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004128:	4618      	mov	r0, r3
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	607a      	str	r2, [r7, #4]
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	4603      	mov	r3, r0
 800413e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 8004140:	7bf8      	ldrb	r0, [r7, #15]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	f000 fab4 	bl	80046b4 <USER_SPI_read>
 800414c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b084      	sub	sp, #16
 800415a:	af00      	add	r7, sp, #0
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
 8004162:	4603      	mov	r3, r0
 8004164:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 8004166:	7bf8      	ldrb	r0, [r7, #15]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	f000 fb07 	bl	8004780 <USER_SPI_write>
 8004172:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	603a      	str	r2, [r7, #0]
 8004186:	71fb      	strb	r3, [r7, #7]
 8004188:	460b      	mov	r3, r1
 800418a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800418c:	79b9      	ldrb	r1, [r7, #6]
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fb70 	bl	8004878 <USER_SPI_ioctl>
 8004198:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80041ac:	f7fc fe34 	bl	8000e18 <HAL_GetTick>
 80041b0:	4603      	mov	r3, r0
 80041b2:	4a04      	ldr	r2, [pc, #16]	; (80041c4 <SPI_Timer_On+0x20>)
 80041b4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80041b6:	4a04      	ldr	r2, [pc, #16]	; (80041c8 <SPI_Timer_On+0x24>)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6013      	str	r3, [r2, #0]
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	20000290 	.word	0x20000290
 80041c8:	20000294 	.word	0x20000294

080041cc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80041d0:	f7fc fe22 	bl	8000e18 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <SPI_Timer_Status+0x24>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	1ad2      	subs	r2, r2, r3
 80041dc:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <SPI_Timer_Status+0x28>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	bf34      	ite	cc
 80041e4:	2301      	movcc	r3, #1
 80041e6:	2300      	movcs	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20000290 	.word	0x20000290
 80041f4:	20000294 	.word	0x20000294

080041f8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	4603      	mov	r3, r0
 8004200:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8004202:	f107 020f 	add.w	r2, r7, #15
 8004206:	1df9      	adds	r1, r7, #7
 8004208:	2332      	movs	r3, #50	; 0x32
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	2301      	movs	r3, #1
 800420e:	4804      	ldr	r0, [pc, #16]	; (8004220 <xchg_spi+0x28>)
 8004210:	f7fe fe2c 	bl	8002e6c <HAL_SPI_TransmitReceive>
    return rxDat;
 8004214:	7bfb      	ldrb	r3, [r7, #15]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20000090 	.word	0x20000090

08004224 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004224:	b590      	push	{r4, r7, lr}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	e00a      	b.n	800424a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	18d4      	adds	r4, r2, r3
 800423a:	20ff      	movs	r0, #255	; 0xff
 800423c:	f7ff ffdc 	bl	80041f8 <xchg_spi>
 8004240:	4603      	mov	r3, r0
 8004242:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3301      	adds	r3, #1
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d3f0      	bcc.n	8004234 <rcvr_spi_multi+0x10>
	}
}
 8004252:	bf00      	nop
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	bd90      	pop	{r4, r7, pc}

0800425c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	b29a      	uxth	r2, r3
 800426a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	4803      	ldr	r0, [pc, #12]	; (8004280 <xmit_spi_multi+0x24>)
 8004272:	f7fe fc86 	bl	8002b82 <HAL_SPI_Transmit>
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20000090 	.word	0x20000090

08004284 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800428c:	f7fc fdc4 	bl	8000e18 <HAL_GetTick>
 8004290:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004296:	20ff      	movs	r0, #255	; 0xff
 8004298:	f7ff ffae 	bl	80041f8 <xchg_spi>
 800429c:	4603      	mov	r3, r0
 800429e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
 80042a2:	2bff      	cmp	r3, #255	; 0xff
 80042a4:	d007      	beq.n	80042b6 <wait_ready+0x32>
 80042a6:	f7fc fdb7 	bl	8000e18 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d8ef      	bhi.n	8004296 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	2bff      	cmp	r3, #255	; 0xff
 80042ba:	bf0c      	ite	eq
 80042bc:	2301      	moveq	r3, #1
 80042be:	2300      	movne	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80042d0:	2201      	movs	r2, #1
 80042d2:	2102      	movs	r1, #2
 80042d4:	4803      	ldr	r0, [pc, #12]	; (80042e4 <despiselect+0x18>)
 80042d6:	f7fd f85f 	bl	8001398 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80042da:	20ff      	movs	r0, #255	; 0xff
 80042dc:	f7ff ff8c 	bl	80041f8 <xchg_spi>

}
 80042e0:	bf00      	nop
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	48000400 	.word	0x48000400

080042e8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80042ec:	2200      	movs	r2, #0
 80042ee:	2102      	movs	r1, #2
 80042f0:	4809      	ldr	r0, [pc, #36]	; (8004318 <spiselect+0x30>)
 80042f2:	f7fd f851 	bl	8001398 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80042f6:	20ff      	movs	r0, #255	; 0xff
 80042f8:	f7ff ff7e 	bl	80041f8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80042fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004300:	f7ff ffc0 	bl	8004284 <wait_ready>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <spiselect+0x26>
 800430a:	2301      	movs	r3, #1
 800430c:	e002      	b.n	8004314 <spiselect+0x2c>

	despiselect();
 800430e:	f7ff ffdd 	bl	80042cc <despiselect>
	return 0;	/* Timeout */
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	bd80      	pop	{r7, pc}
 8004318:	48000400 	.word	0x48000400

0800431c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8004326:	20c8      	movs	r0, #200	; 0xc8
 8004328:	f7ff ff3c 	bl	80041a4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800432c:	20ff      	movs	r0, #255	; 0xff
 800432e:	f7ff ff63 	bl	80041f8 <xchg_spi>
 8004332:	4603      	mov	r3, r0
 8004334:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004336:	7bfb      	ldrb	r3, [r7, #15]
 8004338:	2bff      	cmp	r3, #255	; 0xff
 800433a:	d104      	bne.n	8004346 <rcvr_datablock+0x2a>
 800433c:	f7ff ff46 	bl	80041cc <SPI_Timer_Status>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f2      	bne.n	800432c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	2bfe      	cmp	r3, #254	; 0xfe
 800434a:	d001      	beq.n	8004350 <rcvr_datablock+0x34>
 800434c:	2300      	movs	r3, #0
 800434e:	e00a      	b.n	8004366 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004350:	6839      	ldr	r1, [r7, #0]
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff ff66 	bl	8004224 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004358:	20ff      	movs	r0, #255	; 0xff
 800435a:	f7ff ff4d 	bl	80041f8 <xchg_spi>
 800435e:	20ff      	movs	r0, #255	; 0xff
 8004360:	f7ff ff4a 	bl	80041f8 <xchg_spi>

	return 1;						/* Function succeeded */
 8004364:	2301      	movs	r3, #1
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	460b      	mov	r3, r1
 8004378:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800437a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800437e:	f7ff ff81 	bl	8004284 <wait_ready>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <xmit_datablock+0x1e>
 8004388:	2300      	movs	r3, #0
 800438a:	e01e      	b.n	80043ca <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800438c:	78fb      	ldrb	r3, [r7, #3]
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff ff32 	bl	80041f8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	2bfd      	cmp	r3, #253	; 0xfd
 8004398:	d016      	beq.n	80043c8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800439a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff ff5c 	bl	800425c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80043a4:	20ff      	movs	r0, #255	; 0xff
 80043a6:	f7ff ff27 	bl	80041f8 <xchg_spi>
 80043aa:	20ff      	movs	r0, #255	; 0xff
 80043ac:	f7ff ff24 	bl	80041f8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80043b0:	20ff      	movs	r0, #255	; 0xff
 80043b2:	f7ff ff21 	bl	80041f8 <xchg_spi>
 80043b6:	4603      	mov	r3, r0
 80043b8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	f003 031f 	and.w	r3, r3, #31
 80043c0:	2b05      	cmp	r3, #5
 80043c2:	d001      	beq.n	80043c8 <xmit_datablock+0x5a>
 80043c4:	2300      	movs	r3, #0
 80043c6:	e000      	b.n	80043ca <xmit_datablock+0x5c>
	}
	return 1;
 80043c8:	2301      	movs	r3, #1
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	4603      	mov	r3, r0
 80043da:	6039      	str	r1, [r7, #0]
 80043dc:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80043de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	da0e      	bge.n	8004404 <send_cmd+0x32>
		cmd &= 0x7F;
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043ec:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80043ee:	2100      	movs	r1, #0
 80043f0:	2037      	movs	r0, #55	; 0x37
 80043f2:	f7ff ffee 	bl	80043d2 <send_cmd>
 80043f6:	4603      	mov	r3, r0
 80043f8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80043fa:	7bbb      	ldrb	r3, [r7, #14]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d901      	bls.n	8004404 <send_cmd+0x32>
 8004400:	7bbb      	ldrb	r3, [r7, #14]
 8004402:	e051      	b.n	80044a8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	2b0c      	cmp	r3, #12
 8004408:	d008      	beq.n	800441c <send_cmd+0x4a>
		despiselect();
 800440a:	f7ff ff5f 	bl	80042cc <despiselect>
		if (!spiselect()) return 0xFF;
 800440e:	f7ff ff6b 	bl	80042e8 <spiselect>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <send_cmd+0x4a>
 8004418:	23ff      	movs	r3, #255	; 0xff
 800441a:	e045      	b.n	80044a8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004422:	b2db      	uxtb	r3, r3
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff fee7 	bl	80041f8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	0e1b      	lsrs	r3, r3, #24
 800442e:	b2db      	uxtb	r3, r3
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fee1 	bl	80041f8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	0c1b      	lsrs	r3, r3, #16
 800443a:	b2db      	uxtb	r3, r3
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fedb 	bl	80041f8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	0a1b      	lsrs	r3, r3, #8
 8004446:	b2db      	uxtb	r3, r3
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fed5 	bl	80041f8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff fed0 	bl	80041f8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004458:	2301      	movs	r3, #1
 800445a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800445c:	79fb      	ldrb	r3, [r7, #7]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <send_cmd+0x94>
 8004462:	2395      	movs	r3, #149	; 0x95
 8004464:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	2b08      	cmp	r3, #8
 800446a:	d101      	bne.n	8004470 <send_cmd+0x9e>
 800446c:	2387      	movs	r3, #135	; 0x87
 800446e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004470:	7bfb      	ldrb	r3, [r7, #15]
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff fec0 	bl	80041f8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	2b0c      	cmp	r3, #12
 800447c:	d102      	bne.n	8004484 <send_cmd+0xb2>
 800447e:	20ff      	movs	r0, #255	; 0xff
 8004480:	f7ff feba 	bl	80041f8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004484:	230a      	movs	r3, #10
 8004486:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004488:	20ff      	movs	r0, #255	; 0xff
 800448a:	f7ff feb5 	bl	80041f8 <xchg_spi>
 800448e:	4603      	mov	r3, r0
 8004490:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8004492:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004496:	2b00      	cmp	r3, #0
 8004498:	da05      	bge.n	80044a6 <send_cmd+0xd4>
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	3b01      	subs	r3, #1
 800449e:	73fb      	strb	r3, [r7, #15]
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <send_cmd+0xb6>

	return res;							/* Return received response */
 80044a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80044b0:	b590      	push	{r4, r7, lr}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <USER_SPI_initialize+0x14>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e0d6      	b.n	8004672 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80044c4:	4b6d      	ldr	r3, [pc, #436]	; (800467c <USER_SPI_initialize+0x1cc>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <USER_SPI_initialize+0x2a>
 80044d2:	4b6a      	ldr	r3, [pc, #424]	; (800467c <USER_SPI_initialize+0x1cc>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	e0cb      	b.n	8004672 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80044da:	4b69      	ldr	r3, [pc, #420]	; (8004680 <USER_SPI_initialize+0x1d0>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80044e4:	4b66      	ldr	r3, [pc, #408]	; (8004680 <USER_SPI_initialize+0x1d0>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80044ec:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80044ee:	230a      	movs	r3, #10
 80044f0:	73fb      	strb	r3, [r7, #15]
 80044f2:	e005      	b.n	8004500 <USER_SPI_initialize+0x50>
 80044f4:	20ff      	movs	r0, #255	; 0xff
 80044f6:	f7ff fe7f 	bl	80041f8 <xchg_spi>
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
 80044fc:	3b01      	subs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f6      	bne.n	80044f4 <USER_SPI_initialize+0x44>

	ty = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800450a:	2100      	movs	r1, #0
 800450c:	2000      	movs	r0, #0
 800450e:	f7ff ff60 	bl	80043d2 <send_cmd>
 8004512:	4603      	mov	r3, r0
 8004514:	2b01      	cmp	r3, #1
 8004516:	f040 808b 	bne.w	8004630 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800451a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800451e:	f7ff fe41 	bl	80041a4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004522:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004526:	2008      	movs	r0, #8
 8004528:	f7ff ff53 	bl	80043d2 <send_cmd>
 800452c:	4603      	mov	r3, r0
 800452e:	2b01      	cmp	r3, #1
 8004530:	d151      	bne.n	80045d6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004532:	2300      	movs	r3, #0
 8004534:	73fb      	strb	r3, [r7, #15]
 8004536:	e00d      	b.n	8004554 <USER_SPI_initialize+0xa4>
 8004538:	7bfc      	ldrb	r4, [r7, #15]
 800453a:	20ff      	movs	r0, #255	; 0xff
 800453c:	f7ff fe5c 	bl	80041f8 <xchg_spi>
 8004540:	4603      	mov	r3, r0
 8004542:	461a      	mov	r2, r3
 8004544:	f104 0310 	add.w	r3, r4, #16
 8004548:	443b      	add	r3, r7
 800454a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	3301      	adds	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b03      	cmp	r3, #3
 8004558:	d9ee      	bls.n	8004538 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800455a:	7abb      	ldrb	r3, [r7, #10]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d167      	bne.n	8004630 <USER_SPI_initialize+0x180>
 8004560:	7afb      	ldrb	r3, [r7, #11]
 8004562:	2baa      	cmp	r3, #170	; 0xaa
 8004564:	d164      	bne.n	8004630 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004566:	bf00      	nop
 8004568:	f7ff fe30 	bl	80041cc <SPI_Timer_Status>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d007      	beq.n	8004582 <USER_SPI_initialize+0xd2>
 8004572:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004576:	20a9      	movs	r0, #169	; 0xa9
 8004578:	f7ff ff2b 	bl	80043d2 <send_cmd>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f2      	bne.n	8004568 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004582:	f7ff fe23 	bl	80041cc <SPI_Timer_Status>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d051      	beq.n	8004630 <USER_SPI_initialize+0x180>
 800458c:	2100      	movs	r1, #0
 800458e:	203a      	movs	r0, #58	; 0x3a
 8004590:	f7ff ff1f 	bl	80043d2 <send_cmd>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d14a      	bne.n	8004630 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800459a:	2300      	movs	r3, #0
 800459c:	73fb      	strb	r3, [r7, #15]
 800459e:	e00d      	b.n	80045bc <USER_SPI_initialize+0x10c>
 80045a0:	7bfc      	ldrb	r4, [r7, #15]
 80045a2:	20ff      	movs	r0, #255	; 0xff
 80045a4:	f7ff fe28 	bl	80041f8 <xchg_spi>
 80045a8:	4603      	mov	r3, r0
 80045aa:	461a      	mov	r2, r3
 80045ac:	f104 0310 	add.w	r3, r4, #16
 80045b0:	443b      	add	r3, r7
 80045b2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	3301      	adds	r3, #1
 80045ba:	73fb      	strb	r3, [r7, #15]
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	2b03      	cmp	r3, #3
 80045c0:	d9ee      	bls.n	80045a0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80045c2:	7a3b      	ldrb	r3, [r7, #8]
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <USER_SPI_initialize+0x120>
 80045cc:	230c      	movs	r3, #12
 80045ce:	e000      	b.n	80045d2 <USER_SPI_initialize+0x122>
 80045d0:	2304      	movs	r3, #4
 80045d2:	737b      	strb	r3, [r7, #13]
 80045d4:	e02c      	b.n	8004630 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80045d6:	2100      	movs	r1, #0
 80045d8:	20a9      	movs	r0, #169	; 0xa9
 80045da:	f7ff fefa 	bl	80043d2 <send_cmd>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d804      	bhi.n	80045ee <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80045e4:	2302      	movs	r3, #2
 80045e6:	737b      	strb	r3, [r7, #13]
 80045e8:	23a9      	movs	r3, #169	; 0xa9
 80045ea:	73bb      	strb	r3, [r7, #14]
 80045ec:	e003      	b.n	80045f6 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80045ee:	2301      	movs	r3, #1
 80045f0:	737b      	strb	r3, [r7, #13]
 80045f2:	2301      	movs	r3, #1
 80045f4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80045f6:	bf00      	nop
 80045f8:	f7ff fde8 	bl	80041cc <SPI_Timer_Status>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d007      	beq.n	8004612 <USER_SPI_initialize+0x162>
 8004602:	7bbb      	ldrb	r3, [r7, #14]
 8004604:	2100      	movs	r1, #0
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff fee3 	bl	80043d2 <send_cmd>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f2      	bne.n	80045f8 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004612:	f7ff fddb 	bl	80041cc <SPI_Timer_Status>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d007      	beq.n	800462c <USER_SPI_initialize+0x17c>
 800461c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004620:	2010      	movs	r0, #16
 8004622:	f7ff fed6 	bl	80043d2 <send_cmd>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <USER_SPI_initialize+0x180>
				ty = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004630:	4a14      	ldr	r2, [pc, #80]	; (8004684 <USER_SPI_initialize+0x1d4>)
 8004632:	7b7b      	ldrb	r3, [r7, #13]
 8004634:	7013      	strb	r3, [r2, #0]
	despiselect();
 8004636:	f7ff fe49 	bl	80042cc <despiselect>

	if (ty) {			/* OK */
 800463a:	7b7b      	ldrb	r3, [r7, #13]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d012      	beq.n	8004666 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004640:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <USER_SPI_initialize+0x1d0>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800464a:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <USER_SPI_initialize+0x1d0>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0210 	orr.w	r2, r2, #16
 8004652:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004654:	4b09      	ldr	r3, [pc, #36]	; (800467c <USER_SPI_initialize+0x1cc>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	f023 0301 	bic.w	r3, r3, #1
 800465e:	b2da      	uxtb	r2, r3
 8004660:	4b06      	ldr	r3, [pc, #24]	; (800467c <USER_SPI_initialize+0x1cc>)
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	e002      	b.n	800466c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8004666:	4b05      	ldr	r3, [pc, #20]	; (800467c <USER_SPI_initialize+0x1cc>)
 8004668:	2201      	movs	r2, #1
 800466a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800466c:	4b03      	ldr	r3, [pc, #12]	; (800467c <USER_SPI_initialize+0x1cc>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	b2db      	uxtb	r3, r3
}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	bd90      	pop	{r4, r7, pc}
 800467a:	bf00      	nop
 800467c:	20000020 	.word	0x20000020
 8004680:	20000090 	.word	0x20000090
 8004684:	2000028c 	.word	0x2000028c

08004688 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <USER_SPI_status+0x14>
 8004698:	2301      	movs	r3, #1
 800469a:	e002      	b.n	80046a2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800469c:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <USER_SPI_status+0x28>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	b2db      	uxtb	r3, r3
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	20000020 	.word	0x20000020

080046b4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	607a      	str	r2, [r7, #4]
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	4603      	mov	r3, r0
 80046c2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d102      	bne.n	80046d0 <USER_SPI_read+0x1c>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <USER_SPI_read+0x20>
 80046d0:	2304      	movs	r3, #4
 80046d2:	e04d      	b.n	8004770 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80046d4:	4b28      	ldr	r3, [pc, #160]	; (8004778 <USER_SPI_read+0xc4>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <USER_SPI_read+0x32>
 80046e2:	2303      	movs	r3, #3
 80046e4:	e044      	b.n	8004770 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80046e6:	4b25      	ldr	r3, [pc, #148]	; (800477c <USER_SPI_read+0xc8>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d102      	bne.n	80046f8 <USER_SPI_read+0x44>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	025b      	lsls	r3, r3, #9
 80046f6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d111      	bne.n	8004722 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	2011      	movs	r0, #17
 8004702:	f7ff fe66 	bl	80043d2 <send_cmd>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d129      	bne.n	8004760 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800470c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004710:	68b8      	ldr	r0, [r7, #8]
 8004712:	f7ff fe03 	bl	800431c <rcvr_datablock>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d021      	beq.n	8004760 <USER_SPI_read+0xac>
			count = 0;
 800471c:	2300      	movs	r3, #0
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	e01e      	b.n	8004760 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	2012      	movs	r0, #18
 8004726:	f7ff fe54 	bl	80043d2 <send_cmd>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d117      	bne.n	8004760 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004730:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004734:	68b8      	ldr	r0, [r7, #8]
 8004736:	f7ff fdf1 	bl	800431c <rcvr_datablock>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <USER_SPI_read+0xa2>
				buff += 512;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004746:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	3b01      	subs	r3, #1
 800474c:	603b      	str	r3, [r7, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1ed      	bne.n	8004730 <USER_SPI_read+0x7c>
 8004754:	e000      	b.n	8004758 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8004756:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004758:	2100      	movs	r1, #0
 800475a:	200c      	movs	r0, #12
 800475c:	f7ff fe39 	bl	80043d2 <send_cmd>
		}
	}
	despiselect();
 8004760:	f7ff fdb4 	bl	80042cc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	bf14      	ite	ne
 800476a:	2301      	movne	r3, #1
 800476c:	2300      	moveq	r3, #0
 800476e:	b2db      	uxtb	r3, r3
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	20000020 	.word	0x20000020
 800477c:	2000028c 	.word	0x2000028c

08004780 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	4603      	mov	r3, r0
 800478e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d102      	bne.n	800479c <USER_SPI_write+0x1c>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <USER_SPI_write+0x20>
 800479c:	2304      	movs	r3, #4
 800479e:	e063      	b.n	8004868 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80047a0:	4b33      	ldr	r3, [pc, #204]	; (8004870 <USER_SPI_write+0xf0>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <USER_SPI_write+0x32>
 80047ae:	2303      	movs	r3, #3
 80047b0:	e05a      	b.n	8004868 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80047b2:	4b2f      	ldr	r3, [pc, #188]	; (8004870 <USER_SPI_write+0xf0>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <USER_SPI_write+0x44>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e051      	b.n	8004868 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80047c4:	4b2b      	ldr	r3, [pc, #172]	; (8004874 <USER_SPI_write+0xf4>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d102      	bne.n	80047d6 <USER_SPI_write+0x56>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	025b      	lsls	r3, r3, #9
 80047d4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d110      	bne.n	80047fe <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	2018      	movs	r0, #24
 80047e0:	f7ff fdf7 	bl	80043d2 <send_cmd>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d136      	bne.n	8004858 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80047ea:	21fe      	movs	r1, #254	; 0xfe
 80047ec:	68b8      	ldr	r0, [r7, #8]
 80047ee:	f7ff fdbe 	bl	800436e <xmit_datablock>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d02f      	beq.n	8004858 <USER_SPI_write+0xd8>
			count = 0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	e02c      	b.n	8004858 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80047fe:	4b1d      	ldr	r3, [pc, #116]	; (8004874 <USER_SPI_write+0xf4>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	f003 0306 	and.w	r3, r3, #6
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <USER_SPI_write+0x92>
 800480a:	6839      	ldr	r1, [r7, #0]
 800480c:	2097      	movs	r0, #151	; 0x97
 800480e:	f7ff fde0 	bl	80043d2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	2019      	movs	r0, #25
 8004816:	f7ff fddc 	bl	80043d2 <send_cmd>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d11b      	bne.n	8004858 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004820:	21fc      	movs	r1, #252	; 0xfc
 8004822:	68b8      	ldr	r0, [r7, #8]
 8004824:	f7ff fda3 	bl	800436e <xmit_datablock>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <USER_SPI_write+0xc4>
				buff += 512;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004834:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	3b01      	subs	r3, #1
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1ee      	bne.n	8004820 <USER_SPI_write+0xa0>
 8004842:	e000      	b.n	8004846 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8004844:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8004846:	21fd      	movs	r1, #253	; 0xfd
 8004848:	2000      	movs	r0, #0
 800484a:	f7ff fd90 	bl	800436e <xmit_datablock>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <USER_SPI_write+0xd8>
 8004854:	2301      	movs	r3, #1
 8004856:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004858:	f7ff fd38 	bl	80042cc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	bf14      	ite	ne
 8004862:	2301      	movne	r3, #1
 8004864:	2300      	moveq	r3, #0
 8004866:	b2db      	uxtb	r3, r3
}
 8004868:	4618      	mov	r0, r3
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20000020 	.word	0x20000020
 8004874:	2000028c 	.word	0x2000028c

08004878 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08c      	sub	sp, #48	; 0x30
 800487c:	af00      	add	r7, sp, #0
 800487e:	4603      	mov	r3, r0
 8004880:	603a      	str	r2, [r7, #0]
 8004882:	71fb      	strb	r3, [r7, #7]
 8004884:	460b      	mov	r3, r1
 8004886:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004888:	79fb      	ldrb	r3, [r7, #7]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <USER_SPI_ioctl+0x1a>
 800488e:	2304      	movs	r3, #4
 8004890:	e15a      	b.n	8004b48 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004892:	4baf      	ldr	r3, [pc, #700]	; (8004b50 <USER_SPI_ioctl+0x2d8>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	b2db      	uxtb	r3, r3
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <USER_SPI_ioctl+0x2c>
 80048a0:	2303      	movs	r3, #3
 80048a2:	e151      	b.n	8004b48 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80048aa:	79bb      	ldrb	r3, [r7, #6]
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	f200 8136 	bhi.w	8004b1e <USER_SPI_ioctl+0x2a6>
 80048b2:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <USER_SPI_ioctl+0x40>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	080048cd 	.word	0x080048cd
 80048bc:	080048e1 	.word	0x080048e1
 80048c0:	08004b1f 	.word	0x08004b1f
 80048c4:	0800498d 	.word	0x0800498d
 80048c8:	08004a83 	.word	0x08004a83
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80048cc:	f7ff fd0c 	bl	80042e8 <spiselect>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 8127 	beq.w	8004b26 <USER_SPI_ioctl+0x2ae>
 80048d8:	2300      	movs	r3, #0
 80048da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80048de:	e122      	b.n	8004b26 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80048e0:	2100      	movs	r1, #0
 80048e2:	2009      	movs	r0, #9
 80048e4:	f7ff fd75 	bl	80043d2 <send_cmd>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f040 811d 	bne.w	8004b2a <USER_SPI_ioctl+0x2b2>
 80048f0:	f107 030c 	add.w	r3, r7, #12
 80048f4:	2110      	movs	r1, #16
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff fd10 	bl	800431c <rcvr_datablock>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 8113 	beq.w	8004b2a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004904:	7b3b      	ldrb	r3, [r7, #12]
 8004906:	099b      	lsrs	r3, r3, #6
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b01      	cmp	r3, #1
 800490c:	d111      	bne.n	8004932 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800490e:	7d7b      	ldrb	r3, [r7, #21]
 8004910:	461a      	mov	r2, r3
 8004912:	7d3b      	ldrb	r3, [r7, #20]
 8004914:	021b      	lsls	r3, r3, #8
 8004916:	4413      	add	r3, r2
 8004918:	461a      	mov	r2, r3
 800491a:	7cfb      	ldrb	r3, [r7, #19]
 800491c:	041b      	lsls	r3, r3, #16
 800491e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8004922:	4413      	add	r3, r2
 8004924:	3301      	adds	r3, #1
 8004926:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	029a      	lsls	r2, r3, #10
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	e028      	b.n	8004984 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004932:	7c7b      	ldrb	r3, [r7, #17]
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	b2da      	uxtb	r2, r3
 800493a:	7dbb      	ldrb	r3, [r7, #22]
 800493c:	09db      	lsrs	r3, r3, #7
 800493e:	b2db      	uxtb	r3, r3
 8004940:	4413      	add	r3, r2
 8004942:	b2da      	uxtb	r2, r3
 8004944:	7d7b      	ldrb	r3, [r7, #21]
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f003 0306 	and.w	r3, r3, #6
 800494e:	b2db      	uxtb	r3, r3
 8004950:	4413      	add	r3, r2
 8004952:	b2db      	uxtb	r3, r3
 8004954:	3302      	adds	r3, #2
 8004956:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800495a:	7d3b      	ldrb	r3, [r7, #20]
 800495c:	099b      	lsrs	r3, r3, #6
 800495e:	b2db      	uxtb	r3, r3
 8004960:	461a      	mov	r2, r3
 8004962:	7cfb      	ldrb	r3, [r7, #19]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	441a      	add	r2, r3
 8004968:	7cbb      	ldrb	r3, [r7, #18]
 800496a:	029b      	lsls	r3, r3, #10
 800496c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004970:	4413      	add	r3, r2
 8004972:	3301      	adds	r3, #1
 8004974:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004976:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800497a:	3b09      	subs	r3, #9
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	409a      	lsls	r2, r3
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800498a:	e0ce      	b.n	8004b2a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800498c:	4b71      	ldr	r3, [pc, #452]	; (8004b54 <USER_SPI_ioctl+0x2dc>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d031      	beq.n	80049fc <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004998:	2100      	movs	r1, #0
 800499a:	208d      	movs	r0, #141	; 0x8d
 800499c:	f7ff fd19 	bl	80043d2 <send_cmd>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f040 80c3 	bne.w	8004b2e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80049a8:	20ff      	movs	r0, #255	; 0xff
 80049aa:	f7ff fc25 	bl	80041f8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80049ae:	f107 030c 	add.w	r3, r7, #12
 80049b2:	2110      	movs	r1, #16
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff fcb1 	bl	800431c <rcvr_datablock>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80b6 	beq.w	8004b2e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80049c2:	2330      	movs	r3, #48	; 0x30
 80049c4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80049c8:	e007      	b.n	80049da <USER_SPI_ioctl+0x162>
 80049ca:	20ff      	movs	r0, #255	; 0xff
 80049cc:	f7ff fc14 	bl	80041f8 <xchg_spi>
 80049d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80049d4:	3b01      	subs	r3, #1
 80049d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80049da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1f3      	bne.n	80049ca <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80049e2:	7dbb      	ldrb	r3, [r7, #22]
 80049e4:	091b      	lsrs	r3, r3, #4
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	461a      	mov	r2, r3
 80049ea:	2310      	movs	r3, #16
 80049ec:	fa03 f202 	lsl.w	r2, r3, r2
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80049fa:	e098      	b.n	8004b2e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80049fc:	2100      	movs	r1, #0
 80049fe:	2009      	movs	r0, #9
 8004a00:	f7ff fce7 	bl	80043d2 <send_cmd>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f040 8091 	bne.w	8004b2e <USER_SPI_ioctl+0x2b6>
 8004a0c:	f107 030c 	add.w	r3, r7, #12
 8004a10:	2110      	movs	r1, #16
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff fc82 	bl	800431c <rcvr_datablock>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 8087 	beq.w	8004b2e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004a20:	4b4c      	ldr	r3, [pc, #304]	; (8004b54 <USER_SPI_ioctl+0x2dc>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d012      	beq.n	8004a52 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004a2c:	7dbb      	ldrb	r3, [r7, #22]
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004a34:	7dfa      	ldrb	r2, [r7, #23]
 8004a36:	09d2      	lsrs	r2, r2, #7
 8004a38:	b2d2      	uxtb	r2, r2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	7e7b      	ldrb	r3, [r7, #25]
 8004a40:	099b      	lsrs	r3, r3, #6
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	e013      	b.n	8004a7a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004a52:	7dbb      	ldrb	r3, [r7, #22]
 8004a54:	109b      	asrs	r3, r3, #2
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f003 031f 	and.w	r3, r3, #31
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	7dfa      	ldrb	r2, [r7, #23]
 8004a60:	00d2      	lsls	r2, r2, #3
 8004a62:	f002 0218 	and.w	r2, r2, #24
 8004a66:	7df9      	ldrb	r1, [r7, #23]
 8004a68:	0949      	lsrs	r1, r1, #5
 8004a6a:	b2c9      	uxtb	r1, r1
 8004a6c:	440a      	add	r2, r1
 8004a6e:	3201      	adds	r2, #1
 8004a70:	fb02 f303 	mul.w	r3, r2, r3
 8004a74:	461a      	mov	r2, r3
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004a80:	e055      	b.n	8004b2e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004a82:	4b34      	ldr	r3, [pc, #208]	; (8004b54 <USER_SPI_ioctl+0x2dc>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	f003 0306 	and.w	r3, r3, #6
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d051      	beq.n	8004b32 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004a8e:	f107 020c 	add.w	r2, r7, #12
 8004a92:	79fb      	ldrb	r3, [r7, #7]
 8004a94:	210b      	movs	r1, #11
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff feee 	bl	8004878 <USER_SPI_ioctl>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d149      	bne.n	8004b36 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004aa2:	7b3b      	ldrb	r3, [r7, #12]
 8004aa4:	099b      	lsrs	r3, r3, #6
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d104      	bne.n	8004ab6 <USER_SPI_ioctl+0x23e>
 8004aac:	7dbb      	ldrb	r3, [r7, #22]
 8004aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d041      	beq.n	8004b3a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	623b      	str	r3, [r7, #32]
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8004ac6:	4b23      	ldr	r3, [pc, #140]	; (8004b54 <USER_SPI_ioctl+0x2dc>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d105      	bne.n	8004ade <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8004ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad4:	025b      	lsls	r3, r3, #9
 8004ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	025b      	lsls	r3, r3, #9
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004ade:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ae0:	2020      	movs	r0, #32
 8004ae2:	f7ff fc76 	bl	80043d2 <send_cmd>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d128      	bne.n	8004b3e <USER_SPI_ioctl+0x2c6>
 8004aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004aee:	2021      	movs	r0, #33	; 0x21
 8004af0:	f7ff fc6f 	bl	80043d2 <send_cmd>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d121      	bne.n	8004b3e <USER_SPI_ioctl+0x2c6>
 8004afa:	2100      	movs	r1, #0
 8004afc:	2026      	movs	r0, #38	; 0x26
 8004afe:	f7ff fc68 	bl	80043d2 <send_cmd>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d11a      	bne.n	8004b3e <USER_SPI_ioctl+0x2c6>
 8004b08:	f247 5030 	movw	r0, #30000	; 0x7530
 8004b0c:	f7ff fbba 	bl	8004284 <wait_ready>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d013      	beq.n	8004b3e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8004b16:	2300      	movs	r3, #0
 8004b18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004b1c:	e00f      	b.n	8004b3e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8004b1e:	2304      	movs	r3, #4
 8004b20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004b24:	e00c      	b.n	8004b40 <USER_SPI_ioctl+0x2c8>
		break;
 8004b26:	bf00      	nop
 8004b28:	e00a      	b.n	8004b40 <USER_SPI_ioctl+0x2c8>
		break;
 8004b2a:	bf00      	nop
 8004b2c:	e008      	b.n	8004b40 <USER_SPI_ioctl+0x2c8>
		break;
 8004b2e:	bf00      	nop
 8004b30:	e006      	b.n	8004b40 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004b32:	bf00      	nop
 8004b34:	e004      	b.n	8004b40 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004b36:	bf00      	nop
 8004b38:	e002      	b.n	8004b40 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004b3a:	bf00      	nop
 8004b3c:	e000      	b.n	8004b40 <USER_SPI_ioctl+0x2c8>
		break;
 8004b3e:	bf00      	nop
	}

	despiselect();
 8004b40:	f7ff fbc4 	bl	80042cc <despiselect>

	return res;
 8004b44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3730      	adds	r7, #48	; 0x30
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	20000020 	.word	0x20000020
 8004b54:	2000028c 	.word	0x2000028c

08004b58 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004b62:	79fb      	ldrb	r3, [r7, #7]
 8004b64:	4a08      	ldr	r2, [pc, #32]	; (8004b88 <disk_status+0x30>)
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	79fa      	ldrb	r2, [r7, #7]
 8004b70:	4905      	ldr	r1, [pc, #20]	; (8004b88 <disk_status+0x30>)
 8004b72:	440a      	add	r2, r1
 8004b74:	7a12      	ldrb	r2, [r2, #8]
 8004b76:	4610      	mov	r0, r2
 8004b78:	4798      	blx	r3
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	200002c0 	.word	0x200002c0

08004b8c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	4a0d      	ldr	r2, [pc, #52]	; (8004bd4 <disk_initialize+0x48>)
 8004b9e:	5cd3      	ldrb	r3, [r2, r3]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d111      	bne.n	8004bc8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004ba4:	79fb      	ldrb	r3, [r7, #7]
 8004ba6:	4a0b      	ldr	r2, [pc, #44]	; (8004bd4 <disk_initialize+0x48>)
 8004ba8:	2101      	movs	r1, #1
 8004baa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004bac:	79fb      	ldrb	r3, [r7, #7]
 8004bae:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <disk_initialize+0x48>)
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	79fa      	ldrb	r2, [r7, #7]
 8004bba:	4906      	ldr	r1, [pc, #24]	; (8004bd4 <disk_initialize+0x48>)
 8004bbc:	440a      	add	r2, r1
 8004bbe:	7a12      	ldrb	r2, [r2, #8]
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	4798      	blx	r3
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	200002c0 	.word	0x200002c0

08004bd8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004bd8:	b590      	push	{r4, r7, lr}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	607a      	str	r2, [r7, #4]
 8004be2:	603b      	str	r3, [r7, #0]
 8004be4:	4603      	mov	r3, r0
 8004be6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
 8004bea:	4a0a      	ldr	r2, [pc, #40]	; (8004c14 <disk_read+0x3c>)
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	689c      	ldr	r4, [r3, #8]
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	4a07      	ldr	r2, [pc, #28]	; (8004c14 <disk_read+0x3c>)
 8004bf8:	4413      	add	r3, r2
 8004bfa:	7a18      	ldrb	r0, [r3, #8]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	68b9      	ldr	r1, [r7, #8]
 8004c02:	47a0      	blx	r4
 8004c04:	4603      	mov	r3, r0
 8004c06:	75fb      	strb	r3, [r7, #23]
  return res;
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd90      	pop	{r4, r7, pc}
 8004c12:	bf00      	nop
 8004c14:	200002c0 	.word	0x200002c0

08004c18 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004c18:	b590      	push	{r4, r7, lr}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	607a      	str	r2, [r7, #4]
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	4603      	mov	r3, r0
 8004c26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	4a0a      	ldr	r2, [pc, #40]	; (8004c54 <disk_write+0x3c>)
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	68dc      	ldr	r4, [r3, #12]
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
 8004c36:	4a07      	ldr	r2, [pc, #28]	; (8004c54 <disk_write+0x3c>)
 8004c38:	4413      	add	r3, r2
 8004c3a:	7a18      	ldrb	r0, [r3, #8]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	47a0      	blx	r4
 8004c44:	4603      	mov	r3, r0
 8004c46:	75fb      	strb	r3, [r7, #23]
  return res;
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd90      	pop	{r4, r7, pc}
 8004c52:	bf00      	nop
 8004c54:	200002c0 	.word	0x200002c0

08004c58 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	603a      	str	r2, [r7, #0]
 8004c62:	71fb      	strb	r3, [r7, #7]
 8004c64:	460b      	mov	r3, r1
 8004c66:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <disk_ioctl+0x38>)
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	79fa      	ldrb	r2, [r7, #7]
 8004c76:	4906      	ldr	r1, [pc, #24]	; (8004c90 <disk_ioctl+0x38>)
 8004c78:	440a      	add	r2, r1
 8004c7a:	7a10      	ldrb	r0, [r2, #8]
 8004c7c:	79b9      	ldrb	r1, [r7, #6]
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	4798      	blx	r3
 8004c82:	4603      	mov	r3, r0
 8004c84:	73fb      	strb	r3, [r7, #15]
  return res;
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	200002c0 	.word	0x200002c0

08004c94 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004ca4:	89fb      	ldrh	r3, [r7, #14]
 8004ca6:	021b      	lsls	r3, r3, #8
 8004ca8:	b21a      	sxth	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	b21b      	sxth	r3, r3
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	b21b      	sxth	r3, r3
 8004cb4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004cb6:	89fb      	ldrh	r3, [r7, #14]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3303      	adds	r3, #3
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	021b      	lsls	r3, r3, #8
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	3202      	adds	r2, #2
 8004cdc:	7812      	ldrb	r2, [r2, #0]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	3201      	adds	r2, #1
 8004cea:	7812      	ldrb	r2, [r2, #0]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	7812      	ldrb	r2, [r2, #0]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
	return rv;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	887a      	ldrh	r2, [r7, #2]
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	887b      	ldrh	r3, [r7, #2]
 8004d24:	0a1b      	lsrs	r3, r3, #8
 8004d26:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	887a      	ldrh	r2, [r7, #2]
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	701a      	strb	r2, [r3, #0]
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	0a1b      	lsrs	r3, r3, #8
 8004d5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	607a      	str	r2, [r7, #4]
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	701a      	strb	r2, [r3, #0]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	0a1b      	lsrs	r3, r3, #8
 8004d6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	0a1b      	lsrs	r3, r3, #8
 8004d7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	607a      	str	r2, [r7, #4]
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	b2d2      	uxtb	r2, r2
 8004d8a:	701a      	strb	r2, [r3, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00d      	beq.n	8004dce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	1c53      	adds	r3, r2, #1
 8004db6:	613b      	str	r3, [r7, #16]
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	1c59      	adds	r1, r3, #1
 8004dbc:	6179      	str	r1, [r7, #20]
 8004dbe:	7812      	ldrb	r2, [r2, #0]
 8004dc0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	607b      	str	r3, [r7, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1f1      	bne.n	8004db2 <mem_cpy+0x1a>
	}
}
 8004dce:	bf00      	nop
 8004dd0:	371c      	adds	r7, #28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004dda:	b480      	push	{r7}
 8004ddc:	b087      	sub	sp, #28
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	60f8      	str	r0, [r7, #12]
 8004de2:	60b9      	str	r1, [r7, #8]
 8004de4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	617a      	str	r2, [r7, #20]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	607b      	str	r3, [r7, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1f3      	bne.n	8004dea <mem_set+0x10>
}
 8004e02:	bf00      	nop
 8004e04:	bf00      	nop
 8004e06:	371c      	adds	r7, #28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004e10:	b480      	push	{r7}
 8004e12:	b089      	sub	sp, #36	; 0x24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	61fb      	str	r3, [r7, #28]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004e24:	2300      	movs	r3, #0
 8004e26:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	61fa      	str	r2, [r7, #28]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	4619      	mov	r1, r3
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	61ba      	str	r2, [r7, #24]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	1acb      	subs	r3, r1, r3
 8004e3c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	607b      	str	r3, [r7, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <mem_cmp+0x40>
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0eb      	beq.n	8004e28 <mem_cmp+0x18>

	return r;
 8004e50:	697b      	ldr	r3, [r7, #20]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3724      	adds	r7, #36	; 0x24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004e5e:	b480      	push	{r7}
 8004e60:	b083      	sub	sp, #12
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
 8004e66:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004e68:	e002      	b.n	8004e70 <chk_chr+0x12>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	607b      	str	r3, [r7, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <chk_chr+0x26>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d1f2      	bne.n	8004e6a <chk_chr+0xc>
	return *str;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	781b      	ldrb	r3, [r3, #0]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	e029      	b.n	8004efc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004ea8:	4a27      	ldr	r2, [pc, #156]	; (8004f48 <chk_lock+0xb4>)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	4413      	add	r3, r2
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01d      	beq.n	8004ef2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004eb6:	4a24      	ldr	r2, [pc, #144]	; (8004f48 <chk_lock+0xb4>)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	4413      	add	r3, r2
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d116      	bne.n	8004ef6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004ec8:	4a1f      	ldr	r2, [pc, #124]	; (8004f48 <chk_lock+0xb4>)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	4413      	add	r3, r2
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d10c      	bne.n	8004ef6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004edc:	4a1a      	ldr	r2, [pc, #104]	; (8004f48 <chk_lock+0xb4>)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	4413      	add	r3, r2
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d102      	bne.n	8004ef6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004ef0:	e007      	b.n	8004f02 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d9d2      	bls.n	8004ea8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d109      	bne.n	8004f1c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d102      	bne.n	8004f14 <chk_lock+0x80>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d101      	bne.n	8004f18 <chk_lock+0x84>
 8004f14:	2300      	movs	r3, #0
 8004f16:	e010      	b.n	8004f3a <chk_lock+0xa6>
 8004f18:	2312      	movs	r3, #18
 8004f1a:	e00e      	b.n	8004f3a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d108      	bne.n	8004f34 <chk_lock+0xa0>
 8004f22:	4a09      	ldr	r2, [pc, #36]	; (8004f48 <chk_lock+0xb4>)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	4413      	add	r3, r2
 8004f2a:	330c      	adds	r3, #12
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f32:	d101      	bne.n	8004f38 <chk_lock+0xa4>
 8004f34:	2310      	movs	r3, #16
 8004f36:	e000      	b.n	8004f3a <chk_lock+0xa6>
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	200002a0 	.word	0x200002a0

08004f4c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004f52:	2300      	movs	r3, #0
 8004f54:	607b      	str	r3, [r7, #4]
 8004f56:	e002      	b.n	8004f5e <enq_lock+0x12>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	607b      	str	r3, [r7, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d806      	bhi.n	8004f72 <enq_lock+0x26>
 8004f64:	4a09      	ldr	r2, [pc, #36]	; (8004f8c <enq_lock+0x40>)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	4413      	add	r3, r2
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f2      	bne.n	8004f58 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	bf14      	ite	ne
 8004f78:	2301      	movne	r3, #1
 8004f7a:	2300      	moveq	r3, #0
 8004f7c:	b2db      	uxtb	r3, r3
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	200002a0 	.word	0x200002a0

08004f90 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	e01f      	b.n	8004fe0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004fa0:	4a41      	ldr	r2, [pc, #260]	; (80050a8 <inc_lock+0x118>)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	4413      	add	r3, r2
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d113      	bne.n	8004fda <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004fb2:	4a3d      	ldr	r2, [pc, #244]	; (80050a8 <inc_lock+0x118>)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	4413      	add	r3, r2
 8004fba:	3304      	adds	r3, #4
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d109      	bne.n	8004fda <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004fc6:	4a38      	ldr	r2, [pc, #224]	; (80050a8 <inc_lock+0x118>)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	4413      	add	r3, r2
 8004fce:	3308      	adds	r3, #8
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d006      	beq.n	8004fe8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d9dc      	bls.n	8004fa0 <inc_lock+0x10>
 8004fe6:	e000      	b.n	8004fea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004fe8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d132      	bne.n	8005056 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	e002      	b.n	8004ffc <inc_lock+0x6c>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d806      	bhi.n	8005010 <inc_lock+0x80>
 8005002:	4a29      	ldr	r2, [pc, #164]	; (80050a8 <inc_lock+0x118>)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	011b      	lsls	r3, r3, #4
 8005008:	4413      	add	r3, r2
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1f2      	bne.n	8004ff6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d101      	bne.n	800501a <inc_lock+0x8a>
 8005016:	2300      	movs	r3, #0
 8005018:	e040      	b.n	800509c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	4922      	ldr	r1, [pc, #136]	; (80050a8 <inc_lock+0x118>)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	440b      	add	r3, r1
 8005026:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	491e      	ldr	r1, [pc, #120]	; (80050a8 <inc_lock+0x118>)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	440b      	add	r3, r1
 8005034:	3304      	adds	r3, #4
 8005036:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	695a      	ldr	r2, [r3, #20]
 800503c:	491a      	ldr	r1, [pc, #104]	; (80050a8 <inc_lock+0x118>)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	440b      	add	r3, r1
 8005044:	3308      	adds	r3, #8
 8005046:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005048:	4a17      	ldr	r2, [pc, #92]	; (80050a8 <inc_lock+0x118>)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	4413      	add	r3, r2
 8005050:	330c      	adds	r3, #12
 8005052:	2200      	movs	r2, #0
 8005054:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d009      	beq.n	8005070 <inc_lock+0xe0>
 800505c:	4a12      	ldr	r2, [pc, #72]	; (80050a8 <inc_lock+0x118>)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	4413      	add	r3, r2
 8005064:	330c      	adds	r3, #12
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <inc_lock+0xe0>
 800506c:	2300      	movs	r3, #0
 800506e:	e015      	b.n	800509c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d108      	bne.n	8005088 <inc_lock+0xf8>
 8005076:	4a0c      	ldr	r2, [pc, #48]	; (80050a8 <inc_lock+0x118>)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	4413      	add	r3, r2
 800507e:	330c      	adds	r3, #12
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	3301      	adds	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	e001      	b.n	800508c <inc_lock+0xfc>
 8005088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800508c:	4906      	ldr	r1, [pc, #24]	; (80050a8 <inc_lock+0x118>)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	440b      	add	r3, r1
 8005094:	330c      	adds	r3, #12
 8005096:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3301      	adds	r3, #1
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	200002a0 	.word	0x200002a0

080050ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	607b      	str	r3, [r7, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d825      	bhi.n	800510c <dec_lock+0x60>
		n = Files[i].ctr;
 80050c0:	4a17      	ldr	r2, [pc, #92]	; (8005120 <dec_lock+0x74>)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	4413      	add	r3, r2
 80050c8:	330c      	adds	r3, #12
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80050ce:	89fb      	ldrh	r3, [r7, #14]
 80050d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d4:	d101      	bne.n	80050da <dec_lock+0x2e>
 80050d6:	2300      	movs	r3, #0
 80050d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80050da:	89fb      	ldrh	r3, [r7, #14]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <dec_lock+0x3a>
 80050e0:	89fb      	ldrh	r3, [r7, #14]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80050e6:	4a0e      	ldr	r2, [pc, #56]	; (8005120 <dec_lock+0x74>)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	4413      	add	r3, r2
 80050ee:	330c      	adds	r3, #12
 80050f0:	89fa      	ldrh	r2, [r7, #14]
 80050f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80050f4:	89fb      	ldrh	r3, [r7, #14]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d105      	bne.n	8005106 <dec_lock+0x5a>
 80050fa:	4a09      	ldr	r2, [pc, #36]	; (8005120 <dec_lock+0x74>)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	4413      	add	r3, r2
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	737b      	strb	r3, [r7, #13]
 800510a:	e001      	b.n	8005110 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800510c:	2302      	movs	r3, #2
 800510e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005110:	7b7b      	ldrb	r3, [r7, #13]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	200002a0 	.word	0x200002a0

08005124 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800512c:	2300      	movs	r3, #0
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	e010      	b.n	8005154 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005132:	4a0d      	ldr	r2, [pc, #52]	; (8005168 <clear_lock+0x44>)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	4413      	add	r3, r2
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	429a      	cmp	r2, r3
 8005140:	d105      	bne.n	800514e <clear_lock+0x2a>
 8005142:	4a09      	ldr	r2, [pc, #36]	; (8005168 <clear_lock+0x44>)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	4413      	add	r3, r2
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3301      	adds	r3, #1
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d9eb      	bls.n	8005132 <clear_lock+0xe>
	}
}
 800515a:	bf00      	nop
 800515c:	bf00      	nop
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	200002a0 	.word	0x200002a0

0800516c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	78db      	ldrb	r3, [r3, #3]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d034      	beq.n	80051ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005184:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	7858      	ldrb	r0, [r3, #1]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005190:	2301      	movs	r3, #1
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	f7ff fd40 	bl	8004c18 <disk_write>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800519e:	2301      	movs	r3, #1
 80051a0:	73fb      	strb	r3, [r7, #15]
 80051a2:	e022      	b.n	80051ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	1ad2      	subs	r2, r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d217      	bcs.n	80051ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	789b      	ldrb	r3, [r3, #2]
 80051be:	613b      	str	r3, [r7, #16]
 80051c0:	e010      	b.n	80051e4 <sync_window+0x78>
					wsect += fs->fsize;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	4413      	add	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	7858      	ldrb	r0, [r3, #1]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80051d6:	2301      	movs	r3, #1
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	f7ff fd1d 	bl	8004c18 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	3b01      	subs	r3, #1
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d8eb      	bhi.n	80051c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	429a      	cmp	r2, r3
 800520a:	d01b      	beq.n	8005244 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7ff ffad 	bl	800516c <sync_window>
 8005212:	4603      	mov	r3, r0
 8005214:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d113      	bne.n	8005244 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	7858      	ldrb	r0, [r3, #1]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005226:	2301      	movs	r3, #1
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	f7ff fcd5 	bl	8004bd8 <disk_read>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d004      	beq.n	800523e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005238:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800523a:	2301      	movs	r3, #1
 800523c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff ff87 	bl	800516c <sync_window>
 800525e:	4603      	mov	r3, r0
 8005260:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d158      	bne.n	800531a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b03      	cmp	r3, #3
 800526e:	d148      	bne.n	8005302 <sync_fs+0xb2>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	791b      	ldrb	r3, [r3, #4]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d144      	bne.n	8005302 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3330      	adds	r3, #48	; 0x30
 800527c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005280:	2100      	movs	r1, #0
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff fda9 	bl	8004dda <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3330      	adds	r3, #48	; 0x30
 800528c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005290:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005294:	4618      	mov	r0, r3
 8005296:	f7ff fd38 	bl	8004d0a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3330      	adds	r3, #48	; 0x30
 800529e:	4921      	ldr	r1, [pc, #132]	; (8005324 <sync_fs+0xd4>)
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff fd4d 	bl	8004d40 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3330      	adds	r3, #48	; 0x30
 80052aa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80052ae:	491e      	ldr	r1, [pc, #120]	; (8005328 <sync_fs+0xd8>)
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff fd45 	bl	8004d40 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3330      	adds	r3, #48	; 0x30
 80052ba:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	4619      	mov	r1, r3
 80052c4:	4610      	mov	r0, r2
 80052c6:	f7ff fd3b 	bl	8004d40 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3330      	adds	r3, #48	; 0x30
 80052ce:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	4619      	mov	r1, r3
 80052d8:	4610      	mov	r0, r2
 80052da:	f7ff fd31 	bl	8004d40 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	7858      	ldrb	r0, [r3, #1]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f6:	2301      	movs	r3, #1
 80052f8:	f7ff fc8e 	bl	8004c18 <disk_write>
			fs->fsi_flag = 0;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	785b      	ldrb	r3, [r3, #1]
 8005306:	2200      	movs	r2, #0
 8005308:	2100      	movs	r1, #0
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff fca4 	bl	8004c58 <disk_ioctl>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <sync_fs+0xca>
 8005316:	2301      	movs	r3, #1
 8005318:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800531a:	7bfb      	ldrb	r3, [r7, #15]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	41615252 	.word	0x41615252
 8005328:	61417272 	.word	0x61417272

0800532c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	3b02      	subs	r3, #2
 800533a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	3b02      	subs	r3, #2
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	429a      	cmp	r2, r3
 8005346:	d301      	bcc.n	800534c <clust2sect+0x20>
 8005348:	2300      	movs	r3, #0
 800534a:	e008      	b.n	800535e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	895b      	ldrh	r3, [r3, #10]
 8005350:	461a      	mov	r2, r3
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	fb03 f202 	mul.w	r2, r3, r2
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535c:	4413      	add	r3, r2
}
 800535e:	4618      	mov	r0, r3
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b086      	sub	sp, #24
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d904      	bls.n	800538a <get_fat+0x20>
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	429a      	cmp	r2, r3
 8005388:	d302      	bcc.n	8005390 <get_fat+0x26>
		val = 1;	/* Internal error */
 800538a:	2301      	movs	r3, #1
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	e08f      	b.n	80054b0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005390:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005394:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b03      	cmp	r3, #3
 800539c:	d062      	beq.n	8005464 <get_fat+0xfa>
 800539e:	2b03      	cmp	r3, #3
 80053a0:	dc7c      	bgt.n	800549c <get_fat+0x132>
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d002      	beq.n	80053ac <get_fat+0x42>
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d042      	beq.n	8005430 <get_fat+0xc6>
 80053aa:	e077      	b.n	800549c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	085b      	lsrs	r3, r3, #1
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	6a1a      	ldr	r2, [r3, #32]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	0a5b      	lsrs	r3, r3, #9
 80053c2:	4413      	add	r3, r2
 80053c4:	4619      	mov	r1, r3
 80053c6:	6938      	ldr	r0, [r7, #16]
 80053c8:	f7ff ff14 	bl	80051f4 <move_window>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d167      	bne.n	80054a2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	60fa      	str	r2, [r7, #12]
 80053d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4413      	add	r3, r2
 80053e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	6a1a      	ldr	r2, [r3, #32]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	0a5b      	lsrs	r3, r3, #9
 80053ee:	4413      	add	r3, r2
 80053f0:	4619      	mov	r1, r3
 80053f2:	6938      	ldr	r0, [r7, #16]
 80053f4:	f7ff fefe 	bl	80051f4 <move_window>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d153      	bne.n	80054a6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	4413      	add	r3, r2
 8005408:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	461a      	mov	r2, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4313      	orrs	r3, r2
 8005414:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <get_fat+0xbc>
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	091b      	lsrs	r3, r3, #4
 8005424:	e002      	b.n	800542c <get_fat+0xc2>
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800542c:	617b      	str	r3, [r7, #20]
			break;
 800542e:	e03f      	b.n	80054b0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	6a1a      	ldr	r2, [r3, #32]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	0a1b      	lsrs	r3, r3, #8
 8005438:	4413      	add	r3, r2
 800543a:	4619      	mov	r1, r3
 800543c:	6938      	ldr	r0, [r7, #16]
 800543e:	f7ff fed9 	bl	80051f4 <move_window>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d130      	bne.n	80054aa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005456:	4413      	add	r3, r2
 8005458:	4618      	mov	r0, r3
 800545a:	f7ff fc1b 	bl	8004c94 <ld_word>
 800545e:	4603      	mov	r3, r0
 8005460:	617b      	str	r3, [r7, #20]
			break;
 8005462:	e025      	b.n	80054b0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	6a1a      	ldr	r2, [r3, #32]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	09db      	lsrs	r3, r3, #7
 800546c:	4413      	add	r3, r2
 800546e:	4619      	mov	r1, r3
 8005470:	6938      	ldr	r0, [r7, #16]
 8005472:	f7ff febf 	bl	80051f4 <move_window>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d118      	bne.n	80054ae <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800548a:	4413      	add	r3, r2
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff fc19 	bl	8004cc4 <ld_dword>
 8005492:	4603      	mov	r3, r0
 8005494:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005498:	617b      	str	r3, [r7, #20]
			break;
 800549a:	e009      	b.n	80054b0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800549c:	2301      	movs	r3, #1
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	e006      	b.n	80054b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054a2:	bf00      	nop
 80054a4:	e004      	b.n	80054b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054a6:	bf00      	nop
 80054a8:	e002      	b.n	80054b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80054aa:	bf00      	nop
 80054ac:	e000      	b.n	80054b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80054ae:	bf00      	nop
		}
	}

	return val;
 80054b0:	697b      	ldr	r3, [r7, #20]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80054ba:	b590      	push	{r4, r7, lr}
 80054bc:	b089      	sub	sp, #36	; 0x24
 80054be:	af00      	add	r7, sp, #0
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	60b9      	str	r1, [r7, #8]
 80054c4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80054c6:	2302      	movs	r3, #2
 80054c8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	f240 80d9 	bls.w	8005684 <put_fat+0x1ca>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	429a      	cmp	r2, r3
 80054da:	f080 80d3 	bcs.w	8005684 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	f000 8096 	beq.w	8005614 <put_fat+0x15a>
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	f300 80cb 	bgt.w	8005684 <put_fat+0x1ca>
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d002      	beq.n	80054f8 <put_fat+0x3e>
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d06e      	beq.n	80055d4 <put_fat+0x11a>
 80054f6:	e0c5      	b.n	8005684 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	61bb      	str	r3, [r7, #24]
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	085b      	lsrs	r3, r3, #1
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	4413      	add	r3, r2
 8005504:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a1a      	ldr	r2, [r3, #32]
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	0a5b      	lsrs	r3, r3, #9
 800550e:	4413      	add	r3, r2
 8005510:	4619      	mov	r1, r3
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f7ff fe6e 	bl	80051f4 <move_window>
 8005518:	4603      	mov	r3, r0
 800551a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800551c:	7ffb      	ldrb	r3, [r7, #31]
 800551e:	2b00      	cmp	r3, #0
 8005520:	f040 80a9 	bne.w	8005676 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	1c59      	adds	r1, r3, #1
 800552e:	61b9      	str	r1, [r7, #24]
 8005530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005534:	4413      	add	r3, r2
 8005536:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00d      	beq.n	800555e <put_fat+0xa4>
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	b25b      	sxtb	r3, r3
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	b25a      	sxtb	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	b2db      	uxtb	r3, r3
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	b25b      	sxtb	r3, r3
 8005556:	4313      	orrs	r3, r2
 8005558:	b25b      	sxtb	r3, r3
 800555a:	b2db      	uxtb	r3, r3
 800555c:	e001      	b.n	8005562 <put_fat+0xa8>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	b2db      	uxtb	r3, r3
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2201      	movs	r2, #1
 800556a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a1a      	ldr	r2, [r3, #32]
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	0a5b      	lsrs	r3, r3, #9
 8005574:	4413      	add	r3, r2
 8005576:	4619      	mov	r1, r3
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f7ff fe3b 	bl	80051f4 <move_window>
 800557e:	4603      	mov	r3, r0
 8005580:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005582:	7ffb      	ldrb	r3, [r7, #31]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d178      	bne.n	800567a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005594:	4413      	add	r3, r2
 8005596:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <put_fat+0xf0>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	091b      	lsrs	r3, r3, #4
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	e00e      	b.n	80055c8 <put_fat+0x10e>
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	b25b      	sxtb	r3, r3
 80055b0:	f023 030f 	bic.w	r3, r3, #15
 80055b4:	b25a      	sxtb	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	0a1b      	lsrs	r3, r3, #8
 80055ba:	b25b      	sxtb	r3, r3
 80055bc:	f003 030f 	and.w	r3, r3, #15
 80055c0:	b25b      	sxtb	r3, r3
 80055c2:	4313      	orrs	r3, r2
 80055c4:	b25b      	sxtb	r3, r3
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	70da      	strb	r2, [r3, #3]
			break;
 80055d2:	e057      	b.n	8005684 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a1a      	ldr	r2, [r3, #32]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	0a1b      	lsrs	r3, r3, #8
 80055dc:	4413      	add	r3, r2
 80055de:	4619      	mov	r1, r3
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f7ff fe07 	bl	80051f4 <move_window>
 80055e6:	4603      	mov	r3, r0
 80055e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055ea:	7ffb      	ldrb	r3, [r7, #31]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d146      	bne.n	800567e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80055fe:	4413      	add	r3, r2
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	b292      	uxth	r2, r2
 8005604:	4611      	mov	r1, r2
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff fb7f 	bl	8004d0a <st_word>
			fs->wflag = 1;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2201      	movs	r2, #1
 8005610:	70da      	strb	r2, [r3, #3]
			break;
 8005612:	e037      	b.n	8005684 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a1a      	ldr	r2, [r3, #32]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	09db      	lsrs	r3, r3, #7
 800561c:	4413      	add	r3, r2
 800561e:	4619      	mov	r1, r3
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f7ff fde7 	bl	80051f4 <move_window>
 8005626:	4603      	mov	r3, r0
 8005628:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800562a:	7ffb      	ldrb	r3, [r7, #31]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d128      	bne.n	8005682 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005644:	4413      	add	r3, r2
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff fb3c 	bl	8004cc4 <ld_dword>
 800564c:	4603      	mov	r3, r0
 800564e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005652:	4323      	orrs	r3, r4
 8005654:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005664:	4413      	add	r3, r2
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff fb69 	bl	8004d40 <st_dword>
			fs->wflag = 1;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2201      	movs	r2, #1
 8005672:	70da      	strb	r2, [r3, #3]
			break;
 8005674:	e006      	b.n	8005684 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005676:	bf00      	nop
 8005678:	e004      	b.n	8005684 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800567a:	bf00      	nop
 800567c:	e002      	b.n	8005684 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800567e:	bf00      	nop
 8005680:	e000      	b.n	8005684 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8005682:	bf00      	nop
		}
	}
	return res;
 8005684:	7ffb      	ldrb	r3, [r7, #31]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3724      	adds	r7, #36	; 0x24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd90      	pop	{r4, r7, pc}

0800568e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b088      	sub	sp, #32
 8005692:	af00      	add	r7, sp, #0
 8005694:	60f8      	str	r0, [r7, #12]
 8005696:	60b9      	str	r1, [r7, #8]
 8005698:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d904      	bls.n	80056b4 <remove_chain+0x26>
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d301      	bcc.n	80056b8 <remove_chain+0x2a>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e04b      	b.n	8005750 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00c      	beq.n	80056d8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80056be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	69b8      	ldr	r0, [r7, #24]
 80056c6:	f7ff fef8 	bl	80054ba <put_fat>
 80056ca:	4603      	mov	r3, r0
 80056cc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80056ce:	7ffb      	ldrb	r3, [r7, #31]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <remove_chain+0x4a>
 80056d4:	7ffb      	ldrb	r3, [r7, #31]
 80056d6:	e03b      	b.n	8005750 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80056d8:	68b9      	ldr	r1, [r7, #8]
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f7ff fe45 	bl	800536a <get_fat>
 80056e0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d031      	beq.n	800574c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d101      	bne.n	80056f2 <remove_chain+0x64>
 80056ee:	2302      	movs	r3, #2
 80056f0:	e02e      	b.n	8005750 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056f8:	d101      	bne.n	80056fe <remove_chain+0x70>
 80056fa:	2301      	movs	r3, #1
 80056fc:	e028      	b.n	8005750 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80056fe:	2200      	movs	r2, #0
 8005700:	68b9      	ldr	r1, [r7, #8]
 8005702:	69b8      	ldr	r0, [r7, #24]
 8005704:	f7ff fed9 	bl	80054ba <put_fat>
 8005708:	4603      	mov	r3, r0
 800570a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800570c:	7ffb      	ldrb	r3, [r7, #31]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <remove_chain+0x88>
 8005712:	7ffb      	ldrb	r3, [r7, #31]
 8005714:	e01c      	b.n	8005750 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	691a      	ldr	r2, [r3, #16]
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	3b02      	subs	r3, #2
 8005720:	429a      	cmp	r2, r3
 8005722:	d20b      	bcs.n	800573c <remove_chain+0xae>
			fs->free_clst++;
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	791b      	ldrb	r3, [r3, #4]
 8005732:	f043 0301 	orr.w	r3, r3, #1
 8005736:	b2da      	uxtb	r2, r3
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	429a      	cmp	r2, r3
 8005748:	d3c6      	bcc.n	80056d8 <remove_chain+0x4a>
 800574a:	e000      	b.n	800574e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800574c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3720      	adds	r7, #32
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10d      	bne.n	800578a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d004      	beq.n	8005784 <create_chain+0x2c>
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	429a      	cmp	r2, r3
 8005782:	d31b      	bcc.n	80057bc <create_chain+0x64>
 8005784:	2301      	movs	r3, #1
 8005786:	61bb      	str	r3, [r7, #24]
 8005788:	e018      	b.n	80057bc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800578a:	6839      	ldr	r1, [r7, #0]
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff fdec 	bl	800536a <get_fat>
 8005792:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d801      	bhi.n	800579e <create_chain+0x46>
 800579a:	2301      	movs	r3, #1
 800579c:	e070      	b.n	8005880 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057a4:	d101      	bne.n	80057aa <create_chain+0x52>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	e06a      	b.n	8005880 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d201      	bcs.n	80057b8 <create_chain+0x60>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	e063      	b.n	8005880 <create_chain+0x128>
		scl = clst;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	3301      	adds	r3, #1
 80057c4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	69fa      	ldr	r2, [r7, #28]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d307      	bcc.n	80057e0 <create_chain+0x88>
				ncl = 2;
 80057d0:	2302      	movs	r3, #2
 80057d2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d901      	bls.n	80057e0 <create_chain+0x88>
 80057dc:	2300      	movs	r3, #0
 80057de:	e04f      	b.n	8005880 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80057e0:	69f9      	ldr	r1, [r7, #28]
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7ff fdc1 	bl	800536a <get_fat>
 80057e8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00e      	beq.n	800580e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d003      	beq.n	80057fe <create_chain+0xa6>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057fc:	d101      	bne.n	8005802 <create_chain+0xaa>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	e03e      	b.n	8005880 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005802:	69fa      	ldr	r2, [r7, #28]
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	429a      	cmp	r2, r3
 8005808:	d1da      	bne.n	80057c0 <create_chain+0x68>
 800580a:	2300      	movs	r3, #0
 800580c:	e038      	b.n	8005880 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800580e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005810:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005814:	69f9      	ldr	r1, [r7, #28]
 8005816:	6938      	ldr	r0, [r7, #16]
 8005818:	f7ff fe4f 	bl	80054ba <put_fat>
 800581c:	4603      	mov	r3, r0
 800581e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005820:	7dfb      	ldrb	r3, [r7, #23]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d109      	bne.n	800583a <create_chain+0xe2>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d006      	beq.n	800583a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	6839      	ldr	r1, [r7, #0]
 8005830:	6938      	ldr	r0, [r7, #16]
 8005832:	f7ff fe42 	bl	80054ba <put_fat>
 8005836:	4603      	mov	r3, r0
 8005838:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800583a:	7dfb      	ldrb	r3, [r7, #23]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d116      	bne.n	800586e <create_chain+0x116>
		fs->last_clst = ncl;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	691a      	ldr	r2, [r3, #16]
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	3b02      	subs	r3, #2
 8005850:	429a      	cmp	r2, r3
 8005852:	d804      	bhi.n	800585e <create_chain+0x106>
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	1e5a      	subs	r2, r3, #1
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	791b      	ldrb	r3, [r3, #4]
 8005862:	f043 0301 	orr.w	r3, r3, #1
 8005866:	b2da      	uxtb	r2, r3
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	711a      	strb	r2, [r3, #4]
 800586c:	e007      	b.n	800587e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800586e:	7dfb      	ldrb	r3, [r7, #23]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d102      	bne.n	800587a <create_chain+0x122>
 8005874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005878:	e000      	b.n	800587c <create_chain+0x124>
 800587a:	2301      	movs	r3, #1
 800587c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800587e:	69fb      	ldr	r3, [r7, #28]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3720      	adds	r7, #32
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	3304      	adds	r3, #4
 800589e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	0a5b      	lsrs	r3, r3, #9
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	8952      	ldrh	r2, [r2, #10]
 80058a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80058ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1d1a      	adds	r2, r3, #4
 80058b2:	613a      	str	r2, [r7, #16]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <clmt_clust+0x3a>
 80058be:	2300      	movs	r3, #0
 80058c0:	e010      	b.n	80058e4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d307      	bcc.n	80058da <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	617b      	str	r3, [r7, #20]
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	3304      	adds	r3, #4
 80058d6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80058d8:	e7e9      	b.n	80058ae <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80058da:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	4413      	add	r3, r2
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	371c      	adds	r7, #28
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005906:	d204      	bcs.n	8005912 <dir_sdi+0x22>
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	f003 031f 	and.w	r3, r3, #31
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005912:	2302      	movs	r3, #2
 8005914:	e063      	b.n	80059de <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d106      	bne.n	8005936 <dir_sdi+0x46>
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	2b02      	cmp	r3, #2
 800592e:	d902      	bls.n	8005936 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10c      	bne.n	8005956 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	095b      	lsrs	r3, r3, #5
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	8912      	ldrh	r2, [r2, #8]
 8005944:	4293      	cmp	r3, r2
 8005946:	d301      	bcc.n	800594c <dir_sdi+0x5c>
 8005948:	2302      	movs	r3, #2
 800594a:	e048      	b.n	80059de <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	61da      	str	r2, [r3, #28]
 8005954:	e029      	b.n	80059aa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	895b      	ldrh	r3, [r3, #10]
 800595a:	025b      	lsls	r3, r3, #9
 800595c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800595e:	e019      	b.n	8005994 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6979      	ldr	r1, [r7, #20]
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff fd00 	bl	800536a <get_fat>
 800596a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005972:	d101      	bne.n	8005978 <dir_sdi+0x88>
 8005974:	2301      	movs	r3, #1
 8005976:	e032      	b.n	80059de <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d904      	bls.n	8005988 <dir_sdi+0x98>
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	429a      	cmp	r2, r3
 8005986:	d301      	bcc.n	800598c <dir_sdi+0x9c>
 8005988:	2302      	movs	r3, #2
 800598a:	e028      	b.n	80059de <dir_sdi+0xee>
			ofs -= csz;
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	429a      	cmp	r2, r3
 800599a:	d2e1      	bcs.n	8005960 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800599c:	6979      	ldr	r1, [r7, #20]
 800599e:	6938      	ldr	r0, [r7, #16]
 80059a0:	f7ff fcc4 	bl	800532c <clust2sect>
 80059a4:	4602      	mov	r2, r0
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <dir_sdi+0xcc>
 80059b8:	2302      	movs	r3, #2
 80059ba:	e010      	b.n	80059de <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69da      	ldr	r2, [r3, #28]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	0a5b      	lsrs	r3, r3, #9
 80059c4:	441a      	add	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d6:	441a      	add	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b086      	sub	sp, #24
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	3320      	adds	r3, #32
 80059fc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <dir_next+0x28>
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a0c:	d301      	bcc.n	8005a12 <dir_next+0x2c>
 8005a0e:	2304      	movs	r3, #4
 8005a10:	e0aa      	b.n	8005b68 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f040 8098 	bne.w	8005b4e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10b      	bne.n	8005a48 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	095b      	lsrs	r3, r3, #5
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	8912      	ldrh	r2, [r2, #8]
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	f0c0 8088 	bcc.w	8005b4e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	61da      	str	r2, [r3, #28]
 8005a44:	2304      	movs	r3, #4
 8005a46:	e08f      	b.n	8005b68 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	0a5b      	lsrs	r3, r3, #9
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	8952      	ldrh	r2, [r2, #10]
 8005a50:	3a01      	subs	r2, #1
 8005a52:	4013      	ands	r3, r2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d17a      	bne.n	8005b4e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4610      	mov	r0, r2
 8005a62:	f7ff fc82 	bl	800536a <get_fat>
 8005a66:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d801      	bhi.n	8005a72 <dir_next+0x8c>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e07a      	b.n	8005b68 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a78:	d101      	bne.n	8005a7e <dir_next+0x98>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e074      	b.n	8005b68 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d358      	bcc.n	8005b3a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d104      	bne.n	8005a98 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	61da      	str	r2, [r3, #28]
 8005a94:	2304      	movs	r3, #4
 8005a96:	e067      	b.n	8005b68 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	f7ff fe59 	bl	8005758 <create_chain>
 8005aa6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <dir_next+0xcc>
 8005aae:	2307      	movs	r3, #7
 8005ab0:	e05a      	b.n	8005b68 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <dir_next+0xd6>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e055      	b.n	8005b68 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ac2:	d101      	bne.n	8005ac8 <dir_next+0xe2>
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e04f      	b.n	8005b68 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f7ff fb4f 	bl	800516c <sync_window>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <dir_next+0xf2>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e047      	b.n	8005b68 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	3330      	adds	r3, #48	; 0x30
 8005adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff f979 	bl	8004dda <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005ae8:	2300      	movs	r3, #0
 8005aea:	613b      	str	r3, [r7, #16]
 8005aec:	6979      	ldr	r1, [r7, #20]
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f7ff fc1c 	bl	800532c <clust2sect>
 8005af4:	4602      	mov	r2, r0
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	62da      	str	r2, [r3, #44]	; 0x2c
 8005afa:	e012      	b.n	8005b22 <dir_next+0x13c>
						fs->wflag = 1;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2201      	movs	r2, #1
 8005b00:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f7ff fb32 	bl	800516c <sync_window>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <dir_next+0x12c>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e02a      	b.n	8005b68 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	3301      	adds	r3, #1
 8005b16:	613b      	str	r3, [r7, #16]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	62da      	str	r2, [r3, #44]	; 0x2c
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	895b      	ldrh	r3, [r3, #10]
 8005b26:	461a      	mov	r2, r3
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d3e6      	bcc.n	8005afc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	1ad2      	subs	r2, r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005b40:	6979      	ldr	r1, [r7, #20]
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f7ff fbf2 	bl	800532c <clust2sect>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b60:	441a      	add	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005b80:	2100      	movs	r1, #0
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7ff feb4 	bl	80058f0 <dir_sdi>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005b8c:	7dfb      	ldrb	r3, [r7, #23]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d12b      	bne.n	8005bea <dir_alloc+0x7a>
		n = 0;
 8005b92:	2300      	movs	r3, #0
 8005b94:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f7ff fb29 	bl	80051f4 <move_window>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005ba6:	7dfb      	ldrb	r3, [r7, #23]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d11d      	bne.n	8005be8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2be5      	cmp	r3, #229	; 0xe5
 8005bb4:	d004      	beq.n	8005bc0 <dir_alloc+0x50>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d107      	bne.n	8005bd0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	613b      	str	r3, [r7, #16]
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d102      	bne.n	8005bd4 <dir_alloc+0x64>
 8005bce:	e00c      	b.n	8005bea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7ff ff05 	bl	80059e6 <dir_next>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005be0:	7dfb      	ldrb	r3, [r7, #23]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0d7      	beq.n	8005b96 <dir_alloc+0x26>
 8005be6:	e000      	b.n	8005bea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005be8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005bea:	7dfb      	ldrb	r3, [r7, #23]
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d101      	bne.n	8005bf4 <dir_alloc+0x84>
 8005bf0:	2307      	movs	r3, #7
 8005bf2:	75fb      	strb	r3, [r7, #23]
	return res;
 8005bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b084      	sub	sp, #16
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	331a      	adds	r3, #26
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff f841 	bl	8004c94 <ld_word>
 8005c12:	4603      	mov	r3, r0
 8005c14:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d109      	bne.n	8005c32 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	3314      	adds	r3, #20
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7ff f836 	bl	8004c94 <ld_word>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	041b      	lsls	r3, r3, #16
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005c32:	68fb      	ldr	r3, [r7, #12]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	331a      	adds	r3, #26
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	b292      	uxth	r2, r2
 8005c50:	4611      	mov	r1, r2
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7ff f859 	bl	8004d0a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b03      	cmp	r3, #3
 8005c5e:	d109      	bne.n	8005c74 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f103 0214 	add.w	r2, r3, #20
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	0c1b      	lsrs	r3, r3, #16
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4610      	mov	r0, r2
 8005c70:	f7ff f84b 	bl	8004d0a <st_word>
	}
}
 8005c74:	bf00      	nop
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff fe2f 	bl	80058f0 <dir_sdi>
 8005c92:	4603      	mov	r3, r0
 8005c94:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <dir_find+0x24>
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
 8005c9e:	e03e      	b.n	8005d1e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	6938      	ldr	r0, [r7, #16]
 8005ca8:	f7ff faa4 	bl	80051f4 <move_window>
 8005cac:	4603      	mov	r3, r0
 8005cae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005cb0:	7dfb      	ldrb	r3, [r7, #23]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d12f      	bne.n	8005d16 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d102      	bne.n	8005cca <dir_find+0x4e>
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	75fb      	strb	r3, [r7, #23]
 8005cc8:	e028      	b.n	8005d1c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	330b      	adds	r3, #11
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	330b      	adds	r3, #11
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	f003 0308 	and.w	r3, r3, #8
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10a      	bne.n	8005d02 <dir_find+0x86>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a18      	ldr	r0, [r3, #32]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3324      	adds	r3, #36	; 0x24
 8005cf4:	220b      	movs	r2, #11
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	f7ff f88a 	bl	8004e10 <mem_cmp>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00b      	beq.n	8005d1a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005d02:	2100      	movs	r1, #0
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff fe6e 	bl	80059e6 <dir_next>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005d0e:	7dfb      	ldrb	r3, [r7, #23]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d0c5      	beq.n	8005ca0 <dir_find+0x24>
 8005d14:	e002      	b.n	8005d1c <dir_find+0xa0>
		if (res != FR_OK) break;
 8005d16:	bf00      	nop
 8005d18:	e000      	b.n	8005d1c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005d1a:	bf00      	nop

	return res;
 8005d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b084      	sub	sp, #16
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005d34:	2101      	movs	r1, #1
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff ff1a 	bl	8005b70 <dir_alloc>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d11c      	bne.n	8005d80 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	68b8      	ldr	r0, [r7, #8]
 8005d4e:	f7ff fa51 	bl	80051f4 <move_window>
 8005d52:	4603      	mov	r3, r0
 8005d54:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d111      	bne.n	8005d80 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	2220      	movs	r2, #32
 8005d62:	2100      	movs	r1, #0
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7ff f838 	bl	8004dda <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a18      	ldr	r0, [r3, #32]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	3324      	adds	r3, #36	; 0x24
 8005d72:	220b      	movs	r2, #11
 8005d74:	4619      	mov	r1, r3
 8005d76:	f7ff f80f 	bl	8004d98 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b088      	sub	sp, #32
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3324      	adds	r3, #36	; 0x24
 8005da0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005da2:	220b      	movs	r2, #11
 8005da4:	2120      	movs	r1, #32
 8005da6:	68b8      	ldr	r0, [r7, #8]
 8005da8:	f7ff f817 	bl	8004dda <mem_set>
	si = i = 0; ni = 8;
 8005dac:	2300      	movs	r3, #0
 8005dae:	613b      	str	r3, [r7, #16]
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	61fb      	str	r3, [r7, #28]
 8005db4:	2308      	movs	r3, #8
 8005db6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	61fa      	str	r2, [r7, #28]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005dc6:	7efb      	ldrb	r3, [r7, #27]
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d94e      	bls.n	8005e6a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005dcc:	7efb      	ldrb	r3, [r7, #27]
 8005dce:	2b2f      	cmp	r3, #47	; 0x2f
 8005dd0:	d006      	beq.n	8005de0 <create_name+0x54>
 8005dd2:	7efb      	ldrb	r3, [r7, #27]
 8005dd4:	2b5c      	cmp	r3, #92	; 0x5c
 8005dd6:	d110      	bne.n	8005dfa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005dd8:	e002      	b.n	8005de0 <create_name+0x54>
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	4413      	add	r3, r2
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b2f      	cmp	r3, #47	; 0x2f
 8005dea:	d0f6      	beq.n	8005dda <create_name+0x4e>
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	4413      	add	r3, r2
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b5c      	cmp	r3, #92	; 0x5c
 8005df6:	d0f0      	beq.n	8005dda <create_name+0x4e>
			break;
 8005df8:	e038      	b.n	8005e6c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005dfa:	7efb      	ldrb	r3, [r7, #27]
 8005dfc:	2b2e      	cmp	r3, #46	; 0x2e
 8005dfe:	d003      	beq.n	8005e08 <create_name+0x7c>
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d30c      	bcc.n	8005e22 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2b0b      	cmp	r3, #11
 8005e0c:	d002      	beq.n	8005e14 <create_name+0x88>
 8005e0e:	7efb      	ldrb	r3, [r7, #27]
 8005e10:	2b2e      	cmp	r3, #46	; 0x2e
 8005e12:	d001      	beq.n	8005e18 <create_name+0x8c>
 8005e14:	2306      	movs	r3, #6
 8005e16:	e044      	b.n	8005ea2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005e18:	2308      	movs	r3, #8
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	230b      	movs	r3, #11
 8005e1e:	617b      	str	r3, [r7, #20]
			continue;
 8005e20:	e022      	b.n	8005e68 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005e22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	da04      	bge.n	8005e34 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005e2a:	7efb      	ldrb	r3, [r7, #27]
 8005e2c:	3b80      	subs	r3, #128	; 0x80
 8005e2e:	4a1f      	ldr	r2, [pc, #124]	; (8005eac <create_name+0x120>)
 8005e30:	5cd3      	ldrb	r3, [r2, r3]
 8005e32:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005e34:	7efb      	ldrb	r3, [r7, #27]
 8005e36:	4619      	mov	r1, r3
 8005e38:	481d      	ldr	r0, [pc, #116]	; (8005eb0 <create_name+0x124>)
 8005e3a:	f7ff f810 	bl	8004e5e <chk_chr>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <create_name+0xbc>
 8005e44:	2306      	movs	r3, #6
 8005e46:	e02c      	b.n	8005ea2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005e48:	7efb      	ldrb	r3, [r7, #27]
 8005e4a:	2b60      	cmp	r3, #96	; 0x60
 8005e4c:	d905      	bls.n	8005e5a <create_name+0xce>
 8005e4e:	7efb      	ldrb	r3, [r7, #27]
 8005e50:	2b7a      	cmp	r3, #122	; 0x7a
 8005e52:	d802      	bhi.n	8005e5a <create_name+0xce>
 8005e54:	7efb      	ldrb	r3, [r7, #27]
 8005e56:	3b20      	subs	r3, #32
 8005e58:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	613a      	str	r2, [r7, #16]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	4413      	add	r3, r2
 8005e64:	7efa      	ldrb	r2, [r7, #27]
 8005e66:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005e68:	e7a6      	b.n	8005db8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005e6a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	441a      	add	r2, r3
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <create_name+0xf4>
 8005e7c:	2306      	movs	r3, #6
 8005e7e:	e010      	b.n	8005ea2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2be5      	cmp	r3, #229	; 0xe5
 8005e86:	d102      	bne.n	8005e8e <create_name+0x102>
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2205      	movs	r2, #5
 8005e8c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005e8e:	7efb      	ldrb	r3, [r7, #27]
 8005e90:	2b20      	cmp	r3, #32
 8005e92:	d801      	bhi.n	8005e98 <create_name+0x10c>
 8005e94:	2204      	movs	r2, #4
 8005e96:	e000      	b.n	8005e9a <create_name+0x10e>
 8005e98:	2200      	movs	r2, #0
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	330b      	adds	r3, #11
 8005e9e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005ea0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3720      	adds	r7, #32
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	08007f00 	.word	0x08007f00
 8005eb0:	08007e74 	.word	0x08007e74

08005eb4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005ec8:	e002      	b.n	8005ed0 <follow_path+0x1c>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	603b      	str	r3, [r7, #0]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b2f      	cmp	r3, #47	; 0x2f
 8005ed6:	d0f8      	beq.n	8005eca <follow_path+0x16>
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2b5c      	cmp	r3, #92	; 0x5c
 8005ede:	d0f4      	beq.n	8005eca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	2b1f      	cmp	r3, #31
 8005eec:	d80a      	bhi.n	8005f04 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2280      	movs	r2, #128	; 0x80
 8005ef2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7ff fcf9 	bl	80058f0 <dir_sdi>
 8005efe:	4603      	mov	r3, r0
 8005f00:	75fb      	strb	r3, [r7, #23]
 8005f02:	e043      	b.n	8005f8c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005f04:	463b      	mov	r3, r7
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff ff3f 	bl	8005d8c <create_name>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005f12:	7dfb      	ldrb	r3, [r7, #23]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d134      	bne.n	8005f82 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff feaf 	bl	8005c7c <dir_find>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005f28:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005f2a:	7dfb      	ldrb	r3, [r7, #23]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00a      	beq.n	8005f46 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d127      	bne.n	8005f86 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005f36:	7afb      	ldrb	r3, [r7, #11]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d122      	bne.n	8005f86 <follow_path+0xd2>
 8005f40:	2305      	movs	r3, #5
 8005f42:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005f44:	e01f      	b.n	8005f86 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005f46:	7afb      	ldrb	r3, [r7, #11]
 8005f48:	f003 0304 	and.w	r3, r3, #4
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d11c      	bne.n	8005f8a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	799b      	ldrb	r3, [r3, #6]
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d102      	bne.n	8005f62 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005f5c:	2305      	movs	r3, #5
 8005f5e:	75fb      	strb	r3, [r7, #23]
 8005f60:	e014      	b.n	8005f8c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f70:	4413      	add	r3, r2
 8005f72:	4619      	mov	r1, r3
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f7ff fe42 	bl	8005bfe <ld_clust>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005f80:	e7c0      	b.n	8005f04 <follow_path+0x50>
			if (res != FR_OK) break;
 8005f82:	bf00      	nop
 8005f84:	e002      	b.n	8005f8c <follow_path+0xd8>
				break;
 8005f86:	bf00      	nop
 8005f88:	e000      	b.n	8005f8c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005f8a:	bf00      	nop
			}
		}
	}

	return res;
 8005f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3718      	adds	r7, #24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b087      	sub	sp, #28
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fa2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d031      	beq.n	8006010 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	e002      	b.n	8005fba <get_ldnumber+0x24>
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	d903      	bls.n	8005fca <get_ldnumber+0x34>
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b3a      	cmp	r3, #58	; 0x3a
 8005fc8:	d1f4      	bne.n	8005fb4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	2b3a      	cmp	r3, #58	; 0x3a
 8005fd0:	d11c      	bne.n	800600c <get_ldnumber+0x76>
			tp = *path;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	60fa      	str	r2, [r7, #12]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	3b30      	subs	r3, #48	; 0x30
 8005fe2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b09      	cmp	r3, #9
 8005fe8:	d80e      	bhi.n	8006008 <get_ldnumber+0x72>
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d10a      	bne.n	8006008 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d107      	bne.n	8006008 <get_ldnumber+0x72>
					vol = (int)i;
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	3301      	adds	r3, #1
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	e002      	b.n	8006012 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800600c:	2300      	movs	r3, #0
 800600e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006010:	693b      	ldr	r3, [r7, #16]
}
 8006012:	4618      	mov	r0, r3
 8006014:	371c      	adds	r7, #28
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
	...

08006020 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	70da      	strb	r2, [r3, #3]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006036:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006038:	6839      	ldr	r1, [r7, #0]
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff f8da 	bl	80051f4 <move_window>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <check_fs+0x2a>
 8006046:	2304      	movs	r3, #4
 8006048:	e038      	b.n	80060bc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	3330      	adds	r3, #48	; 0x30
 800604e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006052:	4618      	mov	r0, r3
 8006054:	f7fe fe1e 	bl	8004c94 <ld_word>
 8006058:	4603      	mov	r3, r0
 800605a:	461a      	mov	r2, r3
 800605c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006060:	429a      	cmp	r2, r3
 8006062:	d001      	beq.n	8006068 <check_fs+0x48>
 8006064:	2303      	movs	r3, #3
 8006066:	e029      	b.n	80060bc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800606e:	2be9      	cmp	r3, #233	; 0xe9
 8006070:	d009      	beq.n	8006086 <check_fs+0x66>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006078:	2beb      	cmp	r3, #235	; 0xeb
 800607a:	d11e      	bne.n	80060ba <check_fs+0x9a>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006082:	2b90      	cmp	r3, #144	; 0x90
 8006084:	d119      	bne.n	80060ba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	3330      	adds	r3, #48	; 0x30
 800608a:	3336      	adds	r3, #54	; 0x36
 800608c:	4618      	mov	r0, r3
 800608e:	f7fe fe19 	bl	8004cc4 <ld_dword>
 8006092:	4603      	mov	r3, r0
 8006094:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006098:	4a0a      	ldr	r2, [pc, #40]	; (80060c4 <check_fs+0xa4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d101      	bne.n	80060a2 <check_fs+0x82>
 800609e:	2300      	movs	r3, #0
 80060a0:	e00c      	b.n	80060bc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	3330      	adds	r3, #48	; 0x30
 80060a6:	3352      	adds	r3, #82	; 0x52
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fe fe0b 	bl	8004cc4 <ld_dword>
 80060ae:	4603      	mov	r3, r0
 80060b0:	4a05      	ldr	r2, [pc, #20]	; (80060c8 <check_fs+0xa8>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d101      	bne.n	80060ba <check_fs+0x9a>
 80060b6:	2300      	movs	r3, #0
 80060b8:	e000      	b.n	80060bc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80060ba:	2302      	movs	r3, #2
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	00544146 	.word	0x00544146
 80060c8:	33544146 	.word	0x33544146

080060cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b096      	sub	sp, #88	; 0x58
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	4613      	mov	r3, r2
 80060d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f7ff ff58 	bl	8005f96 <get_ldnumber>
 80060e6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80060e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	da01      	bge.n	80060f2 <find_volume+0x26>
 80060ee:	230b      	movs	r3, #11
 80060f0:	e22d      	b.n	800654e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80060f2:	4aa1      	ldr	r2, [pc, #644]	; (8006378 <find_volume+0x2ac>)
 80060f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060fa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80060fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <find_volume+0x3a>
 8006102:	230c      	movs	r3, #12
 8006104:	e223      	b.n	800654e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800610a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800610c:	79fb      	ldrb	r3, [r7, #7]
 800610e:	f023 0301 	bic.w	r3, r3, #1
 8006112:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d01a      	beq.n	8006152 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800611c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611e:	785b      	ldrb	r3, [r3, #1]
 8006120:	4618      	mov	r0, r3
 8006122:	f7fe fd19 	bl	8004b58 <disk_status>
 8006126:	4603      	mov	r3, r0
 8006128:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800612c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10c      	bne.n	8006152 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006138:	79fb      	ldrb	r3, [r7, #7]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d007      	beq.n	800614e <find_volume+0x82>
 800613e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800614a:	230a      	movs	r3, #10
 800614c:	e1ff      	b.n	800654e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800614e:	2300      	movs	r3, #0
 8006150:	e1fd      	b.n	800654e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006154:	2200      	movs	r2, #0
 8006156:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615a:	b2da      	uxtb	r2, r3
 800615c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006162:	785b      	ldrb	r3, [r3, #1]
 8006164:	4618      	mov	r0, r3
 8006166:	f7fe fd11 	bl	8004b8c <disk_initialize>
 800616a:	4603      	mov	r3, r0
 800616c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006170:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800617c:	2303      	movs	r3, #3
 800617e:	e1e6      	b.n	800654e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d007      	beq.n	8006196 <find_volume+0xca>
 8006186:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800618a:	f003 0304 	and.w	r3, r3, #4
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006192:	230a      	movs	r3, #10
 8006194:	e1db      	b.n	800654e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006196:	2300      	movs	r3, #0
 8006198:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800619a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800619c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800619e:	f7ff ff3f 	bl	8006020 <check_fs>
 80061a2:	4603      	mov	r3, r0
 80061a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80061a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d149      	bne.n	8006244 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80061b0:	2300      	movs	r3, #0
 80061b2:	643b      	str	r3, [r7, #64]	; 0x40
 80061b4:	e01e      	b.n	80061f4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80061b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80061bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061be:	011b      	lsls	r3, r3, #4
 80061c0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80061c4:	4413      	add	r3, r2
 80061c6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	3304      	adds	r3, #4
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d006      	beq.n	80061e0 <find_volume+0x114>
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	3308      	adds	r3, #8
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7fe fd74 	bl	8004cc4 <ld_dword>
 80061dc:	4602      	mov	r2, r0
 80061de:	e000      	b.n	80061e2 <find_volume+0x116>
 80061e0:	2200      	movs	r2, #0
 80061e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	3358      	adds	r3, #88	; 0x58
 80061e8:	443b      	add	r3, r7
 80061ea:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80061ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f0:	3301      	adds	r3, #1
 80061f2:	643b      	str	r3, [r7, #64]	; 0x40
 80061f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d9dd      	bls.n	80061b6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80061fa:	2300      	movs	r3, #0
 80061fc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80061fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <find_volume+0x13e>
 8006204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006206:	3b01      	subs	r3, #1
 8006208:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800620a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	3358      	adds	r3, #88	; 0x58
 8006210:	443b      	add	r3, r7
 8006212:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006216:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800621a:	2b00      	cmp	r3, #0
 800621c:	d005      	beq.n	800622a <find_volume+0x15e>
 800621e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006220:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006222:	f7ff fefd 	bl	8006020 <check_fs>
 8006226:	4603      	mov	r3, r0
 8006228:	e000      	b.n	800622c <find_volume+0x160>
 800622a:	2303      	movs	r3, #3
 800622c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006230:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006234:	2b01      	cmp	r3, #1
 8006236:	d905      	bls.n	8006244 <find_volume+0x178>
 8006238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800623a:	3301      	adds	r3, #1
 800623c:	643b      	str	r3, [r7, #64]	; 0x40
 800623e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006240:	2b03      	cmp	r3, #3
 8006242:	d9e2      	bls.n	800620a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006244:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006248:	2b04      	cmp	r3, #4
 800624a:	d101      	bne.n	8006250 <find_volume+0x184>
 800624c:	2301      	movs	r3, #1
 800624e:	e17e      	b.n	800654e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006250:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006254:	2b01      	cmp	r3, #1
 8006256:	d901      	bls.n	800625c <find_volume+0x190>
 8006258:	230d      	movs	r3, #13
 800625a:	e178      	b.n	800654e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800625c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625e:	3330      	adds	r3, #48	; 0x30
 8006260:	330b      	adds	r3, #11
 8006262:	4618      	mov	r0, r3
 8006264:	f7fe fd16 	bl	8004c94 <ld_word>
 8006268:	4603      	mov	r3, r0
 800626a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800626e:	d001      	beq.n	8006274 <find_volume+0x1a8>
 8006270:	230d      	movs	r3, #13
 8006272:	e16c      	b.n	800654e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006276:	3330      	adds	r3, #48	; 0x30
 8006278:	3316      	adds	r3, #22
 800627a:	4618      	mov	r0, r3
 800627c:	f7fe fd0a 	bl	8004c94 <ld_word>
 8006280:	4603      	mov	r3, r0
 8006282:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006286:	2b00      	cmp	r3, #0
 8006288:	d106      	bne.n	8006298 <find_volume+0x1cc>
 800628a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628c:	3330      	adds	r3, #48	; 0x30
 800628e:	3324      	adds	r3, #36	; 0x24
 8006290:	4618      	mov	r0, r3
 8006292:	f7fe fd17 	bl	8004cc4 <ld_dword>
 8006296:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800629c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800629e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80062a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80062a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062aa:	789b      	ldrb	r3, [r3, #2]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d005      	beq.n	80062bc <find_volume+0x1f0>
 80062b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b2:	789b      	ldrb	r3, [r3, #2]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d001      	beq.n	80062bc <find_volume+0x1f0>
 80062b8:	230d      	movs	r3, #13
 80062ba:	e148      	b.n	800654e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80062bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062be:	789b      	ldrb	r3, [r3, #2]
 80062c0:	461a      	mov	r2, r3
 80062c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062c4:	fb02 f303 	mul.w	r3, r2, r3
 80062c8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80062ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80062d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d8:	895b      	ldrh	r3, [r3, #10]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d008      	beq.n	80062f0 <find_volume+0x224>
 80062de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e0:	895b      	ldrh	r3, [r3, #10]
 80062e2:	461a      	mov	r2, r3
 80062e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e6:	895b      	ldrh	r3, [r3, #10]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	4013      	ands	r3, r2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <find_volume+0x228>
 80062f0:	230d      	movs	r3, #13
 80062f2:	e12c      	b.n	800654e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80062f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f6:	3330      	adds	r3, #48	; 0x30
 80062f8:	3311      	adds	r3, #17
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fe fcca 	bl	8004c94 <ld_word>
 8006300:	4603      	mov	r3, r0
 8006302:	461a      	mov	r2, r3
 8006304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006306:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630a:	891b      	ldrh	r3, [r3, #8]
 800630c:	f003 030f 	and.w	r3, r3, #15
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <find_volume+0x24e>
 8006316:	230d      	movs	r3, #13
 8006318:	e119      	b.n	800654e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800631a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631c:	3330      	adds	r3, #48	; 0x30
 800631e:	3313      	adds	r3, #19
 8006320:	4618      	mov	r0, r3
 8006322:	f7fe fcb7 	bl	8004c94 <ld_word>
 8006326:	4603      	mov	r3, r0
 8006328:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800632a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800632c:	2b00      	cmp	r3, #0
 800632e:	d106      	bne.n	800633e <find_volume+0x272>
 8006330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006332:	3330      	adds	r3, #48	; 0x30
 8006334:	3320      	adds	r3, #32
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe fcc4 	bl	8004cc4 <ld_dword>
 800633c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800633e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006340:	3330      	adds	r3, #48	; 0x30
 8006342:	330e      	adds	r3, #14
 8006344:	4618      	mov	r0, r3
 8006346:	f7fe fca5 	bl	8004c94 <ld_word>
 800634a:	4603      	mov	r3, r0
 800634c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800634e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <find_volume+0x28c>
 8006354:	230d      	movs	r3, #13
 8006356:	e0fa      	b.n	800654e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006358:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800635a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800635c:	4413      	add	r3, r2
 800635e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006360:	8912      	ldrh	r2, [r2, #8]
 8006362:	0912      	lsrs	r2, r2, #4
 8006364:	b292      	uxth	r2, r2
 8006366:	4413      	add	r3, r2
 8006368:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800636a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636e:	429a      	cmp	r2, r3
 8006370:	d204      	bcs.n	800637c <find_volume+0x2b0>
 8006372:	230d      	movs	r3, #13
 8006374:	e0eb      	b.n	800654e <find_volume+0x482>
 8006376:	bf00      	nop
 8006378:	20000298 	.word	0x20000298
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800637c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006384:	8952      	ldrh	r2, [r2, #10]
 8006386:	fbb3 f3f2 	udiv	r3, r3, r2
 800638a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <find_volume+0x2ca>
 8006392:	230d      	movs	r3, #13
 8006394:	e0db      	b.n	800654e <find_volume+0x482>
		fmt = FS_FAT32;
 8006396:	2303      	movs	r3, #3
 8006398:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d802      	bhi.n	80063ac <find_volume+0x2e0>
 80063a6:	2302      	movs	r3, #2
 80063a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	f640 72f5 	movw	r2, #4085	; 0xff5
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d802      	bhi.n	80063bc <find_volume+0x2f0>
 80063b6:	2301      	movs	r3, #1
 80063b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	1c9a      	adds	r2, r3, #2
 80063c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80063c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063c8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80063ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80063cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063ce:	441a      	add	r2, r3
 80063d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80063d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	441a      	add	r2, r3
 80063da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063dc:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80063de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d11e      	bne.n	8006424 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80063e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e8:	3330      	adds	r3, #48	; 0x30
 80063ea:	332a      	adds	r3, #42	; 0x2a
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fe fc51 	bl	8004c94 <ld_word>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <find_volume+0x330>
 80063f8:	230d      	movs	r3, #13
 80063fa:	e0a8      	b.n	800654e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80063fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fe:	891b      	ldrh	r3, [r3, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <find_volume+0x33c>
 8006404:	230d      	movs	r3, #13
 8006406:	e0a2      	b.n	800654e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640a:	3330      	adds	r3, #48	; 0x30
 800640c:	332c      	adds	r3, #44	; 0x2c
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe fc58 	bl	8004cc4 <ld_dword>
 8006414:	4602      	mov	r2, r0
 8006416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006418:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800641a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	647b      	str	r3, [r7, #68]	; 0x44
 8006422:	e01f      	b.n	8006464 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006426:	891b      	ldrh	r3, [r3, #8]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <find_volume+0x364>
 800642c:	230d      	movs	r3, #13
 800642e:	e08e      	b.n	800654e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006432:	6a1a      	ldr	r2, [r3, #32]
 8006434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006436:	441a      	add	r2, r3
 8006438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800643c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006440:	2b02      	cmp	r3, #2
 8006442:	d103      	bne.n	800644c <find_volume+0x380>
 8006444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	005b      	lsls	r3, r3, #1
 800644a:	e00a      	b.n	8006462 <find_volume+0x396>
 800644c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644e:	695a      	ldr	r2, [r3, #20]
 8006450:	4613      	mov	r3, r2
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	4413      	add	r3, r2
 8006456:	085a      	lsrs	r2, r3, #1
 8006458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006462:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006466:	699a      	ldr	r2, [r3, #24]
 8006468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800646a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800646e:	0a5b      	lsrs	r3, r3, #9
 8006470:	429a      	cmp	r2, r3
 8006472:	d201      	bcs.n	8006478 <find_volume+0x3ac>
 8006474:	230d      	movs	r3, #13
 8006476:	e06a      	b.n	800654e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800647e:	611a      	str	r2, [r3, #16]
 8006480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006482:	691a      	ldr	r2, [r3, #16]
 8006484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006486:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648a:	2280      	movs	r2, #128	; 0x80
 800648c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800648e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006492:	2b03      	cmp	r3, #3
 8006494:	d149      	bne.n	800652a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006498:	3330      	adds	r3, #48	; 0x30
 800649a:	3330      	adds	r3, #48	; 0x30
 800649c:	4618      	mov	r0, r3
 800649e:	f7fe fbf9 	bl	8004c94 <ld_word>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d140      	bne.n	800652a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80064a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064aa:	3301      	adds	r3, #1
 80064ac:	4619      	mov	r1, r3
 80064ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80064b0:	f7fe fea0 	bl	80051f4 <move_window>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d137      	bne.n	800652a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80064ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064bc:	2200      	movs	r2, #0
 80064be:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80064c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c2:	3330      	adds	r3, #48	; 0x30
 80064c4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fe fbe3 	bl	8004c94 <ld_word>
 80064ce:	4603      	mov	r3, r0
 80064d0:	461a      	mov	r2, r3
 80064d2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d127      	bne.n	800652a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80064da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064dc:	3330      	adds	r3, #48	; 0x30
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe fbf0 	bl	8004cc4 <ld_dword>
 80064e4:	4603      	mov	r3, r0
 80064e6:	4a1c      	ldr	r2, [pc, #112]	; (8006558 <find_volume+0x48c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d11e      	bne.n	800652a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80064ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ee:	3330      	adds	r3, #48	; 0x30
 80064f0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fe fbe5 	bl	8004cc4 <ld_dword>
 80064fa:	4603      	mov	r3, r0
 80064fc:	4a17      	ldr	r2, [pc, #92]	; (800655c <find_volume+0x490>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d113      	bne.n	800652a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006504:	3330      	adds	r3, #48	; 0x30
 8006506:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800650a:	4618      	mov	r0, r3
 800650c:	f7fe fbda 	bl	8004cc4 <ld_dword>
 8006510:	4602      	mov	r2, r0
 8006512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006514:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006518:	3330      	adds	r3, #48	; 0x30
 800651a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800651e:	4618      	mov	r0, r3
 8006520:	f7fe fbd0 	bl	8004cc4 <ld_dword>
 8006524:	4602      	mov	r2, r0
 8006526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006528:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800652a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006530:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006532:	4b0b      	ldr	r3, [pc, #44]	; (8006560 <find_volume+0x494>)
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	3301      	adds	r3, #1
 8006538:	b29a      	uxth	r2, r3
 800653a:	4b09      	ldr	r3, [pc, #36]	; (8006560 <find_volume+0x494>)
 800653c:	801a      	strh	r2, [r3, #0]
 800653e:	4b08      	ldr	r3, [pc, #32]	; (8006560 <find_volume+0x494>)
 8006540:	881a      	ldrh	r2, [r3, #0]
 8006542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006544:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006546:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006548:	f7fe fdec 	bl	8005124 <clear_lock>
#endif
	return FR_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3758      	adds	r7, #88	; 0x58
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	41615252 	.word	0x41615252
 800655c:	61417272 	.word	0x61417272
 8006560:	2000029c 	.word	0x2000029c

08006564 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800656e:	2309      	movs	r3, #9
 8006570:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d01c      	beq.n	80065b2 <validate+0x4e>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d018      	beq.n	80065b2 <validate+0x4e>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d013      	beq.n	80065b2 <validate+0x4e>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	889a      	ldrh	r2, [r3, #4]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	88db      	ldrh	r3, [r3, #6]
 8006594:	429a      	cmp	r2, r3
 8006596:	d10c      	bne.n	80065b2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	785b      	ldrb	r3, [r3, #1]
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe fada 	bl	8004b58 <disk_status>
 80065a4:	4603      	mov	r3, r0
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <validate+0x4e>
			res = FR_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d102      	bne.n	80065be <validate+0x5a>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	e000      	b.n	80065c0 <validate+0x5c>
 80065be:	2300      	movs	r3, #0
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	6013      	str	r3, [r2, #0]
	return res;
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
	...

080065d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b088      	sub	sp, #32
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	4613      	mov	r3, r2
 80065dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80065e2:	f107 0310 	add.w	r3, r7, #16
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff fcd5 	bl	8005f96 <get_ldnumber>
 80065ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	da01      	bge.n	80065f8 <f_mount+0x28>
 80065f4:	230b      	movs	r3, #11
 80065f6:	e02b      	b.n	8006650 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80065f8:	4a17      	ldr	r2, [pc, #92]	; (8006658 <f_mount+0x88>)
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006600:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d005      	beq.n	8006614 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006608:	69b8      	ldr	r0, [r7, #24]
 800660a:	f7fe fd8b 	bl	8005124 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	2200      	movs	r2, #0
 8006612:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	490d      	ldr	r1, [pc, #52]	; (8006658 <f_mount+0x88>)
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <f_mount+0x66>
 8006630:	79fb      	ldrb	r3, [r7, #7]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d001      	beq.n	800663a <f_mount+0x6a>
 8006636:	2300      	movs	r3, #0
 8006638:	e00a      	b.n	8006650 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800663a:	f107 010c 	add.w	r1, r7, #12
 800663e:	f107 0308 	add.w	r3, r7, #8
 8006642:	2200      	movs	r2, #0
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff fd41 	bl	80060cc <find_volume>
 800664a:	4603      	mov	r3, r0
 800664c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800664e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3720      	adds	r7, #32
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	20000298 	.word	0x20000298

0800665c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b098      	sub	sp, #96	; 0x60
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	4613      	mov	r3, r2
 8006668:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <f_open+0x18>
 8006670:	2309      	movs	r3, #9
 8006672:	e1ad      	b.n	80069d0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800667a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800667c:	79fa      	ldrb	r2, [r7, #7]
 800667e:	f107 0110 	add.w	r1, r7, #16
 8006682:	f107 0308 	add.w	r3, r7, #8
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff fd20 	bl	80060cc <find_volume>
 800668c:	4603      	mov	r3, r0
 800668e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006692:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006696:	2b00      	cmp	r3, #0
 8006698:	f040 8191 	bne.w	80069be <f_open+0x362>
		dj.obj.fs = fs;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	f107 0314 	add.w	r3, r7, #20
 80066a6:	4611      	mov	r1, r2
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff fc03 	bl	8005eb4 <follow_path>
 80066ae:	4603      	mov	r3, r0
 80066b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80066b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d11a      	bne.n	80066f2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80066bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80066c0:	b25b      	sxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	da03      	bge.n	80066ce <f_open+0x72>
				res = FR_INVALID_NAME;
 80066c6:	2306      	movs	r3, #6
 80066c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80066cc:	e011      	b.n	80066f2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80066ce:	79fb      	ldrb	r3, [r7, #7]
 80066d0:	f023 0301 	bic.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	bf14      	ite	ne
 80066d8:	2301      	movne	r3, #1
 80066da:	2300      	moveq	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	461a      	mov	r2, r3
 80066e0:	f107 0314 	add.w	r3, r7, #20
 80066e4:	4611      	mov	r1, r2
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fe fbd4 	bl	8004e94 <chk_lock>
 80066ec:	4603      	mov	r3, r0
 80066ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80066f2:	79fb      	ldrb	r3, [r7, #7]
 80066f4:	f003 031c 	and.w	r3, r3, #28
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d07f      	beq.n	80067fc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80066fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006700:	2b00      	cmp	r3, #0
 8006702:	d017      	beq.n	8006734 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006704:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006708:	2b04      	cmp	r3, #4
 800670a:	d10e      	bne.n	800672a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800670c:	f7fe fc1e 	bl	8004f4c <enq_lock>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d006      	beq.n	8006724 <f_open+0xc8>
 8006716:	f107 0314 	add.w	r3, r7, #20
 800671a:	4618      	mov	r0, r3
 800671c:	f7ff fb03 	bl	8005d26 <dir_register>
 8006720:	4603      	mov	r3, r0
 8006722:	e000      	b.n	8006726 <f_open+0xca>
 8006724:	2312      	movs	r3, #18
 8006726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800672a:	79fb      	ldrb	r3, [r7, #7]
 800672c:	f043 0308 	orr.w	r3, r3, #8
 8006730:	71fb      	strb	r3, [r7, #7]
 8006732:	e010      	b.n	8006756 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006734:	7ebb      	ldrb	r3, [r7, #26]
 8006736:	f003 0311 	and.w	r3, r3, #17
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <f_open+0xea>
					res = FR_DENIED;
 800673e:	2307      	movs	r3, #7
 8006740:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006744:	e007      	b.n	8006756 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006746:	79fb      	ldrb	r3, [r7, #7]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <f_open+0xfa>
 8006750:	2308      	movs	r3, #8
 8006752:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800675a:	2b00      	cmp	r3, #0
 800675c:	d168      	bne.n	8006830 <f_open+0x1d4>
 800675e:	79fb      	ldrb	r3, [r7, #7]
 8006760:	f003 0308 	and.w	r3, r3, #8
 8006764:	2b00      	cmp	r3, #0
 8006766:	d063      	beq.n	8006830 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006768:	f7fd fcbe 	bl	80040e8 <get_fattime>
 800676c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800676e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006770:	330e      	adds	r3, #14
 8006772:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006774:	4618      	mov	r0, r3
 8006776:	f7fe fae3 	bl	8004d40 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800677a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677c:	3316      	adds	r3, #22
 800677e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006780:	4618      	mov	r0, r3
 8006782:	f7fe fadd 	bl	8004d40 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006788:	330b      	adds	r3, #11
 800678a:	2220      	movs	r2, #32
 800678c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006792:	4611      	mov	r1, r2
 8006794:	4618      	mov	r0, r3
 8006796:	f7ff fa32 	bl	8005bfe <ld_clust>
 800679a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067a0:	2200      	movs	r2, #0
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7ff fa4a 	bl	8005c3c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80067a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067aa:	331c      	adds	r3, #28
 80067ac:	2100      	movs	r1, #0
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe fac6 	bl	8004d40 <st_dword>
					fs->wflag = 1;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	2201      	movs	r2, #1
 80067b8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80067ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d037      	beq.n	8006830 <f_open+0x1d4>
						dw = fs->winsect;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80067c6:	f107 0314 	add.w	r3, r7, #20
 80067ca:	2200      	movs	r2, #0
 80067cc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fe ff5d 	bl	800568e <remove_chain>
 80067d4:	4603      	mov	r3, r0
 80067d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80067da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d126      	bne.n	8006830 <f_open+0x1d4>
							res = move_window(fs, dw);
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fe fd04 	bl	80051f4 <move_window>
 80067ec:	4603      	mov	r3, r0
 80067ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067f6:	3a01      	subs	r2, #1
 80067f8:	60da      	str	r2, [r3, #12]
 80067fa:	e019      	b.n	8006830 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80067fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006800:	2b00      	cmp	r3, #0
 8006802:	d115      	bne.n	8006830 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006804:	7ebb      	ldrb	r3, [r7, #26]
 8006806:	f003 0310 	and.w	r3, r3, #16
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <f_open+0x1ba>
					res = FR_NO_FILE;
 800680e:	2304      	movs	r3, #4
 8006810:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006814:	e00c      	b.n	8006830 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006816:	79fb      	ldrb	r3, [r7, #7]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d007      	beq.n	8006830 <f_open+0x1d4>
 8006820:	7ebb      	ldrb	r3, [r7, #26]
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <f_open+0x1d4>
						res = FR_DENIED;
 800682a:	2307      	movs	r3, #7
 800682c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006830:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006834:	2b00      	cmp	r3, #0
 8006836:	d128      	bne.n	800688a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006838:	79fb      	ldrb	r3, [r7, #7]
 800683a:	f003 0308 	and.w	r3, r3, #8
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006842:	79fb      	ldrb	r3, [r7, #7]
 8006844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006848:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006858:	79fb      	ldrb	r3, [r7, #7]
 800685a:	f023 0301 	bic.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	bf14      	ite	ne
 8006862:	2301      	movne	r3, #1
 8006864:	2300      	moveq	r3, #0
 8006866:	b2db      	uxtb	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	f107 0314 	add.w	r3, r7, #20
 800686e:	4611      	mov	r1, r2
 8006870:	4618      	mov	r0, r3
 8006872:	f7fe fb8d 	bl	8004f90 <inc_lock>
 8006876:	4602      	mov	r2, r0
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d102      	bne.n	800688a <f_open+0x22e>
 8006884:	2302      	movs	r3, #2
 8006886:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800688a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800688e:	2b00      	cmp	r3, #0
 8006890:	f040 8095 	bne.w	80069be <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006898:	4611      	mov	r1, r2
 800689a:	4618      	mov	r0, r3
 800689c:	f7ff f9af 	bl	8005bfe <ld_clust>
 80068a0:	4602      	mov	r2, r0
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80068a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a8:	331c      	adds	r3, #28
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fe fa0a 	bl	8004cc4 <ld_dword>
 80068b0:	4602      	mov	r2, r0
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	88da      	ldrh	r2, [r3, #6]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	79fa      	ldrb	r2, [r7, #7]
 80068ce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3330      	adds	r3, #48	; 0x30
 80068e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068ea:	2100      	movs	r1, #0
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fe fa74 	bl	8004dda <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80068f2:	79fb      	ldrb	r3, [r7, #7]
 80068f4:	f003 0320 	and.w	r3, r3, #32
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d060      	beq.n	80069be <f_open+0x362>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d05c      	beq.n	80069be <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	895b      	ldrh	r3, [r3, #10]
 8006910:	025b      	lsls	r3, r3, #9
 8006912:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	657b      	str	r3, [r7, #84]	; 0x54
 8006920:	e016      	b.n	8006950 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006926:	4618      	mov	r0, r3
 8006928:	f7fe fd1f 	bl	800536a <get_fat>
 800692c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800692e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006930:	2b01      	cmp	r3, #1
 8006932:	d802      	bhi.n	800693a <f_open+0x2de>
 8006934:	2302      	movs	r3, #2
 8006936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800693a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800693c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006940:	d102      	bne.n	8006948 <f_open+0x2ec>
 8006942:	2301      	movs	r3, #1
 8006944:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006948:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800694a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	657b      	str	r3, [r7, #84]	; 0x54
 8006950:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006954:	2b00      	cmp	r3, #0
 8006956:	d103      	bne.n	8006960 <f_open+0x304>
 8006958:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800695a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800695c:	429a      	cmp	r2, r3
 800695e:	d8e0      	bhi.n	8006922 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006964:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006966:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800696a:	2b00      	cmp	r3, #0
 800696c:	d127      	bne.n	80069be <f_open+0x362>
 800696e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006974:	2b00      	cmp	r3, #0
 8006976:	d022      	beq.n	80069be <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800697c:	4618      	mov	r0, r3
 800697e:	f7fe fcd5 	bl	800532c <clust2sect>
 8006982:	6478      	str	r0, [r7, #68]	; 0x44
 8006984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006986:	2b00      	cmp	r3, #0
 8006988:	d103      	bne.n	8006992 <f_open+0x336>
						res = FR_INT_ERR;
 800698a:	2302      	movs	r3, #2
 800698c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006990:	e015      	b.n	80069be <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006994:	0a5a      	lsrs	r2, r3, #9
 8006996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006998:	441a      	add	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	7858      	ldrb	r0, [r3, #1]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6a1a      	ldr	r2, [r3, #32]
 80069ac:	2301      	movs	r3, #1
 80069ae:	f7fe f913 	bl	8004bd8 <disk_read>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d002      	beq.n	80069be <f_open+0x362>
 80069b8:	2301      	movs	r3, #1
 80069ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80069be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d002      	beq.n	80069cc <f_open+0x370>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80069cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3760      	adds	r7, #96	; 0x60
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b08e      	sub	sp, #56	; 0x38
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
 80069e4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2200      	movs	r2, #0
 80069ee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f107 0214 	add.w	r2, r7, #20
 80069f6:	4611      	mov	r1, r2
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7ff fdb3 	bl	8006564 <validate>
 80069fe:	4603      	mov	r3, r0
 8006a00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006a04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d107      	bne.n	8006a1c <f_read+0x44>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	7d5b      	ldrb	r3, [r3, #21]
 8006a10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006a14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <f_read+0x4a>
 8006a1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a20:	e115      	b.n	8006c4e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	7d1b      	ldrb	r3, [r3, #20]
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <f_read+0x5a>
 8006a2e:	2307      	movs	r3, #7
 8006a30:	e10d      	b.n	8006c4e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	f240 80fe 	bls.w	8006c44 <f_read+0x26c>
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006a4c:	e0fa      	b.n	8006c44 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f040 80c6 	bne.w	8006be8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	0a5b      	lsrs	r3, r3, #9
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	8952      	ldrh	r2, [r2, #10]
 8006a66:	3a01      	subs	r2, #1
 8006a68:	4013      	ands	r3, r2
 8006a6a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d12f      	bne.n	8006ad2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d103      	bne.n	8006a82 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	633b      	str	r3, [r7, #48]	; 0x30
 8006a80:	e013      	b.n	8006aaa <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d007      	beq.n	8006a9a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f7fe fef9 	bl	8005888 <clmt_clust>
 8006a96:	6338      	str	r0, [r7, #48]	; 0x30
 8006a98:	e007      	b.n	8006aaa <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	f7fe fc61 	bl	800536a <get_fat>
 8006aa8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d804      	bhi.n	8006aba <f_read+0xe2>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	755a      	strb	r2, [r3, #21]
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	e0c9      	b.n	8006c4e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ac0:	d104      	bne.n	8006acc <f_read+0xf4>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	755a      	strb	r2, [r3, #21]
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e0c0      	b.n	8006c4e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4610      	mov	r0, r2
 8006adc:	f7fe fc26 	bl	800532c <clust2sect>
 8006ae0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d104      	bne.n	8006af2 <f_read+0x11a>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2202      	movs	r2, #2
 8006aec:	755a      	strb	r2, [r3, #21]
 8006aee:	2302      	movs	r3, #2
 8006af0:	e0ad      	b.n	8006c4e <f_read+0x276>
			sect += csect;
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	4413      	add	r3, r2
 8006af8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	0a5b      	lsrs	r3, r3, #9
 8006afe:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d039      	beq.n	8006b7a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006b06:	69fa      	ldr	r2, [r7, #28]
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	4413      	add	r3, r2
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	8952      	ldrh	r2, [r2, #10]
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d905      	bls.n	8006b20 <f_read+0x148>
					cc = fs->csize - csect;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	895b      	ldrh	r3, [r3, #10]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	7858      	ldrb	r0, [r3, #1]
 8006b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b2a:	f7fe f855 	bl	8004bd8 <disk_read>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d004      	beq.n	8006b3e <f_read+0x166>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2201      	movs	r2, #1
 8006b38:	755a      	strb	r2, [r3, #21]
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e087      	b.n	8006c4e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	7d1b      	ldrb	r3, [r3, #20]
 8006b42:	b25b      	sxtb	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	da14      	bge.n	8006b72 <f_read+0x19a>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6a1a      	ldr	r2, [r3, #32]
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d90d      	bls.n	8006b72 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6a1a      	ldr	r2, [r3, #32]
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	025b      	lsls	r3, r3, #9
 8006b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b62:	18d0      	adds	r0, r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3330      	adds	r3, #48	; 0x30
 8006b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	f7fe f913 	bl	8004d98 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b74:	025b      	lsls	r3, r3, #9
 8006b76:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006b78:	e050      	b.n	8006c1c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d02e      	beq.n	8006be2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	7d1b      	ldrb	r3, [r3, #20]
 8006b88:	b25b      	sxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	da18      	bge.n	8006bc0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	7858      	ldrb	r0, [r3, #1]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6a1a      	ldr	r2, [r3, #32]
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	f7fe f83b 	bl	8004c18 <disk_write>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d004      	beq.n	8006bb2 <f_read+0x1da>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2201      	movs	r2, #1
 8006bac:	755a      	strb	r2, [r3, #21]
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e04d      	b.n	8006c4e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	7d1b      	ldrb	r3, [r3, #20]
 8006bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	7858      	ldrb	r0, [r3, #1]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006bca:	2301      	movs	r3, #1
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	f7fe f803 	bl	8004bd8 <disk_read>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d004      	beq.n	8006be2 <f_read+0x20a>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	755a      	strb	r2, [r3, #21]
 8006bde:	2301      	movs	r3, #1
 8006be0:	e035      	b.n	8006c4e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d901      	bls.n	8006c02 <f_read+0x22a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c10:	4413      	add	r3, r2
 8006c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c14:	4619      	mov	r1, r3
 8006c16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c18:	f7fe f8be 	bl	8004d98 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c20:	4413      	add	r3, r2
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	699a      	ldr	r2, [r3, #24]
 8006c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2a:	441a      	add	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	619a      	str	r2, [r3, #24]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c36:	441a      	add	r2, r3
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f47f af01 	bne.w	8006a4e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3738      	adds	r7, #56	; 0x38
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b08c      	sub	sp, #48	; 0x30
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	60f8      	str	r0, [r7, #12]
 8006c5e:	60b9      	str	r1, [r7, #8]
 8006c60:	607a      	str	r2, [r7, #4]
 8006c62:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f107 0210 	add.w	r2, r7, #16
 8006c74:	4611      	mov	r1, r2
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff fc74 	bl	8006564 <validate>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006c82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d107      	bne.n	8006c9a <f_write+0x44>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	7d5b      	ldrb	r3, [r3, #21]
 8006c8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006c92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <f_write+0x4a>
 8006c9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c9e:	e14b      	b.n	8006f38 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	7d1b      	ldrb	r3, [r3, #20]
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <f_write+0x5a>
 8006cac:	2307      	movs	r3, #7
 8006cae:	e143      	b.n	8006f38 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	699a      	ldr	r2, [r3, #24]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	441a      	add	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	f080 812d 	bcs.w	8006f1c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	43db      	mvns	r3, r3
 8006cc8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006cca:	e127      	b.n	8006f1c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f040 80e3 	bne.w	8006ea0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	0a5b      	lsrs	r3, r3, #9
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	8952      	ldrh	r2, [r2, #10]
 8006ce4:	3a01      	subs	r2, #1
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d143      	bne.n	8006d78 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10c      	bne.n	8006d12 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d11a      	bne.n	8006d3a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2100      	movs	r1, #0
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fe fd25 	bl	8005758 <create_chain>
 8006d0e:	62b8      	str	r0, [r7, #40]	; 0x28
 8006d10:	e013      	b.n	8006d3a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d007      	beq.n	8006d2a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f7fe fdb1 	bl	8005888 <clmt_clust>
 8006d26:	62b8      	str	r0, [r7, #40]	; 0x28
 8006d28:	e007      	b.n	8006d3a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	4619      	mov	r1, r3
 8006d32:	4610      	mov	r0, r2
 8006d34:	f7fe fd10 	bl	8005758 <create_chain>
 8006d38:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 80f2 	beq.w	8006f26 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d104      	bne.n	8006d52 <f_write+0xfc>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	755a      	strb	r2, [r3, #21]
 8006d4e:	2302      	movs	r3, #2
 8006d50:	e0f2      	b.n	8006f38 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d58:	d104      	bne.n	8006d64 <f_write+0x10e>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	755a      	strb	r2, [r3, #21]
 8006d60:	2301      	movs	r3, #1
 8006d62:	e0e9      	b.n	8006f38 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d68:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d102      	bne.n	8006d78 <f_write+0x122>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d76:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	7d1b      	ldrb	r3, [r3, #20]
 8006d7c:	b25b      	sxtb	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	da18      	bge.n	8006db4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	7858      	ldrb	r0, [r3, #1]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6a1a      	ldr	r2, [r3, #32]
 8006d90:	2301      	movs	r3, #1
 8006d92:	f7fd ff41 	bl	8004c18 <disk_write>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d004      	beq.n	8006da6 <f_write+0x150>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	755a      	strb	r2, [r3, #21]
 8006da2:	2301      	movs	r3, #1
 8006da4:	e0c8      	b.n	8006f38 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	7d1b      	ldrb	r3, [r3, #20]
 8006daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	f7fe fab5 	bl	800532c <clust2sect>
 8006dc2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d104      	bne.n	8006dd4 <f_write+0x17e>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2202      	movs	r2, #2
 8006dce:	755a      	strb	r2, [r3, #21]
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e0b1      	b.n	8006f38 <f_write+0x2e2>
			sect += csect;
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	4413      	add	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	0a5b      	lsrs	r3, r3, #9
 8006de0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d03c      	beq.n	8006e62 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	4413      	add	r3, r2
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	8952      	ldrh	r2, [r2, #10]
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d905      	bls.n	8006e02 <f_write+0x1ac>
					cc = fs->csize - csect;
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	895b      	ldrh	r3, [r3, #10]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	7858      	ldrb	r0, [r3, #1]
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	69f9      	ldr	r1, [r7, #28]
 8006e0c:	f7fd ff04 	bl	8004c18 <disk_write>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d004      	beq.n	8006e20 <f_write+0x1ca>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	755a      	strb	r2, [r3, #21]
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e08b      	b.n	8006f38 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6a1a      	ldr	r2, [r3, #32]
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	6a3a      	ldr	r2, [r7, #32]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d915      	bls.n	8006e5a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6a1a      	ldr	r2, [r3, #32]
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	025b      	lsls	r3, r3, #9
 8006e3e:	69fa      	ldr	r2, [r7, #28]
 8006e40:	4413      	add	r3, r2
 8006e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e46:	4619      	mov	r1, r3
 8006e48:	f7fd ffa6 	bl	8004d98 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	7d1b      	ldrb	r3, [r3, #20]
 8006e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	025b      	lsls	r3, r3, #9
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006e60:	e03f      	b.n	8006ee2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d016      	beq.n	8006e9a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	699a      	ldr	r2, [r3, #24]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d210      	bcs.n	8006e9a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	7858      	ldrb	r0, [r3, #1]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e82:	2301      	movs	r3, #1
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	f7fd fea7 	bl	8004bd8 <disk_read>
 8006e8a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d004      	beq.n	8006e9a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2201      	movs	r2, #1
 8006e94:	755a      	strb	r2, [r3, #21]
 8006e96:	2301      	movs	r3, #1
 8006e98:	e04e      	b.n	8006f38 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006eac:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d901      	bls.n	8006eba <f_write+0x264>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec8:	4413      	add	r3, r2
 8006eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ecc:	69f9      	ldr	r1, [r7, #28]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fd ff62 	bl	8004d98 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	7d1b      	ldrb	r3, [r3, #20]
 8006ed8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006ee2:	69fa      	ldr	r2, [r7, #28]
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	4413      	add	r3, r2
 8006ee8:	61fb      	str	r3, [r7, #28]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	699a      	ldr	r2, [r3, #24]
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	441a      	add	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	619a      	str	r2, [r3, #24]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	68da      	ldr	r2, [r3, #12]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	bf38      	it	cc
 8006f02:	461a      	movcc	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	60da      	str	r2, [r3, #12]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	441a      	add	r2, r3
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f47f aed4 	bne.w	8006ccc <f_write+0x76>
 8006f24:	e000      	b.n	8006f28 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006f26:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	7d1b      	ldrb	r3, [r3, #20]
 8006f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3730      	adds	r7, #48	; 0x30
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f107 0208 	add.w	r2, r7, #8
 8006f4e:	4611      	mov	r1, r2
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7ff fb07 	bl	8006564 <validate>
 8006f56:	4603      	mov	r3, r0
 8006f58:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d168      	bne.n	8007032 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	7d1b      	ldrb	r3, [r3, #20]
 8006f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d062      	beq.n	8007032 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	7d1b      	ldrb	r3, [r3, #20]
 8006f70:	b25b      	sxtb	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	da15      	bge.n	8006fa2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	7858      	ldrb	r0, [r3, #1]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a1a      	ldr	r2, [r3, #32]
 8006f84:	2301      	movs	r3, #1
 8006f86:	f7fd fe47 	bl	8004c18 <disk_write>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d001      	beq.n	8006f94 <f_sync+0x54>
 8006f90:	2301      	movs	r3, #1
 8006f92:	e04f      	b.n	8007034 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	7d1b      	ldrb	r3, [r3, #20]
 8006f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f9c:	b2da      	uxtb	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006fa2:	f7fd f8a1 	bl	80040e8 <get_fattime>
 8006fa6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fae:	4619      	mov	r1, r3
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	f7fe f91f 	bl	80051f4 <move_window>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006fba:	7dfb      	ldrb	r3, [r7, #23]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d138      	bne.n	8007032 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	330b      	adds	r3, #11
 8006fca:	781a      	ldrb	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	330b      	adds	r3, #11
 8006fd0:	f042 0220 	orr.w	r2, r2, #32
 8006fd4:	b2d2      	uxtb	r2, r2
 8006fd6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6818      	ldr	r0, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	68f9      	ldr	r1, [r7, #12]
 8006fe4:	f7fe fe2a 	bl	8005c3c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f103 021c 	add.w	r2, r3, #28
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	f7fd fea3 	bl	8004d40 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	3316      	adds	r3, #22
 8006ffe:	6939      	ldr	r1, [r7, #16]
 8007000:	4618      	mov	r0, r3
 8007002:	f7fd fe9d 	bl	8004d40 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	3312      	adds	r3, #18
 800700a:	2100      	movs	r1, #0
 800700c:	4618      	mov	r0, r3
 800700e:	f7fd fe7c 	bl	8004d0a <st_word>
					fs->wflag = 1;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2201      	movs	r2, #1
 8007016:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe f918 	bl	8005250 <sync_fs>
 8007020:	4603      	mov	r3, r0
 8007022:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	7d1b      	ldrb	r3, [r3, #20]
 8007028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800702c:	b2da      	uxtb	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007032:	7dfb      	ldrb	r3, [r7, #23]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3718      	adds	r7, #24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7ff ff7b 	bl	8006f40 <f_sync>
 800704a:	4603      	mov	r3, r0
 800704c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800704e:	7bfb      	ldrb	r3, [r7, #15]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d118      	bne.n	8007086 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f107 0208 	add.w	r2, r7, #8
 800705a:	4611      	mov	r1, r2
 800705c:	4618      	mov	r0, r3
 800705e:	f7ff fa81 	bl	8006564 <validate>
 8007062:	4603      	mov	r3, r0
 8007064:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007066:	7bfb      	ldrb	r3, [r7, #15]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10c      	bne.n	8007086 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	4618      	mov	r0, r3
 8007072:	f7fe f81b 	bl	80050ac <dec_lock>
 8007076:	4603      	mov	r3, r0
 8007078:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800707a:	7bfb      	ldrb	r3, [r7, #15]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d102      	bne.n	8007086 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007086:	7bfb      	ldrb	r3, [r7, #15]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b092      	sub	sp, #72	; 0x48
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800709c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80070a0:	f107 030c 	add.w	r3, r7, #12
 80070a4:	2200      	movs	r2, #0
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7ff f810 	bl	80060cc <find_volume>
 80070ac:	4603      	mov	r3, r0
 80070ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80070b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f040 8099 	bne.w	80071ee <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80070bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80070c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c4:	691a      	ldr	r2, [r3, #16]
 80070c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	3b02      	subs	r3, #2
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d804      	bhi.n	80070da <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80070d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d2:	691a      	ldr	r2, [r3, #16]
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	601a      	str	r2, [r3, #0]
 80070d8:	e089      	b.n	80071ee <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80070da:	2300      	movs	r3, #0
 80070dc:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80070de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d128      	bne.n	8007138 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80070e6:	2302      	movs	r3, #2
 80070e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ec:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80070ee:	f107 0314 	add.w	r3, r7, #20
 80070f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7fe f938 	bl	800536a <get_fat>
 80070fa:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80070fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007102:	d103      	bne.n	800710c <f_getfree+0x7c>
 8007104:	2301      	movs	r3, #1
 8007106:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800710a:	e063      	b.n	80071d4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800710c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710e:	2b01      	cmp	r3, #1
 8007110:	d103      	bne.n	800711a <f_getfree+0x8a>
 8007112:	2302      	movs	r3, #2
 8007114:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007118:	e05c      	b.n	80071d4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711c:	2b00      	cmp	r3, #0
 800711e:	d102      	bne.n	8007126 <f_getfree+0x96>
 8007120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007122:	3301      	adds	r3, #1
 8007124:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8007126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007128:	3301      	adds	r3, #1
 800712a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007132:	429a      	cmp	r2, r3
 8007134:	d3db      	bcc.n	80070ee <f_getfree+0x5e>
 8007136:	e04d      	b.n	80071d4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8007144:	2300      	movs	r3, #0
 8007146:	637b      	str	r3, [r7, #52]	; 0x34
 8007148:	2300      	movs	r3, #0
 800714a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800714c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800714e:	2b00      	cmp	r3, #0
 8007150:	d113      	bne.n	800717a <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007156:	1c5a      	adds	r2, r3, #1
 8007158:	63ba      	str	r2, [r7, #56]	; 0x38
 800715a:	4619      	mov	r1, r3
 800715c:	f7fe f84a 	bl	80051f4 <move_window>
 8007160:	4603      	mov	r3, r0
 8007162:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8007166:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800716a:	2b00      	cmp	r3, #0
 800716c:	d131      	bne.n	80071d2 <f_getfree+0x142>
							p = fs->win;
 800716e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007170:	3330      	adds	r3, #48	; 0x30
 8007172:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8007174:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007178:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800717a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	2b02      	cmp	r3, #2
 8007180:	d10f      	bne.n	80071a2 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007182:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007184:	f7fd fd86 	bl	8004c94 <ld_word>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d102      	bne.n	8007194 <f_getfree+0x104>
 800718e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007190:	3301      	adds	r3, #1
 8007192:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8007194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007196:	3302      	adds	r3, #2
 8007198:	633b      	str	r3, [r7, #48]	; 0x30
 800719a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719c:	3b02      	subs	r3, #2
 800719e:	637b      	str	r3, [r7, #52]	; 0x34
 80071a0:	e010      	b.n	80071c4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80071a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071a4:	f7fd fd8e 	bl	8004cc4 <ld_dword>
 80071a8:	4603      	mov	r3, r0
 80071aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d102      	bne.n	80071b8 <f_getfree+0x128>
 80071b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071b4:	3301      	adds	r3, #1
 80071b6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	3304      	adds	r3, #4
 80071bc:	633b      	str	r3, [r7, #48]	; 0x30
 80071be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c0:	3b04      	subs	r3, #4
 80071c2:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80071c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071c6:	3b01      	subs	r3, #1
 80071c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1bd      	bne.n	800714c <f_getfree+0xbc>
 80071d0:	e000      	b.n	80071d4 <f_getfree+0x144>
							if (res != FR_OK) break;
 80071d2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071d8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80071da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071de:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	791a      	ldrb	r2, [r3, #4]
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	f042 0201 	orr.w	r2, r2, #1
 80071ea:	b2d2      	uxtb	r2, r2
 80071ec:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80071ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3748      	adds	r7, #72	; 0x48
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b088      	sub	sp, #32
 80071fe:	af00      	add	r7, sp, #0
 8007200:	60f8      	str	r0, [r7, #12]
 8007202:	60b9      	str	r1, [r7, #8]
 8007204:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007206:	2300      	movs	r3, #0
 8007208:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800720e:	e01b      	b.n	8007248 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007210:	f107 0310 	add.w	r3, r7, #16
 8007214:	f107 0114 	add.w	r1, r7, #20
 8007218:	2201      	movs	r2, #1
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff fbdc 	bl	80069d8 <f_read>
		if (rc != 1) break;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d116      	bne.n	8007254 <f_gets+0x5a>
		c = s[0];
 8007226:	7d3b      	ldrb	r3, [r7, #20]
 8007228:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800722a:	7dfb      	ldrb	r3, [r7, #23]
 800722c:	2b0d      	cmp	r3, #13
 800722e:	d100      	bne.n	8007232 <f_gets+0x38>
 8007230:	e00a      	b.n	8007248 <f_gets+0x4e>
		*p++ = c;
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	1c5a      	adds	r2, r3, #1
 8007236:	61ba      	str	r2, [r7, #24]
 8007238:	7dfa      	ldrb	r2, [r7, #23]
 800723a:	701a      	strb	r2, [r3, #0]
		n++;
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	3301      	adds	r3, #1
 8007240:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007242:	7dfb      	ldrb	r3, [r7, #23]
 8007244:	2b0a      	cmp	r3, #10
 8007246:	d007      	beq.n	8007258 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	3b01      	subs	r3, #1
 800724c:	69fa      	ldr	r2, [r7, #28]
 800724e:	429a      	cmp	r2, r3
 8007250:	dbde      	blt.n	8007210 <f_gets+0x16>
 8007252:	e002      	b.n	800725a <f_gets+0x60>
		if (rc != 1) break;
 8007254:	bf00      	nop
 8007256:	e000      	b.n	800725a <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8007258:	bf00      	nop
	}
	*p = 0;
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	2200      	movs	r2, #0
 800725e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <f_gets+0x70>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	e000      	b.n	800726c <f_gets+0x72>
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3720      	adds	r7, #32
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007274:	b480      	push	{r7}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	4613      	mov	r3, r2
 8007280:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007282:	2301      	movs	r3, #1
 8007284:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800728a:	4b1f      	ldr	r3, [pc, #124]	; (8007308 <FATFS_LinkDriverEx+0x94>)
 800728c:	7a5b      	ldrb	r3, [r3, #9]
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	d131      	bne.n	80072f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007294:	4b1c      	ldr	r3, [pc, #112]	; (8007308 <FATFS_LinkDriverEx+0x94>)
 8007296:	7a5b      	ldrb	r3, [r3, #9]
 8007298:	b2db      	uxtb	r3, r3
 800729a:	461a      	mov	r2, r3
 800729c:	4b1a      	ldr	r3, [pc, #104]	; (8007308 <FATFS_LinkDriverEx+0x94>)
 800729e:	2100      	movs	r1, #0
 80072a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80072a2:	4b19      	ldr	r3, [pc, #100]	; (8007308 <FATFS_LinkDriverEx+0x94>)
 80072a4:	7a5b      	ldrb	r3, [r3, #9]
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	4a17      	ldr	r2, [pc, #92]	; (8007308 <FATFS_LinkDriverEx+0x94>)
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80072b2:	4b15      	ldr	r3, [pc, #84]	; (8007308 <FATFS_LinkDriverEx+0x94>)
 80072b4:	7a5b      	ldrb	r3, [r3, #9]
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	461a      	mov	r2, r3
 80072ba:	4b13      	ldr	r3, [pc, #76]	; (8007308 <FATFS_LinkDriverEx+0x94>)
 80072bc:	4413      	add	r3, r2
 80072be:	79fa      	ldrb	r2, [r7, #7]
 80072c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80072c2:	4b11      	ldr	r3, [pc, #68]	; (8007308 <FATFS_LinkDriverEx+0x94>)
 80072c4:	7a5b      	ldrb	r3, [r3, #9]
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	b2d1      	uxtb	r1, r2
 80072cc:	4a0e      	ldr	r2, [pc, #56]	; (8007308 <FATFS_LinkDriverEx+0x94>)
 80072ce:	7251      	strb	r1, [r2, #9]
 80072d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80072d2:	7dbb      	ldrb	r3, [r7, #22]
 80072d4:	3330      	adds	r3, #48	; 0x30
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	3301      	adds	r3, #1
 80072e0:	223a      	movs	r2, #58	; 0x3a
 80072e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	3302      	adds	r3, #2
 80072e8:	222f      	movs	r2, #47	; 0x2f
 80072ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	3303      	adds	r3, #3
 80072f0:	2200      	movs	r2, #0
 80072f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	200002c0 	.word	0x200002c0

0800730c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007316:	2200      	movs	r2, #0
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7ff ffaa 	bl	8007274 <FATFS_LinkDriverEx>
 8007320:	4603      	mov	r3, r0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <_vsniprintf_r>:
 800732a:	b530      	push	{r4, r5, lr}
 800732c:	4614      	mov	r4, r2
 800732e:	2c00      	cmp	r4, #0
 8007330:	b09b      	sub	sp, #108	; 0x6c
 8007332:	4605      	mov	r5, r0
 8007334:	461a      	mov	r2, r3
 8007336:	da05      	bge.n	8007344 <_vsniprintf_r+0x1a>
 8007338:	238b      	movs	r3, #139	; 0x8b
 800733a:	6003      	str	r3, [r0, #0]
 800733c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007340:	b01b      	add	sp, #108	; 0x6c
 8007342:	bd30      	pop	{r4, r5, pc}
 8007344:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007348:	f8ad 300c 	strh.w	r3, [sp, #12]
 800734c:	bf14      	ite	ne
 800734e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007352:	4623      	moveq	r3, r4
 8007354:	9302      	str	r3, [sp, #8]
 8007356:	9305      	str	r3, [sp, #20]
 8007358:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800735c:	9100      	str	r1, [sp, #0]
 800735e:	9104      	str	r1, [sp, #16]
 8007360:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007364:	4669      	mov	r1, sp
 8007366:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007368:	f000 f99e 	bl	80076a8 <_svfiprintf_r>
 800736c:	1c43      	adds	r3, r0, #1
 800736e:	bfbc      	itt	lt
 8007370:	238b      	movlt	r3, #139	; 0x8b
 8007372:	602b      	strlt	r3, [r5, #0]
 8007374:	2c00      	cmp	r4, #0
 8007376:	d0e3      	beq.n	8007340 <_vsniprintf_r+0x16>
 8007378:	9b00      	ldr	r3, [sp, #0]
 800737a:	2200      	movs	r2, #0
 800737c:	701a      	strb	r2, [r3, #0]
 800737e:	e7df      	b.n	8007340 <_vsniprintf_r+0x16>

08007380 <vsniprintf>:
 8007380:	b507      	push	{r0, r1, r2, lr}
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	4613      	mov	r3, r2
 8007386:	460a      	mov	r2, r1
 8007388:	4601      	mov	r1, r0
 800738a:	4803      	ldr	r0, [pc, #12]	; (8007398 <vsniprintf+0x18>)
 800738c:	6800      	ldr	r0, [r0, #0]
 800738e:	f7ff ffcc 	bl	800732a <_vsniprintf_r>
 8007392:	b003      	add	sp, #12
 8007394:	f85d fb04 	ldr.w	pc, [sp], #4
 8007398:	20000070 	.word	0x20000070

0800739c <memset>:
 800739c:	4402      	add	r2, r0
 800739e:	4603      	mov	r3, r0
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d100      	bne.n	80073a6 <memset+0xa>
 80073a4:	4770      	bx	lr
 80073a6:	f803 1b01 	strb.w	r1, [r3], #1
 80073aa:	e7f9      	b.n	80073a0 <memset+0x4>

080073ac <__errno>:
 80073ac:	4b01      	ldr	r3, [pc, #4]	; (80073b4 <__errno+0x8>)
 80073ae:	6818      	ldr	r0, [r3, #0]
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	20000070 	.word	0x20000070

080073b8 <__libc_init_array>:
 80073b8:	b570      	push	{r4, r5, r6, lr}
 80073ba:	4d0d      	ldr	r5, [pc, #52]	; (80073f0 <__libc_init_array+0x38>)
 80073bc:	4c0d      	ldr	r4, [pc, #52]	; (80073f4 <__libc_init_array+0x3c>)
 80073be:	1b64      	subs	r4, r4, r5
 80073c0:	10a4      	asrs	r4, r4, #2
 80073c2:	2600      	movs	r6, #0
 80073c4:	42a6      	cmp	r6, r4
 80073c6:	d109      	bne.n	80073dc <__libc_init_array+0x24>
 80073c8:	4d0b      	ldr	r5, [pc, #44]	; (80073f8 <__libc_init_array+0x40>)
 80073ca:	4c0c      	ldr	r4, [pc, #48]	; (80073fc <__libc_init_array+0x44>)
 80073cc:	f000 fc6a 	bl	8007ca4 <_init>
 80073d0:	1b64      	subs	r4, r4, r5
 80073d2:	10a4      	asrs	r4, r4, #2
 80073d4:	2600      	movs	r6, #0
 80073d6:	42a6      	cmp	r6, r4
 80073d8:	d105      	bne.n	80073e6 <__libc_init_array+0x2e>
 80073da:	bd70      	pop	{r4, r5, r6, pc}
 80073dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80073e0:	4798      	blx	r3
 80073e2:	3601      	adds	r6, #1
 80073e4:	e7ee      	b.n	80073c4 <__libc_init_array+0xc>
 80073e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ea:	4798      	blx	r3
 80073ec:	3601      	adds	r6, #1
 80073ee:	e7f2      	b.n	80073d6 <__libc_init_array+0x1e>
 80073f0:	08007fbc 	.word	0x08007fbc
 80073f4:	08007fbc 	.word	0x08007fbc
 80073f8:	08007fbc 	.word	0x08007fbc
 80073fc:	08007fc0 	.word	0x08007fc0

08007400 <__retarget_lock_acquire_recursive>:
 8007400:	4770      	bx	lr

08007402 <__retarget_lock_release_recursive>:
 8007402:	4770      	bx	lr

08007404 <_free_r>:
 8007404:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007406:	2900      	cmp	r1, #0
 8007408:	d044      	beq.n	8007494 <_free_r+0x90>
 800740a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800740e:	9001      	str	r0, [sp, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	f1a1 0404 	sub.w	r4, r1, #4
 8007416:	bfb8      	it	lt
 8007418:	18e4      	addlt	r4, r4, r3
 800741a:	f000 f8df 	bl	80075dc <__malloc_lock>
 800741e:	4a1e      	ldr	r2, [pc, #120]	; (8007498 <_free_r+0x94>)
 8007420:	9801      	ldr	r0, [sp, #4]
 8007422:	6813      	ldr	r3, [r2, #0]
 8007424:	b933      	cbnz	r3, 8007434 <_free_r+0x30>
 8007426:	6063      	str	r3, [r4, #4]
 8007428:	6014      	str	r4, [r2, #0]
 800742a:	b003      	add	sp, #12
 800742c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007430:	f000 b8da 	b.w	80075e8 <__malloc_unlock>
 8007434:	42a3      	cmp	r3, r4
 8007436:	d908      	bls.n	800744a <_free_r+0x46>
 8007438:	6825      	ldr	r5, [r4, #0]
 800743a:	1961      	adds	r1, r4, r5
 800743c:	428b      	cmp	r3, r1
 800743e:	bf01      	itttt	eq
 8007440:	6819      	ldreq	r1, [r3, #0]
 8007442:	685b      	ldreq	r3, [r3, #4]
 8007444:	1949      	addeq	r1, r1, r5
 8007446:	6021      	streq	r1, [r4, #0]
 8007448:	e7ed      	b.n	8007426 <_free_r+0x22>
 800744a:	461a      	mov	r2, r3
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	b10b      	cbz	r3, 8007454 <_free_r+0x50>
 8007450:	42a3      	cmp	r3, r4
 8007452:	d9fa      	bls.n	800744a <_free_r+0x46>
 8007454:	6811      	ldr	r1, [r2, #0]
 8007456:	1855      	adds	r5, r2, r1
 8007458:	42a5      	cmp	r5, r4
 800745a:	d10b      	bne.n	8007474 <_free_r+0x70>
 800745c:	6824      	ldr	r4, [r4, #0]
 800745e:	4421      	add	r1, r4
 8007460:	1854      	adds	r4, r2, r1
 8007462:	42a3      	cmp	r3, r4
 8007464:	6011      	str	r1, [r2, #0]
 8007466:	d1e0      	bne.n	800742a <_free_r+0x26>
 8007468:	681c      	ldr	r4, [r3, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	6053      	str	r3, [r2, #4]
 800746e:	440c      	add	r4, r1
 8007470:	6014      	str	r4, [r2, #0]
 8007472:	e7da      	b.n	800742a <_free_r+0x26>
 8007474:	d902      	bls.n	800747c <_free_r+0x78>
 8007476:	230c      	movs	r3, #12
 8007478:	6003      	str	r3, [r0, #0]
 800747a:	e7d6      	b.n	800742a <_free_r+0x26>
 800747c:	6825      	ldr	r5, [r4, #0]
 800747e:	1961      	adds	r1, r4, r5
 8007480:	428b      	cmp	r3, r1
 8007482:	bf04      	itt	eq
 8007484:	6819      	ldreq	r1, [r3, #0]
 8007486:	685b      	ldreq	r3, [r3, #4]
 8007488:	6063      	str	r3, [r4, #4]
 800748a:	bf04      	itt	eq
 800748c:	1949      	addeq	r1, r1, r5
 800748e:	6021      	streq	r1, [r4, #0]
 8007490:	6054      	str	r4, [r2, #4]
 8007492:	e7ca      	b.n	800742a <_free_r+0x26>
 8007494:	b003      	add	sp, #12
 8007496:	bd30      	pop	{r4, r5, pc}
 8007498:	2000040c 	.word	0x2000040c

0800749c <sbrk_aligned>:
 800749c:	b570      	push	{r4, r5, r6, lr}
 800749e:	4e0e      	ldr	r6, [pc, #56]	; (80074d8 <sbrk_aligned+0x3c>)
 80074a0:	460c      	mov	r4, r1
 80074a2:	6831      	ldr	r1, [r6, #0]
 80074a4:	4605      	mov	r5, r0
 80074a6:	b911      	cbnz	r1, 80074ae <sbrk_aligned+0x12>
 80074a8:	f000 fba6 	bl	8007bf8 <_sbrk_r>
 80074ac:	6030      	str	r0, [r6, #0]
 80074ae:	4621      	mov	r1, r4
 80074b0:	4628      	mov	r0, r5
 80074b2:	f000 fba1 	bl	8007bf8 <_sbrk_r>
 80074b6:	1c43      	adds	r3, r0, #1
 80074b8:	d00a      	beq.n	80074d0 <sbrk_aligned+0x34>
 80074ba:	1cc4      	adds	r4, r0, #3
 80074bc:	f024 0403 	bic.w	r4, r4, #3
 80074c0:	42a0      	cmp	r0, r4
 80074c2:	d007      	beq.n	80074d4 <sbrk_aligned+0x38>
 80074c4:	1a21      	subs	r1, r4, r0
 80074c6:	4628      	mov	r0, r5
 80074c8:	f000 fb96 	bl	8007bf8 <_sbrk_r>
 80074cc:	3001      	adds	r0, #1
 80074ce:	d101      	bne.n	80074d4 <sbrk_aligned+0x38>
 80074d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80074d4:	4620      	mov	r0, r4
 80074d6:	bd70      	pop	{r4, r5, r6, pc}
 80074d8:	20000410 	.word	0x20000410

080074dc <_malloc_r>:
 80074dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e0:	1ccd      	adds	r5, r1, #3
 80074e2:	f025 0503 	bic.w	r5, r5, #3
 80074e6:	3508      	adds	r5, #8
 80074e8:	2d0c      	cmp	r5, #12
 80074ea:	bf38      	it	cc
 80074ec:	250c      	movcc	r5, #12
 80074ee:	2d00      	cmp	r5, #0
 80074f0:	4607      	mov	r7, r0
 80074f2:	db01      	blt.n	80074f8 <_malloc_r+0x1c>
 80074f4:	42a9      	cmp	r1, r5
 80074f6:	d905      	bls.n	8007504 <_malloc_r+0x28>
 80074f8:	230c      	movs	r3, #12
 80074fa:	603b      	str	r3, [r7, #0]
 80074fc:	2600      	movs	r6, #0
 80074fe:	4630      	mov	r0, r6
 8007500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007504:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80075d8 <_malloc_r+0xfc>
 8007508:	f000 f868 	bl	80075dc <__malloc_lock>
 800750c:	f8d8 3000 	ldr.w	r3, [r8]
 8007510:	461c      	mov	r4, r3
 8007512:	bb5c      	cbnz	r4, 800756c <_malloc_r+0x90>
 8007514:	4629      	mov	r1, r5
 8007516:	4638      	mov	r0, r7
 8007518:	f7ff ffc0 	bl	800749c <sbrk_aligned>
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	4604      	mov	r4, r0
 8007520:	d155      	bne.n	80075ce <_malloc_r+0xf2>
 8007522:	f8d8 4000 	ldr.w	r4, [r8]
 8007526:	4626      	mov	r6, r4
 8007528:	2e00      	cmp	r6, #0
 800752a:	d145      	bne.n	80075b8 <_malloc_r+0xdc>
 800752c:	2c00      	cmp	r4, #0
 800752e:	d048      	beq.n	80075c2 <_malloc_r+0xe6>
 8007530:	6823      	ldr	r3, [r4, #0]
 8007532:	4631      	mov	r1, r6
 8007534:	4638      	mov	r0, r7
 8007536:	eb04 0903 	add.w	r9, r4, r3
 800753a:	f000 fb5d 	bl	8007bf8 <_sbrk_r>
 800753e:	4581      	cmp	r9, r0
 8007540:	d13f      	bne.n	80075c2 <_malloc_r+0xe6>
 8007542:	6821      	ldr	r1, [r4, #0]
 8007544:	1a6d      	subs	r5, r5, r1
 8007546:	4629      	mov	r1, r5
 8007548:	4638      	mov	r0, r7
 800754a:	f7ff ffa7 	bl	800749c <sbrk_aligned>
 800754e:	3001      	adds	r0, #1
 8007550:	d037      	beq.n	80075c2 <_malloc_r+0xe6>
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	442b      	add	r3, r5
 8007556:	6023      	str	r3, [r4, #0]
 8007558:	f8d8 3000 	ldr.w	r3, [r8]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d038      	beq.n	80075d2 <_malloc_r+0xf6>
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	42a2      	cmp	r2, r4
 8007564:	d12b      	bne.n	80075be <_malloc_r+0xe2>
 8007566:	2200      	movs	r2, #0
 8007568:	605a      	str	r2, [r3, #4]
 800756a:	e00f      	b.n	800758c <_malloc_r+0xb0>
 800756c:	6822      	ldr	r2, [r4, #0]
 800756e:	1b52      	subs	r2, r2, r5
 8007570:	d41f      	bmi.n	80075b2 <_malloc_r+0xd6>
 8007572:	2a0b      	cmp	r2, #11
 8007574:	d917      	bls.n	80075a6 <_malloc_r+0xca>
 8007576:	1961      	adds	r1, r4, r5
 8007578:	42a3      	cmp	r3, r4
 800757a:	6025      	str	r5, [r4, #0]
 800757c:	bf18      	it	ne
 800757e:	6059      	strne	r1, [r3, #4]
 8007580:	6863      	ldr	r3, [r4, #4]
 8007582:	bf08      	it	eq
 8007584:	f8c8 1000 	streq.w	r1, [r8]
 8007588:	5162      	str	r2, [r4, r5]
 800758a:	604b      	str	r3, [r1, #4]
 800758c:	4638      	mov	r0, r7
 800758e:	f104 060b 	add.w	r6, r4, #11
 8007592:	f000 f829 	bl	80075e8 <__malloc_unlock>
 8007596:	f026 0607 	bic.w	r6, r6, #7
 800759a:	1d23      	adds	r3, r4, #4
 800759c:	1af2      	subs	r2, r6, r3
 800759e:	d0ae      	beq.n	80074fe <_malloc_r+0x22>
 80075a0:	1b9b      	subs	r3, r3, r6
 80075a2:	50a3      	str	r3, [r4, r2]
 80075a4:	e7ab      	b.n	80074fe <_malloc_r+0x22>
 80075a6:	42a3      	cmp	r3, r4
 80075a8:	6862      	ldr	r2, [r4, #4]
 80075aa:	d1dd      	bne.n	8007568 <_malloc_r+0x8c>
 80075ac:	f8c8 2000 	str.w	r2, [r8]
 80075b0:	e7ec      	b.n	800758c <_malloc_r+0xb0>
 80075b2:	4623      	mov	r3, r4
 80075b4:	6864      	ldr	r4, [r4, #4]
 80075b6:	e7ac      	b.n	8007512 <_malloc_r+0x36>
 80075b8:	4634      	mov	r4, r6
 80075ba:	6876      	ldr	r6, [r6, #4]
 80075bc:	e7b4      	b.n	8007528 <_malloc_r+0x4c>
 80075be:	4613      	mov	r3, r2
 80075c0:	e7cc      	b.n	800755c <_malloc_r+0x80>
 80075c2:	230c      	movs	r3, #12
 80075c4:	603b      	str	r3, [r7, #0]
 80075c6:	4638      	mov	r0, r7
 80075c8:	f000 f80e 	bl	80075e8 <__malloc_unlock>
 80075cc:	e797      	b.n	80074fe <_malloc_r+0x22>
 80075ce:	6025      	str	r5, [r4, #0]
 80075d0:	e7dc      	b.n	800758c <_malloc_r+0xb0>
 80075d2:	605b      	str	r3, [r3, #4]
 80075d4:	deff      	udf	#255	; 0xff
 80075d6:	bf00      	nop
 80075d8:	2000040c 	.word	0x2000040c

080075dc <__malloc_lock>:
 80075dc:	4801      	ldr	r0, [pc, #4]	; (80075e4 <__malloc_lock+0x8>)
 80075de:	f7ff bf0f 	b.w	8007400 <__retarget_lock_acquire_recursive>
 80075e2:	bf00      	nop
 80075e4:	20000408 	.word	0x20000408

080075e8 <__malloc_unlock>:
 80075e8:	4801      	ldr	r0, [pc, #4]	; (80075f0 <__malloc_unlock+0x8>)
 80075ea:	f7ff bf0a 	b.w	8007402 <__retarget_lock_release_recursive>
 80075ee:	bf00      	nop
 80075f0:	20000408 	.word	0x20000408

080075f4 <__ssputs_r>:
 80075f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075f8:	688e      	ldr	r6, [r1, #8]
 80075fa:	461f      	mov	r7, r3
 80075fc:	42be      	cmp	r6, r7
 80075fe:	680b      	ldr	r3, [r1, #0]
 8007600:	4682      	mov	sl, r0
 8007602:	460c      	mov	r4, r1
 8007604:	4690      	mov	r8, r2
 8007606:	d82c      	bhi.n	8007662 <__ssputs_r+0x6e>
 8007608:	898a      	ldrh	r2, [r1, #12]
 800760a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800760e:	d026      	beq.n	800765e <__ssputs_r+0x6a>
 8007610:	6965      	ldr	r5, [r4, #20]
 8007612:	6909      	ldr	r1, [r1, #16]
 8007614:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007618:	eba3 0901 	sub.w	r9, r3, r1
 800761c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007620:	1c7b      	adds	r3, r7, #1
 8007622:	444b      	add	r3, r9
 8007624:	106d      	asrs	r5, r5, #1
 8007626:	429d      	cmp	r5, r3
 8007628:	bf38      	it	cc
 800762a:	461d      	movcc	r5, r3
 800762c:	0553      	lsls	r3, r2, #21
 800762e:	d527      	bpl.n	8007680 <__ssputs_r+0x8c>
 8007630:	4629      	mov	r1, r5
 8007632:	f7ff ff53 	bl	80074dc <_malloc_r>
 8007636:	4606      	mov	r6, r0
 8007638:	b360      	cbz	r0, 8007694 <__ssputs_r+0xa0>
 800763a:	6921      	ldr	r1, [r4, #16]
 800763c:	464a      	mov	r2, r9
 800763e:	f000 faeb 	bl	8007c18 <memcpy>
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800764c:	81a3      	strh	r3, [r4, #12]
 800764e:	6126      	str	r6, [r4, #16]
 8007650:	6165      	str	r5, [r4, #20]
 8007652:	444e      	add	r6, r9
 8007654:	eba5 0509 	sub.w	r5, r5, r9
 8007658:	6026      	str	r6, [r4, #0]
 800765a:	60a5      	str	r5, [r4, #8]
 800765c:	463e      	mov	r6, r7
 800765e:	42be      	cmp	r6, r7
 8007660:	d900      	bls.n	8007664 <__ssputs_r+0x70>
 8007662:	463e      	mov	r6, r7
 8007664:	6820      	ldr	r0, [r4, #0]
 8007666:	4632      	mov	r2, r6
 8007668:	4641      	mov	r1, r8
 800766a:	f000 faab 	bl	8007bc4 <memmove>
 800766e:	68a3      	ldr	r3, [r4, #8]
 8007670:	1b9b      	subs	r3, r3, r6
 8007672:	60a3      	str	r3, [r4, #8]
 8007674:	6823      	ldr	r3, [r4, #0]
 8007676:	4433      	add	r3, r6
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	2000      	movs	r0, #0
 800767c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007680:	462a      	mov	r2, r5
 8007682:	f000 fad7 	bl	8007c34 <_realloc_r>
 8007686:	4606      	mov	r6, r0
 8007688:	2800      	cmp	r0, #0
 800768a:	d1e0      	bne.n	800764e <__ssputs_r+0x5a>
 800768c:	6921      	ldr	r1, [r4, #16]
 800768e:	4650      	mov	r0, sl
 8007690:	f7ff feb8 	bl	8007404 <_free_r>
 8007694:	230c      	movs	r3, #12
 8007696:	f8ca 3000 	str.w	r3, [sl]
 800769a:	89a3      	ldrh	r3, [r4, #12]
 800769c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076a0:	81a3      	strh	r3, [r4, #12]
 80076a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076a6:	e7e9      	b.n	800767c <__ssputs_r+0x88>

080076a8 <_svfiprintf_r>:
 80076a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ac:	4698      	mov	r8, r3
 80076ae:	898b      	ldrh	r3, [r1, #12]
 80076b0:	061b      	lsls	r3, r3, #24
 80076b2:	b09d      	sub	sp, #116	; 0x74
 80076b4:	4607      	mov	r7, r0
 80076b6:	460d      	mov	r5, r1
 80076b8:	4614      	mov	r4, r2
 80076ba:	d50e      	bpl.n	80076da <_svfiprintf_r+0x32>
 80076bc:	690b      	ldr	r3, [r1, #16]
 80076be:	b963      	cbnz	r3, 80076da <_svfiprintf_r+0x32>
 80076c0:	2140      	movs	r1, #64	; 0x40
 80076c2:	f7ff ff0b 	bl	80074dc <_malloc_r>
 80076c6:	6028      	str	r0, [r5, #0]
 80076c8:	6128      	str	r0, [r5, #16]
 80076ca:	b920      	cbnz	r0, 80076d6 <_svfiprintf_r+0x2e>
 80076cc:	230c      	movs	r3, #12
 80076ce:	603b      	str	r3, [r7, #0]
 80076d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076d4:	e0d0      	b.n	8007878 <_svfiprintf_r+0x1d0>
 80076d6:	2340      	movs	r3, #64	; 0x40
 80076d8:	616b      	str	r3, [r5, #20]
 80076da:	2300      	movs	r3, #0
 80076dc:	9309      	str	r3, [sp, #36]	; 0x24
 80076de:	2320      	movs	r3, #32
 80076e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80076e8:	2330      	movs	r3, #48	; 0x30
 80076ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007890 <_svfiprintf_r+0x1e8>
 80076ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076f2:	f04f 0901 	mov.w	r9, #1
 80076f6:	4623      	mov	r3, r4
 80076f8:	469a      	mov	sl, r3
 80076fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076fe:	b10a      	cbz	r2, 8007704 <_svfiprintf_r+0x5c>
 8007700:	2a25      	cmp	r2, #37	; 0x25
 8007702:	d1f9      	bne.n	80076f8 <_svfiprintf_r+0x50>
 8007704:	ebba 0b04 	subs.w	fp, sl, r4
 8007708:	d00b      	beq.n	8007722 <_svfiprintf_r+0x7a>
 800770a:	465b      	mov	r3, fp
 800770c:	4622      	mov	r2, r4
 800770e:	4629      	mov	r1, r5
 8007710:	4638      	mov	r0, r7
 8007712:	f7ff ff6f 	bl	80075f4 <__ssputs_r>
 8007716:	3001      	adds	r0, #1
 8007718:	f000 80a9 	beq.w	800786e <_svfiprintf_r+0x1c6>
 800771c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800771e:	445a      	add	r2, fp
 8007720:	9209      	str	r2, [sp, #36]	; 0x24
 8007722:	f89a 3000 	ldrb.w	r3, [sl]
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 80a1 	beq.w	800786e <_svfiprintf_r+0x1c6>
 800772c:	2300      	movs	r3, #0
 800772e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007732:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007736:	f10a 0a01 	add.w	sl, sl, #1
 800773a:	9304      	str	r3, [sp, #16]
 800773c:	9307      	str	r3, [sp, #28]
 800773e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007742:	931a      	str	r3, [sp, #104]	; 0x68
 8007744:	4654      	mov	r4, sl
 8007746:	2205      	movs	r2, #5
 8007748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800774c:	4850      	ldr	r0, [pc, #320]	; (8007890 <_svfiprintf_r+0x1e8>)
 800774e:	f7f8 fd47 	bl	80001e0 <memchr>
 8007752:	9a04      	ldr	r2, [sp, #16]
 8007754:	b9d8      	cbnz	r0, 800778e <_svfiprintf_r+0xe6>
 8007756:	06d0      	lsls	r0, r2, #27
 8007758:	bf44      	itt	mi
 800775a:	2320      	movmi	r3, #32
 800775c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007760:	0711      	lsls	r1, r2, #28
 8007762:	bf44      	itt	mi
 8007764:	232b      	movmi	r3, #43	; 0x2b
 8007766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800776a:	f89a 3000 	ldrb.w	r3, [sl]
 800776e:	2b2a      	cmp	r3, #42	; 0x2a
 8007770:	d015      	beq.n	800779e <_svfiprintf_r+0xf6>
 8007772:	9a07      	ldr	r2, [sp, #28]
 8007774:	4654      	mov	r4, sl
 8007776:	2000      	movs	r0, #0
 8007778:	f04f 0c0a 	mov.w	ip, #10
 800777c:	4621      	mov	r1, r4
 800777e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007782:	3b30      	subs	r3, #48	; 0x30
 8007784:	2b09      	cmp	r3, #9
 8007786:	d94d      	bls.n	8007824 <_svfiprintf_r+0x17c>
 8007788:	b1b0      	cbz	r0, 80077b8 <_svfiprintf_r+0x110>
 800778a:	9207      	str	r2, [sp, #28]
 800778c:	e014      	b.n	80077b8 <_svfiprintf_r+0x110>
 800778e:	eba0 0308 	sub.w	r3, r0, r8
 8007792:	fa09 f303 	lsl.w	r3, r9, r3
 8007796:	4313      	orrs	r3, r2
 8007798:	9304      	str	r3, [sp, #16]
 800779a:	46a2      	mov	sl, r4
 800779c:	e7d2      	b.n	8007744 <_svfiprintf_r+0x9c>
 800779e:	9b03      	ldr	r3, [sp, #12]
 80077a0:	1d19      	adds	r1, r3, #4
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	9103      	str	r1, [sp, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	bfbb      	ittet	lt
 80077aa:	425b      	neglt	r3, r3
 80077ac:	f042 0202 	orrlt.w	r2, r2, #2
 80077b0:	9307      	strge	r3, [sp, #28]
 80077b2:	9307      	strlt	r3, [sp, #28]
 80077b4:	bfb8      	it	lt
 80077b6:	9204      	strlt	r2, [sp, #16]
 80077b8:	7823      	ldrb	r3, [r4, #0]
 80077ba:	2b2e      	cmp	r3, #46	; 0x2e
 80077bc:	d10c      	bne.n	80077d8 <_svfiprintf_r+0x130>
 80077be:	7863      	ldrb	r3, [r4, #1]
 80077c0:	2b2a      	cmp	r3, #42	; 0x2a
 80077c2:	d134      	bne.n	800782e <_svfiprintf_r+0x186>
 80077c4:	9b03      	ldr	r3, [sp, #12]
 80077c6:	1d1a      	adds	r2, r3, #4
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	9203      	str	r2, [sp, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	bfb8      	it	lt
 80077d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80077d4:	3402      	adds	r4, #2
 80077d6:	9305      	str	r3, [sp, #20]
 80077d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80078a0 <_svfiprintf_r+0x1f8>
 80077dc:	7821      	ldrb	r1, [r4, #0]
 80077de:	2203      	movs	r2, #3
 80077e0:	4650      	mov	r0, sl
 80077e2:	f7f8 fcfd 	bl	80001e0 <memchr>
 80077e6:	b138      	cbz	r0, 80077f8 <_svfiprintf_r+0x150>
 80077e8:	9b04      	ldr	r3, [sp, #16]
 80077ea:	eba0 000a 	sub.w	r0, r0, sl
 80077ee:	2240      	movs	r2, #64	; 0x40
 80077f0:	4082      	lsls	r2, r0
 80077f2:	4313      	orrs	r3, r2
 80077f4:	3401      	adds	r4, #1
 80077f6:	9304      	str	r3, [sp, #16]
 80077f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077fc:	4825      	ldr	r0, [pc, #148]	; (8007894 <_svfiprintf_r+0x1ec>)
 80077fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007802:	2206      	movs	r2, #6
 8007804:	f7f8 fcec 	bl	80001e0 <memchr>
 8007808:	2800      	cmp	r0, #0
 800780a:	d038      	beq.n	800787e <_svfiprintf_r+0x1d6>
 800780c:	4b22      	ldr	r3, [pc, #136]	; (8007898 <_svfiprintf_r+0x1f0>)
 800780e:	bb1b      	cbnz	r3, 8007858 <_svfiprintf_r+0x1b0>
 8007810:	9b03      	ldr	r3, [sp, #12]
 8007812:	3307      	adds	r3, #7
 8007814:	f023 0307 	bic.w	r3, r3, #7
 8007818:	3308      	adds	r3, #8
 800781a:	9303      	str	r3, [sp, #12]
 800781c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800781e:	4433      	add	r3, r6
 8007820:	9309      	str	r3, [sp, #36]	; 0x24
 8007822:	e768      	b.n	80076f6 <_svfiprintf_r+0x4e>
 8007824:	fb0c 3202 	mla	r2, ip, r2, r3
 8007828:	460c      	mov	r4, r1
 800782a:	2001      	movs	r0, #1
 800782c:	e7a6      	b.n	800777c <_svfiprintf_r+0xd4>
 800782e:	2300      	movs	r3, #0
 8007830:	3401      	adds	r4, #1
 8007832:	9305      	str	r3, [sp, #20]
 8007834:	4619      	mov	r1, r3
 8007836:	f04f 0c0a 	mov.w	ip, #10
 800783a:	4620      	mov	r0, r4
 800783c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007840:	3a30      	subs	r2, #48	; 0x30
 8007842:	2a09      	cmp	r2, #9
 8007844:	d903      	bls.n	800784e <_svfiprintf_r+0x1a6>
 8007846:	2b00      	cmp	r3, #0
 8007848:	d0c6      	beq.n	80077d8 <_svfiprintf_r+0x130>
 800784a:	9105      	str	r1, [sp, #20]
 800784c:	e7c4      	b.n	80077d8 <_svfiprintf_r+0x130>
 800784e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007852:	4604      	mov	r4, r0
 8007854:	2301      	movs	r3, #1
 8007856:	e7f0      	b.n	800783a <_svfiprintf_r+0x192>
 8007858:	ab03      	add	r3, sp, #12
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	462a      	mov	r2, r5
 800785e:	4b0f      	ldr	r3, [pc, #60]	; (800789c <_svfiprintf_r+0x1f4>)
 8007860:	a904      	add	r1, sp, #16
 8007862:	4638      	mov	r0, r7
 8007864:	f3af 8000 	nop.w
 8007868:	1c42      	adds	r2, r0, #1
 800786a:	4606      	mov	r6, r0
 800786c:	d1d6      	bne.n	800781c <_svfiprintf_r+0x174>
 800786e:	89ab      	ldrh	r3, [r5, #12]
 8007870:	065b      	lsls	r3, r3, #25
 8007872:	f53f af2d 	bmi.w	80076d0 <_svfiprintf_r+0x28>
 8007876:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007878:	b01d      	add	sp, #116	; 0x74
 800787a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800787e:	ab03      	add	r3, sp, #12
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	462a      	mov	r2, r5
 8007884:	4b05      	ldr	r3, [pc, #20]	; (800789c <_svfiprintf_r+0x1f4>)
 8007886:	a904      	add	r1, sp, #16
 8007888:	4638      	mov	r0, r7
 800788a:	f000 f879 	bl	8007980 <_printf_i>
 800788e:	e7eb      	b.n	8007868 <_svfiprintf_r+0x1c0>
 8007890:	08007f80 	.word	0x08007f80
 8007894:	08007f8a 	.word	0x08007f8a
 8007898:	00000000 	.word	0x00000000
 800789c:	080075f5 	.word	0x080075f5
 80078a0:	08007f86 	.word	0x08007f86

080078a4 <_printf_common>:
 80078a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a8:	4616      	mov	r6, r2
 80078aa:	4699      	mov	r9, r3
 80078ac:	688a      	ldr	r2, [r1, #8]
 80078ae:	690b      	ldr	r3, [r1, #16]
 80078b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078b4:	4293      	cmp	r3, r2
 80078b6:	bfb8      	it	lt
 80078b8:	4613      	movlt	r3, r2
 80078ba:	6033      	str	r3, [r6, #0]
 80078bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078c0:	4607      	mov	r7, r0
 80078c2:	460c      	mov	r4, r1
 80078c4:	b10a      	cbz	r2, 80078ca <_printf_common+0x26>
 80078c6:	3301      	adds	r3, #1
 80078c8:	6033      	str	r3, [r6, #0]
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	0699      	lsls	r1, r3, #26
 80078ce:	bf42      	ittt	mi
 80078d0:	6833      	ldrmi	r3, [r6, #0]
 80078d2:	3302      	addmi	r3, #2
 80078d4:	6033      	strmi	r3, [r6, #0]
 80078d6:	6825      	ldr	r5, [r4, #0]
 80078d8:	f015 0506 	ands.w	r5, r5, #6
 80078dc:	d106      	bne.n	80078ec <_printf_common+0x48>
 80078de:	f104 0a19 	add.w	sl, r4, #25
 80078e2:	68e3      	ldr	r3, [r4, #12]
 80078e4:	6832      	ldr	r2, [r6, #0]
 80078e6:	1a9b      	subs	r3, r3, r2
 80078e8:	42ab      	cmp	r3, r5
 80078ea:	dc26      	bgt.n	800793a <_printf_common+0x96>
 80078ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078f0:	1e13      	subs	r3, r2, #0
 80078f2:	6822      	ldr	r2, [r4, #0]
 80078f4:	bf18      	it	ne
 80078f6:	2301      	movne	r3, #1
 80078f8:	0692      	lsls	r2, r2, #26
 80078fa:	d42b      	bmi.n	8007954 <_printf_common+0xb0>
 80078fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007900:	4649      	mov	r1, r9
 8007902:	4638      	mov	r0, r7
 8007904:	47c0      	blx	r8
 8007906:	3001      	adds	r0, #1
 8007908:	d01e      	beq.n	8007948 <_printf_common+0xa4>
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	6922      	ldr	r2, [r4, #16]
 800790e:	f003 0306 	and.w	r3, r3, #6
 8007912:	2b04      	cmp	r3, #4
 8007914:	bf02      	ittt	eq
 8007916:	68e5      	ldreq	r5, [r4, #12]
 8007918:	6833      	ldreq	r3, [r6, #0]
 800791a:	1aed      	subeq	r5, r5, r3
 800791c:	68a3      	ldr	r3, [r4, #8]
 800791e:	bf0c      	ite	eq
 8007920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007924:	2500      	movne	r5, #0
 8007926:	4293      	cmp	r3, r2
 8007928:	bfc4      	itt	gt
 800792a:	1a9b      	subgt	r3, r3, r2
 800792c:	18ed      	addgt	r5, r5, r3
 800792e:	2600      	movs	r6, #0
 8007930:	341a      	adds	r4, #26
 8007932:	42b5      	cmp	r5, r6
 8007934:	d11a      	bne.n	800796c <_printf_common+0xc8>
 8007936:	2000      	movs	r0, #0
 8007938:	e008      	b.n	800794c <_printf_common+0xa8>
 800793a:	2301      	movs	r3, #1
 800793c:	4652      	mov	r2, sl
 800793e:	4649      	mov	r1, r9
 8007940:	4638      	mov	r0, r7
 8007942:	47c0      	blx	r8
 8007944:	3001      	adds	r0, #1
 8007946:	d103      	bne.n	8007950 <_printf_common+0xac>
 8007948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800794c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007950:	3501      	adds	r5, #1
 8007952:	e7c6      	b.n	80078e2 <_printf_common+0x3e>
 8007954:	18e1      	adds	r1, r4, r3
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	2030      	movs	r0, #48	; 0x30
 800795a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800795e:	4422      	add	r2, r4
 8007960:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007964:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007968:	3302      	adds	r3, #2
 800796a:	e7c7      	b.n	80078fc <_printf_common+0x58>
 800796c:	2301      	movs	r3, #1
 800796e:	4622      	mov	r2, r4
 8007970:	4649      	mov	r1, r9
 8007972:	4638      	mov	r0, r7
 8007974:	47c0      	blx	r8
 8007976:	3001      	adds	r0, #1
 8007978:	d0e6      	beq.n	8007948 <_printf_common+0xa4>
 800797a:	3601      	adds	r6, #1
 800797c:	e7d9      	b.n	8007932 <_printf_common+0x8e>
	...

08007980 <_printf_i>:
 8007980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007984:	7e0f      	ldrb	r7, [r1, #24]
 8007986:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007988:	2f78      	cmp	r7, #120	; 0x78
 800798a:	4691      	mov	r9, r2
 800798c:	4680      	mov	r8, r0
 800798e:	460c      	mov	r4, r1
 8007990:	469a      	mov	sl, r3
 8007992:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007996:	d807      	bhi.n	80079a8 <_printf_i+0x28>
 8007998:	2f62      	cmp	r7, #98	; 0x62
 800799a:	d80a      	bhi.n	80079b2 <_printf_i+0x32>
 800799c:	2f00      	cmp	r7, #0
 800799e:	f000 80d4 	beq.w	8007b4a <_printf_i+0x1ca>
 80079a2:	2f58      	cmp	r7, #88	; 0x58
 80079a4:	f000 80c0 	beq.w	8007b28 <_printf_i+0x1a8>
 80079a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079b0:	e03a      	b.n	8007a28 <_printf_i+0xa8>
 80079b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079b6:	2b15      	cmp	r3, #21
 80079b8:	d8f6      	bhi.n	80079a8 <_printf_i+0x28>
 80079ba:	a101      	add	r1, pc, #4	; (adr r1, 80079c0 <_printf_i+0x40>)
 80079bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079c0:	08007a19 	.word	0x08007a19
 80079c4:	08007a2d 	.word	0x08007a2d
 80079c8:	080079a9 	.word	0x080079a9
 80079cc:	080079a9 	.word	0x080079a9
 80079d0:	080079a9 	.word	0x080079a9
 80079d4:	080079a9 	.word	0x080079a9
 80079d8:	08007a2d 	.word	0x08007a2d
 80079dc:	080079a9 	.word	0x080079a9
 80079e0:	080079a9 	.word	0x080079a9
 80079e4:	080079a9 	.word	0x080079a9
 80079e8:	080079a9 	.word	0x080079a9
 80079ec:	08007b31 	.word	0x08007b31
 80079f0:	08007a59 	.word	0x08007a59
 80079f4:	08007aeb 	.word	0x08007aeb
 80079f8:	080079a9 	.word	0x080079a9
 80079fc:	080079a9 	.word	0x080079a9
 8007a00:	08007b53 	.word	0x08007b53
 8007a04:	080079a9 	.word	0x080079a9
 8007a08:	08007a59 	.word	0x08007a59
 8007a0c:	080079a9 	.word	0x080079a9
 8007a10:	080079a9 	.word	0x080079a9
 8007a14:	08007af3 	.word	0x08007af3
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	1d1a      	adds	r2, r3, #4
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	602a      	str	r2, [r5, #0]
 8007a20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e09f      	b.n	8007b6c <_printf_i+0x1ec>
 8007a2c:	6820      	ldr	r0, [r4, #0]
 8007a2e:	682b      	ldr	r3, [r5, #0]
 8007a30:	0607      	lsls	r7, r0, #24
 8007a32:	f103 0104 	add.w	r1, r3, #4
 8007a36:	6029      	str	r1, [r5, #0]
 8007a38:	d501      	bpl.n	8007a3e <_printf_i+0xbe>
 8007a3a:	681e      	ldr	r6, [r3, #0]
 8007a3c:	e003      	b.n	8007a46 <_printf_i+0xc6>
 8007a3e:	0646      	lsls	r6, r0, #25
 8007a40:	d5fb      	bpl.n	8007a3a <_printf_i+0xba>
 8007a42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007a46:	2e00      	cmp	r6, #0
 8007a48:	da03      	bge.n	8007a52 <_printf_i+0xd2>
 8007a4a:	232d      	movs	r3, #45	; 0x2d
 8007a4c:	4276      	negs	r6, r6
 8007a4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a52:	485a      	ldr	r0, [pc, #360]	; (8007bbc <_printf_i+0x23c>)
 8007a54:	230a      	movs	r3, #10
 8007a56:	e012      	b.n	8007a7e <_printf_i+0xfe>
 8007a58:	682b      	ldr	r3, [r5, #0]
 8007a5a:	6820      	ldr	r0, [r4, #0]
 8007a5c:	1d19      	adds	r1, r3, #4
 8007a5e:	6029      	str	r1, [r5, #0]
 8007a60:	0605      	lsls	r5, r0, #24
 8007a62:	d501      	bpl.n	8007a68 <_printf_i+0xe8>
 8007a64:	681e      	ldr	r6, [r3, #0]
 8007a66:	e002      	b.n	8007a6e <_printf_i+0xee>
 8007a68:	0641      	lsls	r1, r0, #25
 8007a6a:	d5fb      	bpl.n	8007a64 <_printf_i+0xe4>
 8007a6c:	881e      	ldrh	r6, [r3, #0]
 8007a6e:	4853      	ldr	r0, [pc, #332]	; (8007bbc <_printf_i+0x23c>)
 8007a70:	2f6f      	cmp	r7, #111	; 0x6f
 8007a72:	bf0c      	ite	eq
 8007a74:	2308      	moveq	r3, #8
 8007a76:	230a      	movne	r3, #10
 8007a78:	2100      	movs	r1, #0
 8007a7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a7e:	6865      	ldr	r5, [r4, #4]
 8007a80:	60a5      	str	r5, [r4, #8]
 8007a82:	2d00      	cmp	r5, #0
 8007a84:	bfa2      	ittt	ge
 8007a86:	6821      	ldrge	r1, [r4, #0]
 8007a88:	f021 0104 	bicge.w	r1, r1, #4
 8007a8c:	6021      	strge	r1, [r4, #0]
 8007a8e:	b90e      	cbnz	r6, 8007a94 <_printf_i+0x114>
 8007a90:	2d00      	cmp	r5, #0
 8007a92:	d04b      	beq.n	8007b2c <_printf_i+0x1ac>
 8007a94:	4615      	mov	r5, r2
 8007a96:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a9a:	fb03 6711 	mls	r7, r3, r1, r6
 8007a9e:	5dc7      	ldrb	r7, [r0, r7]
 8007aa0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007aa4:	4637      	mov	r7, r6
 8007aa6:	42bb      	cmp	r3, r7
 8007aa8:	460e      	mov	r6, r1
 8007aaa:	d9f4      	bls.n	8007a96 <_printf_i+0x116>
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	d10b      	bne.n	8007ac8 <_printf_i+0x148>
 8007ab0:	6823      	ldr	r3, [r4, #0]
 8007ab2:	07de      	lsls	r6, r3, #31
 8007ab4:	d508      	bpl.n	8007ac8 <_printf_i+0x148>
 8007ab6:	6923      	ldr	r3, [r4, #16]
 8007ab8:	6861      	ldr	r1, [r4, #4]
 8007aba:	4299      	cmp	r1, r3
 8007abc:	bfde      	ittt	le
 8007abe:	2330      	movle	r3, #48	; 0x30
 8007ac0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ac4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007ac8:	1b52      	subs	r2, r2, r5
 8007aca:	6122      	str	r2, [r4, #16]
 8007acc:	f8cd a000 	str.w	sl, [sp]
 8007ad0:	464b      	mov	r3, r9
 8007ad2:	aa03      	add	r2, sp, #12
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	4640      	mov	r0, r8
 8007ad8:	f7ff fee4 	bl	80078a4 <_printf_common>
 8007adc:	3001      	adds	r0, #1
 8007ade:	d14a      	bne.n	8007b76 <_printf_i+0x1f6>
 8007ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ae4:	b004      	add	sp, #16
 8007ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	f043 0320 	orr.w	r3, r3, #32
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	4833      	ldr	r0, [pc, #204]	; (8007bc0 <_printf_i+0x240>)
 8007af4:	2778      	movs	r7, #120	; 0x78
 8007af6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	6829      	ldr	r1, [r5, #0]
 8007afe:	061f      	lsls	r7, r3, #24
 8007b00:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b04:	d402      	bmi.n	8007b0c <_printf_i+0x18c>
 8007b06:	065f      	lsls	r7, r3, #25
 8007b08:	bf48      	it	mi
 8007b0a:	b2b6      	uxthmi	r6, r6
 8007b0c:	07df      	lsls	r7, r3, #31
 8007b0e:	bf48      	it	mi
 8007b10:	f043 0320 	orrmi.w	r3, r3, #32
 8007b14:	6029      	str	r1, [r5, #0]
 8007b16:	bf48      	it	mi
 8007b18:	6023      	strmi	r3, [r4, #0]
 8007b1a:	b91e      	cbnz	r6, 8007b24 <_printf_i+0x1a4>
 8007b1c:	6823      	ldr	r3, [r4, #0]
 8007b1e:	f023 0320 	bic.w	r3, r3, #32
 8007b22:	6023      	str	r3, [r4, #0]
 8007b24:	2310      	movs	r3, #16
 8007b26:	e7a7      	b.n	8007a78 <_printf_i+0xf8>
 8007b28:	4824      	ldr	r0, [pc, #144]	; (8007bbc <_printf_i+0x23c>)
 8007b2a:	e7e4      	b.n	8007af6 <_printf_i+0x176>
 8007b2c:	4615      	mov	r5, r2
 8007b2e:	e7bd      	b.n	8007aac <_printf_i+0x12c>
 8007b30:	682b      	ldr	r3, [r5, #0]
 8007b32:	6826      	ldr	r6, [r4, #0]
 8007b34:	6961      	ldr	r1, [r4, #20]
 8007b36:	1d18      	adds	r0, r3, #4
 8007b38:	6028      	str	r0, [r5, #0]
 8007b3a:	0635      	lsls	r5, r6, #24
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	d501      	bpl.n	8007b44 <_printf_i+0x1c4>
 8007b40:	6019      	str	r1, [r3, #0]
 8007b42:	e002      	b.n	8007b4a <_printf_i+0x1ca>
 8007b44:	0670      	lsls	r0, r6, #25
 8007b46:	d5fb      	bpl.n	8007b40 <_printf_i+0x1c0>
 8007b48:	8019      	strh	r1, [r3, #0]
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	6123      	str	r3, [r4, #16]
 8007b4e:	4615      	mov	r5, r2
 8007b50:	e7bc      	b.n	8007acc <_printf_i+0x14c>
 8007b52:	682b      	ldr	r3, [r5, #0]
 8007b54:	1d1a      	adds	r2, r3, #4
 8007b56:	602a      	str	r2, [r5, #0]
 8007b58:	681d      	ldr	r5, [r3, #0]
 8007b5a:	6862      	ldr	r2, [r4, #4]
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	4628      	mov	r0, r5
 8007b60:	f7f8 fb3e 	bl	80001e0 <memchr>
 8007b64:	b108      	cbz	r0, 8007b6a <_printf_i+0x1ea>
 8007b66:	1b40      	subs	r0, r0, r5
 8007b68:	6060      	str	r0, [r4, #4]
 8007b6a:	6863      	ldr	r3, [r4, #4]
 8007b6c:	6123      	str	r3, [r4, #16]
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b74:	e7aa      	b.n	8007acc <_printf_i+0x14c>
 8007b76:	6923      	ldr	r3, [r4, #16]
 8007b78:	462a      	mov	r2, r5
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	4640      	mov	r0, r8
 8007b7e:	47d0      	blx	sl
 8007b80:	3001      	adds	r0, #1
 8007b82:	d0ad      	beq.n	8007ae0 <_printf_i+0x160>
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	079b      	lsls	r3, r3, #30
 8007b88:	d413      	bmi.n	8007bb2 <_printf_i+0x232>
 8007b8a:	68e0      	ldr	r0, [r4, #12]
 8007b8c:	9b03      	ldr	r3, [sp, #12]
 8007b8e:	4298      	cmp	r0, r3
 8007b90:	bfb8      	it	lt
 8007b92:	4618      	movlt	r0, r3
 8007b94:	e7a6      	b.n	8007ae4 <_printf_i+0x164>
 8007b96:	2301      	movs	r3, #1
 8007b98:	4632      	mov	r2, r6
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	4640      	mov	r0, r8
 8007b9e:	47d0      	blx	sl
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	d09d      	beq.n	8007ae0 <_printf_i+0x160>
 8007ba4:	3501      	adds	r5, #1
 8007ba6:	68e3      	ldr	r3, [r4, #12]
 8007ba8:	9903      	ldr	r1, [sp, #12]
 8007baa:	1a5b      	subs	r3, r3, r1
 8007bac:	42ab      	cmp	r3, r5
 8007bae:	dcf2      	bgt.n	8007b96 <_printf_i+0x216>
 8007bb0:	e7eb      	b.n	8007b8a <_printf_i+0x20a>
 8007bb2:	2500      	movs	r5, #0
 8007bb4:	f104 0619 	add.w	r6, r4, #25
 8007bb8:	e7f5      	b.n	8007ba6 <_printf_i+0x226>
 8007bba:	bf00      	nop
 8007bbc:	08007f91 	.word	0x08007f91
 8007bc0:	08007fa2 	.word	0x08007fa2

08007bc4 <memmove>:
 8007bc4:	4288      	cmp	r0, r1
 8007bc6:	b510      	push	{r4, lr}
 8007bc8:	eb01 0402 	add.w	r4, r1, r2
 8007bcc:	d902      	bls.n	8007bd4 <memmove+0x10>
 8007bce:	4284      	cmp	r4, r0
 8007bd0:	4623      	mov	r3, r4
 8007bd2:	d807      	bhi.n	8007be4 <memmove+0x20>
 8007bd4:	1e43      	subs	r3, r0, #1
 8007bd6:	42a1      	cmp	r1, r4
 8007bd8:	d008      	beq.n	8007bec <memmove+0x28>
 8007bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007be2:	e7f8      	b.n	8007bd6 <memmove+0x12>
 8007be4:	4402      	add	r2, r0
 8007be6:	4601      	mov	r1, r0
 8007be8:	428a      	cmp	r2, r1
 8007bea:	d100      	bne.n	8007bee <memmove+0x2a>
 8007bec:	bd10      	pop	{r4, pc}
 8007bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bf6:	e7f7      	b.n	8007be8 <memmove+0x24>

08007bf8 <_sbrk_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4d06      	ldr	r5, [pc, #24]	; (8007c14 <_sbrk_r+0x1c>)
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	4604      	mov	r4, r0
 8007c00:	4608      	mov	r0, r1
 8007c02:	602b      	str	r3, [r5, #0]
 8007c04:	f7f9 f826 	bl	8000c54 <_sbrk>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_sbrk_r+0x1a>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_sbrk_r+0x1a>
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	20000404 	.word	0x20000404

08007c18 <memcpy>:
 8007c18:	440a      	add	r2, r1
 8007c1a:	4291      	cmp	r1, r2
 8007c1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007c20:	d100      	bne.n	8007c24 <memcpy+0xc>
 8007c22:	4770      	bx	lr
 8007c24:	b510      	push	{r4, lr}
 8007c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c2e:	4291      	cmp	r1, r2
 8007c30:	d1f9      	bne.n	8007c26 <memcpy+0xe>
 8007c32:	bd10      	pop	{r4, pc}

08007c34 <_realloc_r>:
 8007c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c38:	4680      	mov	r8, r0
 8007c3a:	4614      	mov	r4, r2
 8007c3c:	460e      	mov	r6, r1
 8007c3e:	b921      	cbnz	r1, 8007c4a <_realloc_r+0x16>
 8007c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c44:	4611      	mov	r1, r2
 8007c46:	f7ff bc49 	b.w	80074dc <_malloc_r>
 8007c4a:	b92a      	cbnz	r2, 8007c58 <_realloc_r+0x24>
 8007c4c:	f7ff fbda 	bl	8007404 <_free_r>
 8007c50:	4625      	mov	r5, r4
 8007c52:	4628      	mov	r0, r5
 8007c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c58:	f000 f81b 	bl	8007c92 <_malloc_usable_size_r>
 8007c5c:	4284      	cmp	r4, r0
 8007c5e:	4607      	mov	r7, r0
 8007c60:	d802      	bhi.n	8007c68 <_realloc_r+0x34>
 8007c62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c66:	d812      	bhi.n	8007c8e <_realloc_r+0x5a>
 8007c68:	4621      	mov	r1, r4
 8007c6a:	4640      	mov	r0, r8
 8007c6c:	f7ff fc36 	bl	80074dc <_malloc_r>
 8007c70:	4605      	mov	r5, r0
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d0ed      	beq.n	8007c52 <_realloc_r+0x1e>
 8007c76:	42bc      	cmp	r4, r7
 8007c78:	4622      	mov	r2, r4
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	bf28      	it	cs
 8007c7e:	463a      	movcs	r2, r7
 8007c80:	f7ff ffca 	bl	8007c18 <memcpy>
 8007c84:	4631      	mov	r1, r6
 8007c86:	4640      	mov	r0, r8
 8007c88:	f7ff fbbc 	bl	8007404 <_free_r>
 8007c8c:	e7e1      	b.n	8007c52 <_realloc_r+0x1e>
 8007c8e:	4635      	mov	r5, r6
 8007c90:	e7df      	b.n	8007c52 <_realloc_r+0x1e>

08007c92 <_malloc_usable_size_r>:
 8007c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c96:	1f18      	subs	r0, r3, #4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	bfbc      	itt	lt
 8007c9c:	580b      	ldrlt	r3, [r1, r0]
 8007c9e:	18c0      	addlt	r0, r0, r3
 8007ca0:	4770      	bx	lr
	...

08007ca4 <_init>:
 8007ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca6:	bf00      	nop
 8007ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007caa:	bc08      	pop	{r3}
 8007cac:	469e      	mov	lr, r3
 8007cae:	4770      	bx	lr

08007cb0 <_fini>:
 8007cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb2:	bf00      	nop
 8007cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cb6:	bc08      	pop	{r3}
 8007cb8:	469e      	mov	lr, r3
 8007cba:	4770      	bx	lr
